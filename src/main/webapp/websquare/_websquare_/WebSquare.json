{
  "!name": "WebSquare",
  "$p": {
    "dateDiff": {
      "!type": "fn(startDate: string, endDate: string)",
      "!doc": "두 날짜 사이의 차이를 반환합니다.\n\n**Parameters:**\n\n```startDate``` - ```String:Y``` - 시작 날짜\n\n```endDate``` - ```String:Y``` - 끝 날짜\n\n**Return:**\n\n```Number``` - 두 날짜의 차이\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar numResult1 = $p.dateDiff(\"19450815\", \"19450816\");\n//return 예시) 1\n\nvar numResult2 = $p.dateDiff(\"20120120\", \"20120210\");\n//return 예시) 21\n\nvar numResult3 = $p.dateDiff(\"20120210\", \"20120120\");\n//return 예시) -21\n```\n\n"
    },
    "getTimeoutKeyList": {
      "!type": "fn()",
      "!doc": "'$p.setTimeout'함수로 등록된 'Timeout'객체의 'key'를 배열로 반환합니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Return:**\n\n```Array``` - '$p.setTimeout'함수로 등록된 'Timeout'객체의 'key'의 목록\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// Timeout 등록 예시\n$p.setTimeout(\n    function () {\n        console.log(\"setTimeout\");\n    },\n    {\n        key: \"exam_timeout1\",\n        delay: 3000\n    }\n);\n\nvar arrKeyList = $p.getTimeoutKeyList();\n// return 예시) ['exam_timeout1']\n\n// 등록된 timeout 객체 해제\narrKeyList.forEach(function (argKey) {\n    $p.clearTimeout(argKey); // timeout 객체 제거\n});\n```\n\n"
    },
    "parent": {
      "!type": "fn()",
      "!doc": "이 함수를 호출한 화면의 부모 페이지의 scope 객체를 반환합니다.\n\n반환 받은 scope 객체를 통해 부모 화면에 구성된 'scwin' 객체 및 컴포넌트에 접근할 수 있습니다.\n\n\n\n(주의 사항)\n\n이 함수를 호출하는 화면이 WFrame의 'scpoe' 속성이 'true'로 지정되지 않은 화면이라면,\n\n부모 화면의 최상위 페이지의 scope 객체가 반환됩니다.\n\n(config 파일의 WFrame의 'scope' 속성의 기본 값은 'true'입니다.)\n\n\n\n팝업 유형이 'iframePopup', 'browserPopup'일 때, 팝업 화면은 별도의 window 객체에 생성됩니다.\n\n이 경우 '$p.parent' 함수를 호출하면, 팝업을 호출한 화면의 최상위 페이지의 scope 객체가 반환됩니다.\n\n**Return:**\n\n```Object``` - 전역 window객체 또는 wframe의 scope 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 부모 페이지에 구성된 Input 컴포넌트의 ID가 'ibx_exam1'일 때 컴포넌트의 'setValue' 함수를 호출하는 예시\n$p.parent().ibx_exam1.setValue(\"Example\");\n\n// 예시 2) 부모 페이지의 'scwin.getTopPageInfo' 함수를 호출하는 예시\n$p.parent().scwin.getTopPageInfo();\n```\n\n"
    },
    "data": {
      "set": {
        "!type": "fn(dataType: string, dataObject: +Object, idArray: +Object)",
        "!doc": "여러 개의 DataList 또는 DataMap에 데이터를 할당합니다.\n\n(LinkedDataList, AliasDataList, AliasDataMap은 제외됩니다. 이 객체들의 데이터는 참조한 DataList 또는 DataMap에 할당해야 합니다.)\n\n**Parameters:**\n\n```dataType``` - ```String:Y``` - [ARRAY, JSON, XML] 데이터의 타입. 두 번째 인자(dataObject)에 지정할 데이터의 타입을 지정합니다.\n\n```dataObject``` - ```JSON||ARRAY||XML:Y``` - 데이터 객체. 첫 번째 인자(dataType)에 지정된 데이터 타입과 동일해야 합니다.\n\n```idArray``` - ```Array:N``` - DataList 또는 DataMap의 ID의 문자열 또는 데이터 할당 조건을 정의한 JSON 객체를 배열로 정의합니다.\n\n\n두 번재 인자(dataObject) 값에서 이 값에 지정한 ID 또는 조건에 해당하는 데이터를 추출하여 할당합니다.\nJSON 형식으로 정의하는 경우 다음과 같이 구성합니다.\n\n|property|type|description|\n|:-|:-|:-|\n|{\"id\"|\"화면에 정의된 데이터 객체의 ID\", \"key\" : \"두 번째 인자에 정의된 KEY\"}|null|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (DataCollection의 소스 예시)\n<w2:dataList id=\"dataList1\" baseNode=\"list\" repeatNode=\"map\" saveRemovedData=\"true\">\n    <w2:columnInfo>\n        <w2:column id=\"code\" name=\"코드\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"코드명\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n<\/w2:dataList>\n<w2:dataMap id=\"dataMap1\" baseNode=\"map\">\n    <w2:keyInfo>\n        <w2:key id=\"lang\" name=\"언어코드\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"output\" name=\"출력값\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\n\n// 예시 1) 첫 번째 인자(dataType)별\n// 예시 1-1) JSON 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있습니다.\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"dataMap1\": {\n            \"lang\": \"en\", \n            \"output\": \"WebSquare\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }\n);\n// 예시 1-1) JSON 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 ID가 동일하기 때문에 값이 할당됩니다.\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 ID가 일치하는 객체가 없기 때문에 무시됩니다.\n\n\n// 예시 1-2) ARRAY 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있습니다.\n$p.data.set(\n    \"ARRAY\",\n    {\n        \"dataList1\": {\n            \"columnInfo\": [\n                \"code\",\n                \"label\"\n            ],\n            \"data\": [\"C0001\", \"CODE1\", \"C0002\", \"CODE2\"]\n        },\n        \"dataMap1\": [\"en\", \"WebSquare\"],\n        \"undefined_data\": [\"C0001\", \"CODE1\"]\n    }\n);\n// 예시 1-2) ARRAY 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 ID가 동일하기 때문에 값이 할당됩니다.\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 ID가 일치하는 객체가 없기 때문에 무시됩니다.\n\n\n// 예시 1-3) XML 유형\nlet strXML = '' +\n    '<map>' +\n    '    <list id=\"dataList1\">' +\n    '        <map>' +\n    '            <code>C0001<\/code>' +\n    '            <label>CODE1<\/label>' +\n    '        <\/map>' +\n    '        <map>' +\n    '            <code>C0002<\/code>' +\n    '            <label>CODE2<\/label>' +\n    '        <\/map>' +\n    '    <\/list>' +\n    '    <map id=\"dataMap1\">' +\n    '        <lang>en<\/lang>' +\n    '        <output>WebSquare<\/output>' +\n    '    <\/map>' +\n    '    <map id=\"undefined_data\">' +\n    '        <code>C0001<\/code>' +\n    '        <label>CODE1<\/label>' +\n    '    <\/map>' +\n    '<\/map>';\n// 예시 1-3) XML 유형 - 실행 결과\n// XML 경로 \"map/list/@id\"에 정의된 \"dataList1\"와 XML 경로 \"map/map[1]/@id\"에 정의된 \"dataMap1\"은 화면에 정의된 데이터 객체와 ID가 동일하기 때문에 값이 할당됩니다.\n// 반면, XML 경로 \"map/map[2]/@id\"에 정의된 \"undefined_data\"는 화면에 정의된 데이터 객체의 ID가 일치하는 객체가 없기 때문에 무시됩니다.\n\n\n// 예시 2) 세 번째 인자(idArray)\n// 예시 2-1) ID 문자열\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 KEY(\"dataList1\", \"undefined_data\")로 구성되어 있습니다.\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }, \n    [\"dataList1\", \"dataMap1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-1) ID 문자열 - 실행 결과\n// 세 번째 인자에 정의된 ID 문자열 중에 유효한 값은 화면에 정의된 데이터 객체와 ID가 일치하는 \"dataList1\", \"dataMap1\"입니다.\n// 두 번째 인자 값에서 \"dataList1\" KEY를 추출하여 할당합니다.\n// 반면, 두 번째 인자 값에 dataMap1\" KEY는 정의되지 않았기 때문에 할당되지 않습니다.\n\n\n// 예시 2-2) 조건이 정의된 JSON 형식\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 KEY(\"dataList1\", \"user_dataMap1\", \"undefined_data\")로 구성되어 있습니다.\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001_condition\", \"label\": \"CODE1\" }\n        ],\n        \"user_dataMap1\": {\n            \"lang\": \"en\",\n            \"output\": \"WebSquare_condition\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    },\n    [{ \"id\": \"dataMap1\", \"key\": \"user_dataMap1\" }, \"dataList1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-2) 조건이 정의된 JSON 형식 - 실행 결과\n// 세 번째 인자에 정의된 유효한 인자 값은 다음의 2가지 입니다.\n// 1. 배열의 0번째에 정의된 JSON 객체의 \"id\"에 정의된 \"dataMap1\"(화면에 정의된 데이터 객체의 ID와 JSON 객체의 \"id\"에 할당된 값이 일치).\n// JSON 객체의 \"key\"에 정의된 \"user_dataMap1\"를 두 번째 인자 값에서 추출하여 데이터 객체 \"dataMap1\"에 할당합니다.\n// 2. 배열의 1번째에 정의된 \"dataList1\"(화면에 정의된 데이터 객체의 ID와 일치).\n// 두 번째 인자 값에서 \"dataList1\"를 추출하여 데이터 객체 \"dataList1\"에 할당합니다.\n```\n\n"
      },
      "getBroadcast": {
        "!type": "fn()",
        "!doc": "전체 DataCollection의 Broadcast 기능의 활성화 여부를 반환합니다.\n\n(제약 사항)\n\n이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 DataCollection이 대상입니다.\n\nIFrame의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됩니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Return:**\n\n```boolean``` - [true, false] 전체 DataCollection의 Broadcast 기능의 활성화 여부.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) 전체 DataCollection의 Broadcast 기능의 활성화 여부 반환.\nvar blnResult = $p.data.getBroadcast();\n// return 예시 - 활성화된 경우) true\n// return 예시 - 비활성화된 경우) false\n```\n\n"
      },
      "getInfo": {
        "!type": "fn(idArray: +Object)",
        "!doc": "DataCollection의 상세 정보(xml에서 입력한 attribute 값)를 조회하는 함수\n\n**Parameters:**\n\n```idArray``` - ```Array:N``` - 각 DataCollection(DataMap/DataList) ID를 담고 있는 Array. 값을 지정하지 않을 경우 모든 dataCollection이 대상이 된다.\n\n**Return:**\n\n```JSON``` - 각 dataCollection의 하위 attribute값을 json형태로 표현한 json객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.data.getInfo(); // 모든 dataCollection의 상세정보 조회\n$p.data.getInfo([\"dataList1\",\"dataMap1\"]); // dataList1, dataMap1에 대한 상세정보 조회\n```\n\n"
      },
      "get": {
        "!type": "fn(type: string, dcOptions: +Object, returnOptions: +Object)",
        "!doc": "여러 개의 DataList 또는 DataMap의 데이터를 반환합니다. 반환받을 데이터의 유형은 첫 번째 인자(type)로 지정할 수 있습니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - [JSON, XML, ARRAY] 반환 받을 데이터 유형.\n\n```dcOptions``` - ```Array:Y``` - 반환받을 DataList 또는 DataMap의 조건이 담긴 배열. 배열에 ID 문자열 또는 반환 조건이 담긴 JSON 객체를 할당합니다.\n\n|property|type|description|\n|:-|:-|:-|\n|다음은|JSON 객체 정의 예시입니다.|null|\n|{|null|null|\n|\"key\"|\"<String:N> id 대신 할당할 값\",|null|\n|\"action\"|\"<String:N> [default : 'all', 'modified', 'inserted', 'deleted', 'updated', 'matched', 'unmatched'] 필터 유형\",|null|\n|\"matchedColumn\"|\"<String:N> 속성 'action'의 설정 값이 'matched' 또는 'unmatched'인 경우 대상 컬럼의 ID\",|null|\n|\"matchedData\"|\"<String:N> 속성 'action'의 설정 값이 'matched' 또는 'unmatched'인 경우 비교할 데이터\",|null|\n|\"includeColumns\"|\"<ARRAY:N> 반환받을 컬럼 ID가 담긴 배열\"|null|\n|}|null|null|\n\n\n```returnOptions``` - ```Object:N``` - 반환받을 데이터의 추가 선택 사항\n\n|property|type|description|\n|:-|:-|:-|\n|returnOptions.singleMode|<Boolean:N>|[default: false, true] DataList 또는 DataMap의 ID를 제외하고 데이터만으로 구성할지의 여부. 반환받을 데이터 객체가 1개인 경우에만 동작합니다. 설정 값이 true인 경우 DataList 또는 DataMap의 ID를 포함하여 반환되고, 설정 값이 false인 경우 ID가 제외되고 오직 Data만 반환됩니다.|\n\n**Return:**\n\n```JSON||XML||Array``` - 데이터 객체.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (DataCollection 소스 예시)\n// <w2:dataCollection baseNode=\"map\">\n//     <w2:dataList id=\"dataList1\" baseNode=\"list\" repeatNode=\"map\" saveRemovedData=\"true\">\n//         <w2:columnInfo>\n//             <w2:column id=\"code\" name=\"코드\" dataType=\"text\"><\/w2:column>\n//             <w2:column id=\"label\" name=\"코드명\" dataType=\"text\"><\/w2:column>\n//         <\/w2:columnInfo>\n//         <w2:data use=\"true\">\n//             <w2:row>\n//                 <code><![CDATA[C0001]]><\/code>\n//                 <label><![CDATA[TYPE1]]><\/label>\n//             <\/w2:row>\n//             <w2:row>\n//                 <code><![CDATA[C0002]]><\/code>\n//                 <label><![CDATA[TYPE2]]><\/label>\n//             <\/w2:row>\n//         <\/w2:data>\n//     <\/w2:dataList>\n//     <w2:dataMap id=\"dataMap1\" baseNode=\"map\" >\n//         <w2:keyInfo>\n//             <w2:key id=\"lang\" name=\"언어코드\" dataType=\"text\"><\/w2:key>\n//             <w2:key id=\"output\" name=\"출력값\" dataType=\"text\"><\/w2:key>\n//         <\/w2:keyInfo>\n//         <w2:data use=\"true\">\n//             <lang><![CDATA[ko]]><\/lang>\n//             <output><![CDATA[한국어]]><\/output>\n//         <\/w2:data>\n//     <\/w2:dataMap>\n// <\/w2: dataCollection >\n\n// 예시 1) 단건 - 두 번째 인자(dcOptions)에 반환 받을 DataList 또는 DataMap의 ID만 지정한 경우.    \nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\"]);\n// return 예시) \n// {\"dataMap1\":{\"lang\":\"ko\",\"output\":\"한국어\"}}\n\n// 예시 2) 다건 - 두 번째 인자(dcOptions)에 반환 받을 DataList 또는 DataMap의 ID만 지정한 경우.\nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\", \"dataList1\"]);\n// return 예시) \n// {\n//     \"dataMap1\": { \"lang\": \"ko\", \"output\": \"한국어\" },\n//     \"dataList1\": [{ \"code\": \"C0001\", \"label\": \"TYPE1\", \"rowStatus\": \"R\" }, { \"code\": \"C0002\", \"label\": \"TYPE2\", \"rowStatus\": \"R\" }]\n// }\n\n// 예시 3) id 'dataMap1'를 'dma_exam1'로 변경하여 반환. 'id' : DataList 또는 DataMap의 ID. 'key' : 반환될 데이터의 'id'를 지정한 값으로 변경합니다.\nvar jsnData = $p.data.get(\"JSON\", [{ id: \"dataMap1\", key: \"dma_exam1\" }]);\n// return 예시) \n// {\"dma_exam1\":{\"lang\":\"ko\",\"output\":\"한국어\"}}\n\n// 예시 4) id를 제외하고 반환. 세 번째 인자(returnOptions)의 속성 \"singleMode\"를 true로 설정.\nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\"], { \"singleMode\": true });\n// return 예시) \n// {\"lang\":\"ko\",\"output\":\"한국어\"}\n\n// 예시 5) 다건 - ARRAY 유형\nvar jsnData = $p.data.get(\"ARRAY\", [\"dataMap1\", \"dataList1\"]);\n// return 예시) \n// {\n//     \"dataMap1\": { \"lang\": \"ko\", \"output\": \"한국어\" },\n//     \"dataList1\": {\n//         \"columnInfo\": [\"code\", \"label\"],\n//             \"data\": [\"C0001\", \"TYPE1\", \"C0002\", \"TYPE2\"]\n//     }\n// }\n\n// 예시 6) 다건 - XML 유형\nvar xmlData = $p.data.get(\"XML\", [\"dataMap1\", \"dataList1\"]);\n// return 예시) \n// <map>\n//     <map id=\"dataMap1\">\n//         <lang>ko<\/lang>\n//         <output>한국어<\/output>\n//     <\/map>\n//     <list id=\"dataList1\">\n//         <map index=\"0\">\n//             <code>C0001<\/code>\n//             <label>TYPE1<\/label>\n//             <rowStatus statusValue=\"0\">R<\/rowStatus>\n//         <\/map>\n//         <map index=\"1\">\n//             <code>C0002<\/code>\n//             <label>TYPE2<\/label>\n//             <rowStatus statusValue=\"0\">R<\/rowStatus>\n//         <\/map>\n//     <\/list>\n// <\/map>\n\n// 예시 7) 데이터에 필터 적용 - 수정 상태(삽입, 삭제, 수정)의 데이터만 추출\nvar jsnData = $p.data.get(\"JSON\", [{ id: \"dataList1\", action: \"modified\" }]);\n// return 예시)\n// {\n//     \"dataList1\":[\n//         {\"code\":\"C0004\",\"label\":\"TYPE4\",\"rowStatus\":\"C\"},\n//         {\"code\":\"C0001\",\"label\":\"TYPE1\",\"rowStatus\":\"D\"},\n//         {\"code\":\"C0002\",\"label\":\"TYPE2-M\",\"rowStatus\":\"U\"},\n//         {\"code\":\"C0003\",\"label\":\"TYPE3\",\"rowStatus\":\"E\"}\n//     ]\n// }\n```\n\n"
      },
      "create": {
        "!type": "fn(dataCollectionInfo: +Object)",
        "!doc": "DataList 또는 DataMap을 생성합니다. 첫 번째 인자(dataCollectionInfo)에 생성할 객체의 구조를 JSON 객체 또는 XML 형식의 문자열로 정의합니다.\n\n**Parameters:**\n\n```dataCollectionInfo``` - ```JSON||String:Y``` - DataList 또는 DataMap의 구조를 정의한 JSON 객체 또는 XML 문자열.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) dataList 생성 (JSON 객체)\nvar jsnOptionDataList = {\n    \"id\": \"dlt_exam_json\",\n    \"type\": \"dataList\",\n    \"option\": {\n        \"baseNode\": \"list\",\n        \"repeatNode\": \"map\"\n    },\n    \"columnInfo\": [\n        {\n            \"id\": \"code\",\n            \"name\": \"코드\",\n            \"dataType\": \"text\"\n        }, {\n            \"id\": \"label\",\n            \"name\": \"코드명\",\n            \"dataType\": \"text\"\n        }\n    ]\n};\n$p.data.create(jsnOptionDataList);\n\n// 예시 2) dataMap 생성 (JSON 객체) \nvar jsnOptionDataMap = {\n    \"id\": \"dma_exam_json\",\n    \"type\": \"dataMap\",\n    \"option\": {\n        \"baseNode\": \"map\"\n    },\n    \"keyInfo\": [\n        {\n            \"id\": \"code\",\n            \"name\": \"코드\",\n            \"dataType\": \"text\"\n        }, {\n            \"id\": \"label\",\n            \"name\": \"코드명\",\n            \"dataType\": \"text\"\n        }\n    ]\n};\n$p.data.create(jsnOptionDataMap);\n\n// 예시 3) dataList 생성 (XML 문자열)\nvar strDataList = '<w2:dataList id=\"dlt_exam_xml\" baseNode=\"vector\" repeatNode=\"item\" valueNode=\"\"> ' +\n    '<w2:columnInfo>' +\n    '<w2:column id=\"code\" name=\"코드\" dataType=\"text\"><\/w2:column>' +\n    '<w2:column id=\"label\" name=\"코드명\" dataType=\"text\"><\/w2:column>' +\n    '<\/w2:columnInfo>' +\n    '<\/w2:dataList>';\n$p.data.create(strDataList);\n\n// 예시 4) dataMap 생성 (XML 문자열)\nvar strDataMap = '<w2:dataMap baseNode=\"map\" id=\"dma_exam_xml\">' +\n    '<w2:keyInfo>' +\n    '<w2:key id=\"code\" name=\"코드\" dataType=\"text\"><\/w2:key>' +\n    '<w2:key id=\"label\" name=\"코드명\" dataType=\"text\"><\/w2:key>' +\n    '<\/w2:keyInfo>' +\n    '<\/w2:dataMap>';\n$p.data.create(strDataMap);\n```\n\n"
      },
      "getAllDataCollection": {
        "!type": "fn(type: string)",
        "!doc": "실행된 모든 화면의 DataCollection 정보를 반환합니다.\n\n첫 번째 인자(type)에 지정한 값에 따라 DataColletion의 실행 시점의 ID만 반환받거나 DataColletion 객체를 반환받을 수 있습니다.\n\n이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 DataCollection이 대상입니다.\n\nIFrame의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됩니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Parameters:**\n\n```type``` - ```string:N``` - [object] DataCollection 정보 유형. 'object'로 지정된 경우 객체를 반환하고 그 외의 경우에는 ID 문자열을 반환합니다.\n\n**Return:**\n\n```Array``` - DataCollection의 ID 문자열 또는 객체를 담은 배열.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 이 함수를 호출한 화면의 Window 객체에 속한 모든 DataColletion의 ID를 반환\n// 실행 화면에 WFrame 컴포넌트가 구성되어 있고 ID가 'wfm_exam1'인 경우,\n// 실행 화면에 정의된 \"dataList1\"와 WFrame 소스 화면에 정의된 \"dataList1_w\"와 \"dataMap1_w\"의 실행 시점의 ID가 반환된 예시입니다.\nvar arrResult = $p.data.getAllDataCollection();\n// return 예시) [\"mf_dataList1\",\"mf_wfm_exam1_dataList1_w\",\"mf_wfm_exam1_dataMap1_w\"]\n\n// 예시 2) 이 함수를 호출한 화면의 Window 객체에 속한 모든 DataColletion의 객체를 반환.\nvar arrResult = arrResult = $p.data.getAllDataCollection(\"object\");\n// return 예시)\n// [\n//     {id: 'mf_dataList1', element: {\u2026}, \u2026}, \n//     {id: 'mf_wfm_exam1_dataList1_w', element: {\u2026}, \u2026}, \n//     {id: 'mf_wfm_exam1_dataMap1_w', element: {\u2026}, \u2026}\n// ]\n\n// 반환된 객체는 Data 객체가 가진 함수를 사용할 수 있습니다.\n// 첫 번째 Data 객체의 유형을 출력하고자 할 때\nvar strType = arrResult[0].getObjectType();\n// return 예시) 'dataList'\n```\n\n"
      },
      "setBroadcast": {
        "!type": "fn(flag: bool)",
        "!doc": "모든 화면의 전체 DataCollection의 Broadcast 기능의 활성화 여부를 설정합니다.\n\n첫 번재 인자(flag)를 false로 지정하면 Broadcast 기능이 비활성화됩니다.\n\nBroadcast가 비활성화되면 데이터 객체들(DataMap, DataList 등)의 값 변경 시, 데이터 객체와 연결된 컴포넌트가 동기화되지 않습니다.\n\n그 후, 첫 번재 인자(flag)를 true로 지정하여 Broadcast 기능을 활성화화면, 데이터 객체와 연결된 컴포넌트가 동기화됩니다.\n\n(제약 사항)\n\n이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 DataCollection이 대상입니다.\n\nIFrame의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됩니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n모든 화면에 영향을 미치므로 사용 시 주의가 필요합니다.\n\n**Parameters:**\n\n```flag``` - ```boolean:Y``` - [true, false] Broadcast 기능의 활성화 여부. 설정 값이 true이면 Broadcast가 활성화되어 DataCollection와 컴포넌트를 동기화합니다. 설정 값이 false이면  Broadcast가 비활성화되어 동기화되지 않습니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 모든 화면의 모든 DataCollection의 Broadcast를 비활성화합니다.\n$p.data.setBroadcast(false);\n\n//데이터 객체 제어(삽입, 수정, 삭제) 로직 수행\n\n// 모든 화면의 모든 DataCollection의 Broadcast를 활성화합니다. - 데이터 객체와 연결된 컴포넌트가 동기화됩니다.\n$p.data.setBroadcast(true);\n```\n\n"
      },
      "remove": {
        "!type": "fn(dataCollectionID: string)",
        "!doc": "DataList, DataMap, LinkedDataList, AliasDataList, AliasDataMap를 삭제합니다.\n\nLinkedDataList와 연결된 DataList가 삭제되면, LinkedDataList도 함께 삭제됩니다.\n\n그러나 AliasDataList, AliasDataMap에 연결된 DataList 또는 DataMap이 삭제되면, AliasDataList와 AliasDataMap은 삭제되지 않고 undefined가 할당됩니다.\n\n**Parameters:**\n\n```dataCollectionID``` - ```String:Y``` - DataList, DataMap, LinkedDataList, AliasDataList, AliasDataMap의 ID.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) 화면에 정의된 id가 'dataMap1'인 데이터 객체를 삭제합니다.\n$p.data.remove(\"dataMap1\");\n```\n\n"
      }
    },
    "getMaxMinYear": {
      "!type": "fn()",
      "!doc": "config 파일의 'WebSquare/date'의 설정값 'maxYear', 'minYear'을 JSON 형식으로 반환합니다.\n\nmaxYear 경로 : WebSquare/date/maxYear/@value //설정값이 1000 ~ 9999 사이의 값이 아닌 경우 '2099'가 반환됩니다.\n\nminYear 경로 : WebSquare/date/minYear/@value //설정값이 1000 ~ 9999 사이의 값이 아닌 경우 '1901'이 반환됩니다.\n\n('minYear'의 값이 'maxYear'의 값 보다 크면 두 값을 교환합니다.)\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) config 파일에 date 설정의 'maxYear'와 'minYear' 값을 지정하지 않은 경우\nvar jsnResult1 = $p.getMaxMinYear();\n// return 예시) {\"maxYear\":2099,\"minYear\":1920}\n\n// 예시 2) config 파일에 date 설정의 'maxYear'와 'minYear' 값을 아래와 같이 지정한 경우\n// (config.js 설정 예시)\n// {\n//   \"WebSquare\": {\n//     \"date\": {\n//       \"maxYear\": { \"@value\": \"2100\" },\n//       \"minYear\": { \"@value\": \"1920\" }\n//     }\n//   }\n// }\nvar jsnResult2 = $p.getMaxMinYear();\n// return 예시) {\"maxYear\":2100,\"minYear\":1920}\n\n\n// 예시 3) config 파일에 date 설정의 'maxYear'의 값이 'minYear' 값보다 작은 경우\n// (config.js 설정 예시)\n// {\n//   \"WebSquare\": {\n//     \"date\": {\n//       \"maxYear\": { \"@value\": \"2000\" },\n//       \"minYear\": { \"@value\": \"2300\" }\n//     }\n//   }\n// }\nvar jsnResult3 = $p.getMaxMinYear();\n// return 예시) {\"maxYear\":2300,\"minYear\":2000}\n```\n\n"
    },
    "getRunningWorkflowID": {
      "!type": "fn()",
      "!doc": "실행 중인 Workflow의 실행 시점의 ID를 반환합니다. \n\n여러 개의 Workflow가 실행 중일 경우, 가장 먼저 호출된 Workflow의 ID가 반환됩니다.\n\n**Return:**\n\n```String``` - 실행 중인 Workflow의 실행 시점의 ID. 반환될 값이 없으면 null이 반환됩니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 실행 중인 첫 번째 Workflow의 id가 'wf_exam1'인 경우\nvar strWorkflowID = $p.getRunningWorkflowID();\n\n// return 예시 1) //실행 중인 Workflow의 실행 시점의 ID로 반환 값이 다를 수 있습니다.\n// 'mf_wfm_exam1_wrk_exam1'\n```\n\n"
    },
    "setDomain": {
      "!type": "fn(domain: string)",
      "!doc": "'document.domain'의 값을 지정합니다.\n\n일반적으로 iframe, popup의 페이지 주소가 부모(parent) 또는 오프너(opener)와 도메인은 같지만 서브 도메인이 다를 경우, '크로스 도메인' 문제로 인해 화면간 데이터 통신을 할 수 없을 때 사용합니다.\n\n각 화면의 도메인을 메인 도메인으로 지정하면 '크로스 도메인' 문제를 해결할 수 있습니다.\n\n'크로스 도메인(cross-domain)'이란 호출하는 도메인과 호출받는 도메인이 다른 경우를 의미하며, 서로 다른 도메인에서 자바스크립트로 접근하려 할 때 브라우저에서 보안상의 이유로 접근을 거부하고 '권한이 없습니다.'와 같은 오류 메시지가 출력됩니다.\n\n**Parameters:**\n\n```domain``` - ```String:Y``` - 도메인\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시)\n// 각 화면의 도메인이 다음과 같을 때\n// 부모(parent) 또는 오프너(opener)의 도메인 : \"www.inswave.com\"\n// iframe 또는 popup의 도메인 : \"support.inswave.com\"\n\n// 각 화면에서 다음과 같이 도메인을 맞춰줍니다.\n$p.setDomain(\"inswave.com\");\n```\n\n"
    },
    "updateSuffix": {
      "!type": "fn(options: +Object)",
      "!doc": "서버에 위치한 '[컨텍스트]/websquare/suffix.txt'파일을 비동기 통신으로 호출하여, 웹스퀘어 엔진의 'suffix' 설정 값을 파일에 작성된 문자열로 업데이트 합니다.\n\n'suffix' 설정 값은 웹스퀘어 엔진이 웹스퀘어 리소스를 서버에 요청할 때 URL Query String으로 'postFix'에 할당됩니다.\n\nURL 예시) '/langpack/ko.js?postfix=2023_05'\n\n이러한 URL 패턴을 이용하여 브라우저의 파일 캐시를 제어합니다.\n\n'suffix.txt'파일에 작성된 내용이 없으면 'config'파일의 'WebSquare/engineCache'와 'WebSquare/environment'의 설정에 따라 'postFix'가 할당됩니다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - <String|Function:N> options.callback : callback 함수명 또는 함수 객체. 'suffix' 설정 값 없데이트 후 호출됩니다.\n\n**Since:**\n\n5.0_4.4407B.20210428.150211\n\n**Sample:**\n\n```javascript\n// 예시 1) callback을 함수로 지정하는 경우\nvar options = {};\noptions.callback = function () {\n    // 'suffix' 업데이트 후 로직 구성이 필요할 때.\n};\n$p.updateSuffix(options);\n\n// 예시 2) callback을 함수 명을 지정하는 경우\nvar options = {};\noptions.callback = \"scwin.updateSuffix_callback\";\n$p.updateSuffix(options);\n\n// 예시 3) 첫 번째 인자(options)를 지정하지 않는 경우\n$p.updateSuffix();\n```\n\n"
    },
    "main": {
      "!type": "fn()",
      "!doc": "현재 화면이 속한 window를 기준으로 최상위 페이지의 scope 객체를 반환합니다.\n\n반환 받은 scope 객체를 통해 최상위 화면에 구성된 'scwin' 객체 및 컴포넌트에 접근할 수 있습니다.\n\n이 함수를 호출하는 화면이 팝업에 속한 경우, 팝업의 유형에 따라 반환 값이 다릅니다.\n\n팝업 유형이 'iframePopup', 'browserPopup'이면 팝업 화면이 별도의 window 객체에 생성됩니다.\n\n이 경우 '$p.main' 함수를 호출하면 팝업의 최상위 페이지의 scope 객체를 반환합니다.\n\n**Return:**\n\n```Object``` - scope 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 최상위 페이지에 구성된 Input 컴포넌트의 ID가 'ibx_exam1'일 때 컴포넌트의 'setValue' 함수를 호출하는 예시\n$p.main().ibx_exam1.setValue(\"Example\");\n\n// 예시 2) 최상위 페이지의 'scwin.getTopPageInfo' 함수를 호출하는 예시\n$p.main().scwin.getTopPageInfo();\n```\n\n"
    },
    "dynamicCreate": {
      "!type": "fn(id: string, tagName: string, options: +Object, parent: +Object)",
      "!doc": "웹스퀘어 객체를 동적으로 생성합니다. 반환된 객체를 통해 생성된 컴포넌트의 함수를 실행할 수 있습니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 컴포넌트의 ID.\n\n```tagName``` - ```String:Y``` - 생성할 컴포넌트명. 각 컴포넌트의 함수 'getPluginName'로 확인할 수 있습니다.\n\n```options``` - ```Object:Y``` - 컴포넌트의 생성 옵션\n\n```parent``` - ```Object:Y``` - 컴포넌트를 추가할 대상 컴포넌트 객체. 이 값이 설정되지 않으면 HTML Elements의 'body'에 추가됩니다.\n\n**Return:**\n\n```Object``` - 생성된 컴포넌트 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (선행 작업)\n// API를 호출하는 화면에 Group 컴포넌트(이하 Group)를 생성하고, Group의 id를 'grp_target'으로 지정합니다.\n\n// 예시 1) Group 'grp_target'의 자식 요소로 컴포넌트 Group 생성하기\nvar cmpResult = $p.dynamicCreate(\n    \"grp_dynamic\", \n    \"group\", \n    {\n        style: \"background-color:#B0E0E6; height:30px; margin-bottom:6px;\"\n    },\n    grp_target\n);\n\n// 예시 2-1) Group 'grp_target'의 자식 요소로 컴포넌트 Input 생성하기\nvar cmpResult2 = $p.dynamicCreate(\n    \"ibx_dynamic\", \n    \"input\", \n    {\n        style: \"width:200px; height:24px; margin-right:6px;\",\n        placeholder: \"Please enter your name.\",\n        className: \"cm_form\" //컴포넌트의 속성 'class'에 'cm_form'을 지정\n    }, \n    grp_target\n);\n\n// 예시 2-2) 생성된 Input 컴포넌트에 'setValue' 함수로 값 할당하기\ncmpResult2.setValue(\"WebSquare\");\n\n\n// 예시 3-1) Group 'grp_target'의 자식 요소로 컴포넌트 Trigger 생성하기\nvar cmpResult3 = $p.dynamicCreate(\n    \"btn_dynamic\", \n    \"trigger\", \n    {\n        style: \"min-width:80px; height:24px; margin-right:6px; padding:0px 6px;\",\n        className: \"cm_form\" //컴포넌트의 속성 'class'에 'cm_form'을 지정\n    },\n    grp_target\n);\n\n// 예시 3-2) 생성된 Trigger 컴포넌트에 'value'에 값을 지정하고, 이벤트 'onclick' 연결하기\ncmpResult3.setValue(\"setValue\");\ncmpResult3.bind(\"onclick\", scwin.btn_dynamic_onclick); //정의된 funciton 객체 지정\n\n// 예시 4-1) Group 'grp_target'의 자식 요소로 컴포넌트 Selectbox 생성하기\nvar cmpResult4 = $p.dynamicCreate(\n    \"sbx_dynamic\", \n    \"selectbox\", \n    {\n        style: \"width:120px; height:24px; margin-right:6px; padding:0px 6px;\",\n        className: \"cm_form\", //컴포넌트의 속성 'class'에 'cm_form'을 지정\n        chooseOption : \"true\"\n    },\n    grp_target\n);\n\n// 예시 4-2) 생성된 Selectbox의 함수 'setNodeSet'를 호출하여 Item 목록과 DataList 연결하기.\ncmpResult4.setNodeSet(\"data:dlt_code\", \"lable\", \"code\");\n\n// 예시 5) 컴포넌트 'Group' 생성하기 - parent를 지정하지 않은 경우\nvar cmpResult5 = $p.dynamicCreate(\n    \"grp_dynamic_no_parent\", \n    \"group\", \n    {\n        style: \"background-color:#B22222; height:30px; margin-bottom:6px;\"\n    }\n);\n// 예시 5 - 실행 결과) parent가 지정되지 않은 경우에는 HTML Elements의 'body'에 추가됩니다.\n```\n\n"
    },
    "getSubmissionList": {
      "!type": "fn(options: +Object)",
      "!doc": "$p(이 API를 호출한 화면) 내의 모든 Submission 객체를 반환합니다.\n\n전체 화면 대상의 모든 Submission 객체를 반환하려면 options 속성의 all 값을 true로 전달합니다. 단 iframe 또는 browserPopup과 같이 window객체가 다른 화면은 대상에서 제외합니다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - return 형식을 변경할 때 사용하는 optional한 인자\n\n|property|type|description|\n|:-|:-|:-|\n|options.returnType|<String:N>|[\"json\", \"id\", \"obj\"] 중 하나의 값을 가지며 기본값은 obj. \"json\"으로 설정한 경우 json array 형식으로, \"id\"로 설정한 경우 string array 형식으로 값이 반환됩니다.|\n|options.all|<Boolean:N>|[true, false] 중 하나의 값을 가지며 기본값은 false. true인 경우 $p와 관계없이 전체 화면을 대상으로 모든 Submission 객체를 반환합니다. (iframe, browserPopup 제외)|\n\n**Return:**\n\n```Array``` - submissionList Submission 객체 배열\n\n**Since:**\n\n5.0_5.4934B.20230623.181301\n\n**Sample:**\n\n```javascript\n // (화면 예시) main.xml 아래에 wframe1.xml과 wframe2.xml이 있고 각 화면에 submission1, submission2가 정의된 경우\n wframe1.xml에서 $p.getSubmissionList();를 실행하면 wframe1.xml에 있는 submission1, submission2 객체가 array로 반환됩니다. \n main.xml에서 $p.getSubmissionList({\"returnType\": \"json\", {\"all\" : true});를 실행하면 실행 결과는 아래와 같습니다.\n // {\"mf\":[\"submission1\",\"submission2\"], \"mf_wframe1\":[\"submission1\",\"submission2\"], \"mf_wframe2\":[\"submission1\",\"submission2\"]}\n```\n\n"
    },
    "ajax": {
      "!type": "fn(options: +Object)",
      "!doc": "XHR(XMLHttpRequest)을 구현한 함수로 Submission에 비해 자유도가 높습니다.\n\n요청 데이터와 응답 데이터가 문자열로 되어있어 JavaScript로 구현된 암/복호화 모듈을 연동하기 쉽습니다.\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.action|<String:Y>|ajax 요청 주소|\n|options.mode|<String:N>|[default: asynchronous,synchronous]|\n|options.mediatype|<String:Y>|[default: application/xml, application/x-www-form-urlencoded, application/json, text/json, text/xml]|\n|options.method|<String:N>|[default: POST, GET, PUT, DELETE]|\n|options.requestData|<String:N>|요청 본문.|\n|options.requestHeader|<JSON:N>|request header에 지정할 Key와 Value를 JSON 형식으로 정의.|\n|options.timeout|<Number:N>|(단위: millisecond) ajax 요청 후 timeout 시간. 지정 시간내 응답이 오지 않는 경우 error callback 함수가 실행.|\n|options.beforeAjax|<Function:N>|요청 전에 실행되는 함수. 이 함수의 return 값이 false이면 ajax를 요청하지 않음.|\n|options.success|<Function:N>|요청이 성공한 경우 실행되는 callback 함수.|\n|options.error|<Function:N>|요청이 실패한 경우 실행되는 callback 함수.|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//ajax 호출 본문 예시\nvar options = {};\noptions.action = \"_data/$p.ajax.json\";\noptions.mode = \"asynchronous\";\noptions.mediatype = \"text/json\";\noptions.method = \"POST\";\noptions.requestData = '{ \"name\" : \"WebSquare\" , \"addr\" : \"서울시\" }';\noptions.requestHeader = {insUserData:\"C0001\"};\noptions.success = scwin.callback_ajax; //정의 된 function 객체\noptions.error = function( e ){  //functoin을 직접 정의 한 경우.\n        //e.errorType - 오류 유형 문자열\n        //e.requestBody - Request Data 문자열\n        //e.resourceUri - 통신 URI 문자열\n        //e.responseBody - Response Data 문자열\n        //e.responseHeaders - Response Headers 내용 반환\n        //e.responseReasonPhrase - Response Status Text 반환\n        //e.responseStatusCode - Response Status Code 숫자형 값\n\n        //응답 객체를 console에 출력\n        //console.log(e);\n};\n$p.ajax(options);\n\n\n//ajax API의 options.success에 지정한 function 예시 \nscwin.callback_ajax = function(e) {\n    //e는 통신 후 응답 정보가 담긴 JSON입니다.\n    //e.resourceUri - 통신 URI 문자열\n    //e.responseHeaders - Response Headers가 담긴 XML 형식의 문자열\n    //e.responseStatusCode - Response Status Code 숫자형 값\n    //e.responseReasonPhrase - Response Status 문자열\n    //e.responseText - Response Data 원본 문자열\n    //e.responseJSON - Response Content Type이 'JSON' 형식인 경우 응답 문자열을 JSON 형식으로 Parse한 결과 값.\n    //e.responseBody - Response Content Type이 'XML' 형식인 경우 응답 문자열을 XML 형식으로 Parse한 결과 값.\n\n    //응답 객체를 console에 출력\n    //console.log(e);\n};\n```\n\n"
    },
    "getCurrentServerDate": {
      "!type": "fn(pattern: string)",
      "!doc": "서버(WAS)의 현재 시간을 반환합니다. \n\n인자로 Java의 SimpleDateFormat의 패턴을 지정할 수 있으며, 인자를 지정하지 않으면 'yyyyMMdd' 패턴의 결과를 반환합니다. \n\n서버의 과부하를 줄이기 위해 일정 주기(기본 값: 1시간)로 서버 시간을 가져와 클라이언트에서 흐른 시간을 더한 후 반환합니다. \n\n시간 계산은 (서버에서 가져온 시간) + (서버에서 가져온 이후부터 이 API를 호출할 때까지 클라이언트에서 흐른 시간)의 합으로 계산합니다.\n\n클라이언트(브라우저)에서는 1초마다 시간 조작(임의 변경) 여부를 체크하며, 조작으로 판단될 경우 즉시 서버 시간을 갱신합니다. \n\n서버 시간은 비동기로 'serverTime.wq'를 호출하여 반환받습니다.\n\n서버에 시간을 요청하는 주기는 config 파일의 'WebSquare/date/serverDate/@autoupdateinterval'에 설정한 값(단위: second)이며 기본 값은 3600(1시간)입니다.\n\n**Parameters:**\n\n```pattern``` - ```String:N``` - [default:yyyyMMdd] 날짜 표현식(Java의 SimpleDateFormat의 패턴)\n\n**Return:**\n\n```String``` - 서버 날짜(시간) 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//(패턴 설명)\n//y    Year                    1996; 96\n//M    Month in year           07\n//d    Day in month            10\n//H    Hour in day (0-23)      0\n//m    Minute in hour          30\n//s    Second in minute        55\n//S    Millisecond             978\n\n//예시 1)\nvar dateStr = $p.getCurrentServerDate(); //yyyyMMdd\n//return 예시) 20111225\n\n//예시 2) \nvar dateStr = $p.getCurrentServerDate(\"yyyy-MM-dd HH:mm:ss\");\n//return 예시) 2014-11-07 15:49:10:080\n```\n\n"
    },
    "download": {
      "!type": "fn(actionUrl: string, requestData: string, sendMethod: string, isXHR: bool)",
      "!doc": "다운로드 모듈이 구현된 서버의 URL을 호출하여 화면에서 다운로드할 수 있는 인터페이스를 제공합니다. 서버의 다운로드 모듈은 제공하지 않습니다.\n\n기본 방식은 내부에 IFrame을 생성하고 'form-submit'으로 서버에 전송합니다.\n\n세 번째 인자(sendMethod)와 네 번째 인자(isXHR) 설정에 따른 전송 차이는 브라우저의 개발자 도구의 네트워크(Network)를 통해 더욱 정확하게 알 수 있습니다.\n\n**Parameters:**\n\n```actionUrl``` - ```String:Y``` - 파일 다운로드 기능이 구현되어있는 URL. HTML Form의 속성 'action'에 할당됩니다.\n\n```requestData``` - ```String:N``` - 서버에 전송할 문자열. Request Parameter의 'xmlValue'에 할당되어 서버에 전송됩니다. 값을 지정하지 않으면(undefined인 경우) 'xmlValue'에 값이 할당되지 않습니다.\n\n\n값을 지정한 경우 서버에서 request.getParameter(\"xmlValue\"); 로 값을 추출할 수 있습니다.\n\n```sendMethod``` - ```String:N``` - [default:post, get] 전송 방식. HTML Form의 속성 'method'에 할당됩니다.\n\n```isXHR``` - ```Boolean:N``` - [default:false, true] 서버와의 통신을 XHR 방식으로 적용할지의 여부.\n\n\n설정 값이 'true'(XHR 방식)로 지정되고 두 번째 인자(requestData)가 지정된 경우에는 'Request Content-Type'의 값이 'text/plain'으로 설정되며, 서버에서는 Request 본문에서 데이터를 추출해야 합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시1) actionUrl만 지정한 경우.\n$p.download('/download.do');\n\n// 예시2) form data의 'xmlValue'에 문자열 'K00001'이 할당됩니다.\n$p.download('/download.do', 'K00001');\n\n// 예시3) query string의 'xmlValue'에 문자열 'K00001'이 할당됩니다.\n$p.download('/download.do', 'K00001', 'get');\n\n// 예시4) form data의 'xmlValue'에 json형식의 문자열을 전달하는 경우.\n$p.download('/download.do', '{\"key\":\"K00001\", \"fileName\":\"/resource/exam_download1.jpg\"}');\n\n// 예시5) 4 번째 인자(isXHR)을 true로 지정.\n$p.download('/jsp/exam_download_xhr.jsp', '{\"key\":\"K00001\", \"fileName\":\"/resource/exam_download1.jpg\"}', \"post\", true);\n\n// 예시6) query string과 form data를 함께 전송하는 경우\n$p.download('/download.do?user=U00001', 'K00001');\n\n// 예시7) sendMethod를 'get' 지정하면 URL에 정의한 query string은 무시되며, xmlValue가 할당됩니다.\n$p.download('/download.do?user=U00001', 'K00001', 'get');\n```\n\n"
    },
    "dateAdd": {
      "!type": "fn(day1: string, offset: number, type: string)",
      "!doc": "날짜 및 시간에 지정된 수(offset)만큼 더합니다.( date + offset )\n\ntype에서 설정한 값(day,month,hour,minute,time)에 따라서 증가되는 대상이 달라집니다.\n\ntype이 day일 경우엔 첫번째 인자의 날짜 형식이 yyyyMMdd, month일 경우 yyyyMM, hour일 경우 yyyMMddHH, minute일 경우 yyyyMMddHHmm 형식이어야 합니다.\n\n**Parameters:**\n\n```day1``` - ```String:Y``` - 지정 날짜와 시간\n\n```offset``` - ```Number:Y``` - 날짜에 더할 숫자\n\n```type``` - ```String:Y``` - 증가된 값이 적용될 대상(day, month, hour, minute )\n\n**Return:**\n\n```String``` - 지정된 수 많큼 더하거나 뺀 날짜\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar tmpDate1 = $p.dateAdd(\"20120102\", -7, \"day\"); //tmpDate1 : 20111226\nvar addTimeDateD = $p.dateAdd( \"20120102\", 7, \"day\" );  //addDate : 20120109\nvar addTimeDateM = $p.dateAdd( \"201201\", 7, \"month\" );  //addDate : 201208\nvar addTimeDateH = $p.dateAdd( \"2012010213\", 7, \"hour\" );  //addDate : 2012010220\nvar addTimeDatem = $p.dateAdd( \"201201021310\", 7, \"minute\" );  //addDate : 201201021317\n```\n\n"
    },
    "clearTimeout": {
      "!type": "fn(key: string, force: bool)",
      "!doc": "'$p.setTimeout'로 등록된 TimeOut 객체를 해제합니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - key로 지정한 값. ($p.setTimeout API 호출 시 options.key에 지정한 값)\n\n```force``` - ```Boolean:N``` - [defulat:false, true] key로 지정된 Timer 객체를 해제하기 전에 등록된 함수를 한 번 실행할지에 대한 여부.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// '$p.setTimeout' 호출 시 options.key의 값이 \"timer1\"로 지정된 객체를 해제.\n$p.clearTimeout(\"timer1\");\n```\n\n"
    },
    "getRunningWorkflow": {
      "!type": "fn(workflowID: string)",
      "!doc": "첫 번째 인자(workflowID)와 ID가 동일한 실행 중인 Workflow 객체를 반환합니다.\n\n첫 번째 인자가 지정되지 않았고 여러 개의 Workflow가 실행 중일 경우, 가장 먼저 호출된 Workflow가 반환됩니다.\n\n**Parameters:**\n\n```workflowID``` - ```String:N``` - Workflow ID\n\n**Return:**\n\n```Object``` - 실행 중인 Workflow 객체. 반환될 객체가 없으면 null이 반환됩니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 실행 중인 Workflow의 id가 'wf_exam1'인 경우\nvar objWorkflow = $p.getRunningWorkflow(\"wf_exam1\");\n\n// 실행 중인 Workflow를 'reject'할 경우\nobjWorkflow.reject();\n```\n\n"
    },
    "toTimestampString": {
      "!type": "fn(dateObj: +Object)",
      "!doc": "JavaScript의 Date 객체를 첫 번째 인자(dateObj)로 전달받아 'yyyy-mm-dd hh:mm:ss.fffffffff' 형식이 적용된 문자열을 반환합니다.(Java의 'java.sql.Timestamp'와 동일한 형식입니다.)\n\n**Parameters:**\n\n```dateObj``` - ```Date:Y``` - JavaScript Date 객체\n\n**Return:**\n\n```String``` - 'yyyy-mm-dd hh:mm:ss.fffffffff' 형식의 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar strResult = $p.toTimestampString(new Date());\n// return 예시) 2014-03-11 11:01:47.219000\n```\n\n"
    },
    "getMetaValue": {
      "!type": "fn(key: string)",
      "!doc": "head영역에 정의한 Meta key에 해당하는 value를 반환한다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - Meta정보의 key\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n\n```\n\n"
    },
    "getParameter": {
      "!type": "fn(param: string)",
      "!doc": "get방식으로 넘어 온 parameter 또는 openPopup API의 dataObject에 정의 한 값을 반환합니다.\n\nget방식의 경우 한글 parameter는 WebSquare.text.URLEncoder로 값을 인코딩해야 한글이 깨지지 않는다.\n\n웹스퀘어의 URLEncoding을 사용 해제를 원할 경우 config 파일에 아래와 같은 설정이 필요하다.\n\n&lt;net&gt;&lt;parameterEncode value=native /&gt;&lt;net&gt;\n\n**Parameters:**\n\n```param``` - ```String:Y``` - 값을 가져올 uri에서 지정된 param 또는 openPopup API에 정의 한 dataObject의 name에 정의 한 값.\n\n**Return:**\n\n```String|JSON``` - url에 정의 한 param 문자열. 또는 openPopup에 정의 한 dataObject. parameter가 존재하지 않는 경우에는 \"\"이 반환.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//URL : http://localhost:8080/websquare/websquare.html?w2xPath=/test.xml&&userID=1234\nvar tmpUserID = $p.getParameter(\"userID\");\n//return 예시 ) \"1234\"\n\n//$p.openPopup의 dataObject 속성을 아래와 같이 지정한 경우\n//dataObject : { type : \"json\", data : {name:\"WebSquare\",addr:\"서울시\"}, name : \"rowObj\" }\nvar popRowObj =  $p.getParameter(\"rowObj\");\n//return 예시 ) {name:\"WebSquare\",addr:\"서울시\"} //type : JSON 객체\n```\n\n"
    },
    "getBASE64Parameter": {
      "!type": "fn(param: string)",
      "!doc": "Base64로 Encoding 된 get방식의 parameter(param)를 Base64 Decoding하여 반환합니다.\n\n**Parameters:**\n\n```param``` - ```String:N``` - 값을 가져올 uri에서 지정된 param\n\n**Return:**\n\n```String``` - param 문자열 반환\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.getBASE64Parameter(\"name\");\n```\n\n"
    },
    "watermark": {
      "!type": "fn(str: string)",
      "!doc": "현재 화면에 워터마크를 추가합니다. 이 기능은 HTML Canvas가 지원되는 브라우저에서만 제공됩니다.\n\n워터마크에는 첫 번재 인자(str)에 지정한 문자열과 Javascript Date 객체를 이용하여 'yyyy-MM-dd HH:mm:ss'형식으로 날짜와 시간이 포함됩니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - 워터마크로 출력될 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) \"EXAMPLE\" 문자열과 현재 날짜와 시간이 워터마크로 출력됩니다.\n$p.watermark(\"EXAMPLE\");\n```\n\n"
    },
    "$": {
      "!type": "fn()",
      "!doc": "jQuery selector를 인자로 받아 jQuery 객체를 반환합니다.\n\nid selector를 인자로 받은 경우 아래와 같이 동작합니다.\n\n이 함수를 호출한 페이지에 동일한 id로 지정된 웹스퀘어 컴포넌트가 있으면, 실행 시점의 id로 변환하여 실행됩니다.\n\n**Return:**\n\n```Object``` - jQuery 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 스크립트가 실행된 페이지의 id가 'group1'인 객체를 찾아 group1.invoke(\"setDisabled\", \"true\");를 실행합니다.\n$p.$(\"#group1\").wq(\"invoke\", \"setDisabled\", \"true\");\n```\n\n"
    },
    "getFormattedDate": {
      "!type": "fn(dateObj: +Object, pattern: string)",
      "!doc": "JavaScript Date 객체를 첫 번째 인자(dateObj)로 받아, 두 번째 인자(pattern)에 지정된 형식의 문자열로 반환합니다. \n\n'pattern'이 지정되지 않으면 JavaScript Date 객체의 'getTime()'을 호출하여 문자열로 반환합니다.(Java의 System.currentTimeMillis API와 유사합니다.)\n\n**Parameters:**\n\n```dateObj``` - ```DateObject:Y``` - JavaScript의 Date 객체\n\n```pattern``` - ```String:N``` - 날짜(시간) 표현식.\n\n**Return:**\n\n```String``` - 지정된 pattern으로 변환된 날짜(시간) 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//(패턴 설명)\n//y    Year                    1996; 96\n//M    Month in year           07\n//d    Day in month            10\n//H    Hour in day (0-23)      0\n//m    Minute in hour          30\n//s    Second in minute        55\n//S    Millisecond             978\n\n//예시 1) 날짜 형식을 지정하지 않은 경우\nvar strResult = $p.getFormattedDate(new Date());\n//return 예시) 1682587497661\n\n//예시 2) 날짜 형식을 'yyyy-MM-dd'로 지정\nvar strResult = $p.getFormattedDate(new Date(), \"yyyy-MM-dd\");\n//return 예시) 2014-04-27\n\n//예시 2) 날짜 형식을 'yyyy-MM-dd HH:mm:ss'로 지정\nvar strResult = $p.getFormattedDate(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n//return 예시) 2014-04-27 18:26:19\n```\n\n"
    },
    "getFrameId": {
      "!type": "fn()",
      "!doc": "WFrame 컴포넌트의 'src' 속성에 지정된 페이지에서 이 함수를 호출하면, 자신을 감싸고 있는 WFrame 컴포넌트의 실행 시점 ID를 반환합니다.\n\n**Return:**\n\n```String``` - 자신을 감싸고 있는 WFrame 컴포넌트의 실행 시점 ID.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// ('main.xml' 소스 본문 예시)\n// 속성 id, src, userData1이 지정되어 있습니다.\n// <w2:wframe id=\"wfm_exam1\" src=\"sub.xml\" userData1=\"example\"><\/w2:wframe>\n\n// ('sub.xml' 스크립트 예시)\n// sub.xml을 감싸고 있는 WFrame 객체의 실행 시점 ID를 반환받습니다.\nvar strFrameId = $p.getFrameId();\n// return 예시) 'mf_wfm_exam1' // 실행 시점에 동적으로 생성된 ID이기 때문에 일치하지 않을 수 있습니다.\n\n// sub.xml을 감싸고 있는 WFrame 객체를 반환받습니다.\nvar cmtFrame = $p.getComponentById($p.getFrameId());\n\n// wframe의 id를 반환받습니다. - 화면에 정의된 ID.\nvar strOriginalID = cmtFrame.getOriginalID();\n// return 예시) 'wfm_exam1'\n\n// wframe의 속성 'userData1'의 값을 반환받습니다.\nvar strUserData = cmtFrame.getUserData('userData1');\n// return 예시) 'example'\n```\n\n"
    },
    "getPopupWindowList": {
      "!type": "fn(useFrameModal: bool, scope: string, bMain: bool)",
      "!doc": "$p와 동일한 scope를 가진 wframePopup 및 iframePopup 객체의 window를 반환한다.\n\n반환된 window 객체를 통해 팝업 내부의 컴포넌트, 변수, API에 접근할 수 있다.\n\nscope 또는 popup type과 관계없이 모든 popup에 접근하려면 getAllPopupList 또는 getAllPopupWindowList를 대신 호출해야 한다.\n\n**Parameters:**\n\n```useFrameModal``` - ```Boolean:N``` - frameModal 기능을 사용하는 popup을 가져올 때 사용\n\n```scope``` - ```String:N``` - popup 창을 가져올 scope를 지정. 값이 없으면 이 함수를 호출한 화면의 scope를 자동으로 가져옴.\n\n```bMain``` - ```Boolean:N``` - iframe또는 browserPopup일 때 반환된 window의 $p.main()을 실행한 결과를 반환할지에 대한 여부\n\n**Return:**\n\n```Array``` - window 목록\n\n**Since:**\n\n5.0_4.4009B.20200423.153714\n\n**Sample:**\n\n```javascript\n// $p와 동일한 scope를 가진 팝업의 window 객체들을 반환\nvar popWinObj = $p.getPopupWindowList();\n```\n\n"
    },
    "isWFramePopup": {
      "!type": "fn(closest: bool)",
      "!doc": "현재 화면이 'wframe' 유형의 팝업인지의 여부를 반환합니다.\n\n'wframe' 유형의 팝업이란, '$p.openPopup' 함수의 두 번째 인자(options)의 'type' 속성 값이 'wframePopup'으로 지정된 경우를 말합니다.\n\n**Parameters:**\n\n```closest``` - ```Boolean:N``` - [default: false, true] 함수를 호출한 화면이 'wframe' 팝업 안에 WFrame으로 구성된 경우, 최상위 frame까지 체크할지의 여부.\n\n**Return:**\n\n```Boolean``` - 'wframe' 유형의 팝업인지의 여부\n\n**Since:**\n\n5.0_4.4467B.20210719.155634\n\n**Sample:**\n\n```javascript\n// (화면 구성 예시)\n// main.xml : 팝업을 호출하는 화면. '$p.openPopup' 함수로 'popup.xml'화면을 팝업.\n// popup.xml : 팝업 화면. 화면에 WFrame이 구성되어 있고 'src'로 'popup_wframe.xml'이 지정되어 있습니다.\n// popup_wframe.xml : 팝업 화면에서 WFrame의 컨텐츠로 구성된 화면.\n\n//*****************************\n// 화면별 스크립트 실행 예시 - 팝업의 유형이 'wframePopup'인 경우\n//*****************************\n// (main.xml)\nvar isWFramePopup1 = $p.isWFramePopup();\n// return 예시) false\n\n$p.openPopup(\"popup.xml\", { \"type\": \"wframePopup\" }); // 팝업 호출\n\n// (popup.xml)\nvar isWFramePopup2 = $p.isWFramePopup();\n// return 예시) true\n\nvar isWFramePopup3 = $p.isWFramePopup(true);\n// return 예시) true\n\n// (popup_wframe.xml)\nvar isWFramePopup4 = $p.isWFramePopup();\n// return 예시) false\n\nvar isWFramePopup5 = $p.isWFramePopup(true);\n// return 예시) true\n\n//*****************************\n// 화면별 스크립트 실행 예시 - 팝업의 유형이 'wframePopup'이 아닌 경우\n//*****************************\n// (main.xml)\nvar isWFramePopup1 = $p.isWFramePopup();\n// return 예시) false\n\n$p.openPopup(\"popup.xml\", { \"type\": \"iframePopup\" }); // 또는 { \"type\": \"browserPopup\" }\n\n// (popup.xml)\nvar isWFramePopup2 = $p.isWFramePopup();\n// return 예시) false\n\nvar isWFramePopup3 = $p.isWFramePopup(true);\n// return 예시) false\n\n// (popup_wframe.xml)\nvar isWFramePopup4 = $p.isWFramePopup();\n// return 예시) false\n\nvar isWFramePopup5 = $p.isWFramePopup(true);\n// return 예시) false\n```\n\n"
    },
    "getComponentById": {
      "!type": "fn(id: string)",
      "!doc": "첫 번째 인자(id)에 해당하는 웹스퀘어 컴포넌트를 찾아 반환합니다.\n\nscope=true 인 다중 wframe 구조에서는 $p의 scope에 해당하는 화면(보통은 이 함수를 호출한 화면)에 있는 객체의 원래 id를 기준으로 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 컴포넌트의 ID\n\n**Return:**\n\n```Object``` - id에 해당하는 컴포넌트 객체 (다중 wframe 구조에서는 이 함수를 호출하는 화면에서 정의한 id와 일치하는 컴포넌트 반환)\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//예시) 함수를 호출한 화면의 InputBox 컴포넌트의 id가 'ibx_name'로 지정된 경우\nvar cptIbxName = $p.getComponentById(\"ibx_name\");\n\n//반환된 컴포넌트의 setValue 함수를 호출합니다.\ncptIbxName.setValue(\"WebSquare\");\n```\n\n"
    },
    "getSubmission": {
      "!type": "fn(submissionID: string)",
      "!doc": "'submissionID'에 해당하는 Submission 객체를 반환합니다.\n\n이미 정의된 Submission의 속성의 값을 변경하거나 확인할 수 있습니다.\n\n대표적인 속성으로 'action', 'ref', 'target'이 있습니다.\n\n**Parameters:**\n\n```submissionID``` - ```String:Y``` - submission의 id\n\n**Return:**\n\n```SubmissionObject``` - submission Submission 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (소스 예시)\n// <xf:submission id=\"sbm_exam1\" ref=\"data:json,dlt_exam1\" target=\"data:json,dlt_result\" action=\"_data/largeData.json\" method=\"post\"\n//  mediatype=\"application/json\" encoding=\"UTF-8\" mode=\"asynchronous\" \n//  ev:submit=\"scwin.sbm_exam1_submit\" ev:submitdone=\"scwin.sbm_exam1_submitdone\" ev:submiterror=\"scwin.sbm_exam1_submiterror\" >\n// <\/xf:submission>\n\n// Submission 객체 반환\nvar objSubmission = $p.getSubmission( \"submission1\" );\n\n// 속성 'action'의 설정값 확인\nvar strAction  = objSubmission.action;\n// return 예시) '_data/largeData.json'\n    \n// submission의 속성 'ref' 변경\nobjSubmission.ref = \"data:json,dlt_reqInfo\";\n```\n\n"
    },
    "parseDate": {
      "!type": "fn(dateStr: string, format: string)",
      "!doc": "포맷이 적용된 날짜 문자열을 JavaScript의 Date 객체로 변환합니다.\n\n첫 번째 인자(dateStr)에서 숫자만 추출하여 두 번째 인자(format)를 바탕으로 Date 객체를 생성합니다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 날짜 문자열.\n\n```format``` - ```String:N``` - [default: yyyyMMdd]] 날짜 포맷. 구분 기호(delimiter)는 포함할 수 없습니다.\n\n**Return:**\n\n```Date``` - JavaScript의 Date 객체.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1)\nvar objDate1 = $p.parseDate(\"20120101\");\n// return 예시) Sun Jan 01 2012 00:00:00 GMT+0900 (KST)\n\n// 예시 2)\nvar objDate2 = $p.parseDate(\"2012-01-01\");\n// return 예시) Sun Jan 01 2012 00:00:00 GMT+0900 (KST)\n\n// 예시 3)\nvar objDate3 = $p.parseDate(\"2012-01-01\", \"yyyyMMdd\");\n// return 예시) Sun Jan 01 2012 00:00:00 GMT+0900 (KST)\n\n// 예시 4)\nvar objDate4 = $p.parseDate(\"01222013112430\", \"MMddyyyyHHmmss\");\n// return 예시) Tue Jan 22 2013 11:24:30 GMT+0900 (KST)\n\n// 예시 5) 두 번째 인자(format)에 구분 기호(delimiter)를 포함할 수 없습니다. 이 경우 null이 반환됩니다.\nvar objDate5 = $p.parseDate(\"2012-01-01\", \"yyyy-MM-dd\");\n// return 예시) null\n```\n\n"
    },
    "getIntervalKeyList": {
      "!type": "fn()",
      "!doc": "setInterval API의 key로 등록 된 값 전부를 array로 반환한다.\n\n**Return:**\n\n```Array``` - setInterval에 등록 된 key 배열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar IntervalKeyList = $p.getIntervalKeyList();\nfor(var i = 0; i < IntervalKeyList.length; i++) { $p.clearInterval(IntervalKeyList[i]); } // 등록된 타이머를 전부 제거\n```\n\n"
    },
    "showModal": {
      "!type": "fn(excludeComponentIdArr: +Object)",
      "!doc": "최상위 화면에 Modal Layer를 표시하고 모든 컴포넌트를 비활성화합니다.\n\n첫 번째 인자(excludeComponentIdArr)가 전달된 경우에는 지정된 컴포넌트를 비활성화하지 않고 Modal Layer 위로 표시합니다.\n\n만약, 제외할 컴포넌트의 CSS 속성 'position' 설정 값이 'static'인 경우에는 해당 컴포넌트가 Modal Layer 하위에 위치하여 사용자가 제어할 수 없습니다. 이 경우에는 'position'의 값을 'static' 대신 'relative'로 적용하면 Layer 상위로 표시할 수 있습니다.\n\n**Parameters:**\n\n```excludeComponentIdArr``` - ```Array:N``` - 제외할 컴포넌트의 실행 시점의 ID가 담긴 배열. 지정된 컴포넌트는 비활성화되지 않고 Modal Layer 위로 표시됩니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 화면에 구성된 컴포넌트를 비활성화하고, Modal Layer를 표시합니다.\n$p.showModal();\n\n// 예시 2) 화면에 구성된 컴포넌트의 ID가 \"btn_exam1\", \"btn_exam2\"인 컴포넌트를 제외합니다. \n// 제외된 컴포넌트는 비활성화되지 않고 Modal Layer 위에 표시됩니다.\n// 컴포넌트의 실행 시점 ID를 반환 받기 위해 컴포넌트의 'getID' API를 사용합니다.\n$p.showModal([btn_exam1.getID(), btn_exam2.getID()]);\n```\n\n"
    },
    "isRunningWorkflow": {
      "!type": "fn(workflowID: string)",
      "!doc": "실행 중인 Workflow가 있는지를 반환합니다.\n\n첫 번째 인자(workflowID)가 전달된 경우 해당 ID의 Workflow 실행 여부를 반환합니다.\n\n**Parameters:**\n\n```workflowID``` - ```String:N``` - Workflow ID\n\n**Return:**\n\n```boolean``` - 실행 여부.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 실행 중인 Workflow가 있는지의 여부를 반환받습니다.\nvar isRun1 = $p.isRunningWorkflow();\n// return 예시 1-1) true //실행 중인 Workflow가 있는 경우\n// return 예시 1-2) false //실행 중인 Workflow가 없는 경우\n\n// 예시 2) ID가 'wrk_exam1'인 Workflow가 실행 중인 지의 여부를 반환받습니다.\nvar isRun2 = $p.isRunningWorkflow(\"wrk_exam1\");\n// return 예시 2-1) true //실행 중인 경우\n// return 예시 2-2) false //실행 중이 아니거나 정의된 Workflow가 없는 경우\n```\n\n"
    },
    "reinitialize": {
      "!type": "fn()",
      "!doc": "현재 페이지를 새로고침합니다. 현재 페이지란 $p.reinitialize를 실행한 화면을 말합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n // main.xml 안에  wframe1.xml이 있는 경우\n $p.$reinitialize(); // main.xml에서 실행 시 전체 화면이 새로고침되며, wframe1.xml에서 실행 시 wframe1 내부만 새로고침된다.\n```\n\n"
    },
    "getWorkflow": {
      "!type": "fn(id: string)",
      "!doc": "Workflow 객체를 반환합니다.\n\n동적으로 생성된 Workflow 객체는 Workflow가 실행 중일 때만 반환됩니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - Workflow id\n\n**Return:**\n\n```Object``` - Workflow 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 등록된 Workflow의 id가 'wf_exam1'인 경우\nvar objWorkflow = $p.getWorkflow(\"wf_exam1\");\n\n// 실행 중인 Workflow를 'reject'할 경우\nobjWorkflow.reject();\n```\n\n"
    },
    "log": {
      "!type": "fn(msg: string)",
      "!doc": "웹스퀘어를 통해 로그를 출력합니다.\n\n로그를 확인하는 방법은 두 가지가 있으며, 다음과 같습니다.\n\n방법 1) 웹스퀘어 로그 뷰어\n\n웹스퀘어 화면이 실행된 브라우저에서 키보드 'Ctrl'를 누른 상태에서 마우스 오른쪽 버튼을 클릭하면 화면에 컨텍스트 메뉴가 노출됩니다.\n\n컨텍스트 메뉴에서 '로그 보기' 메뉴를 클릭하면 로그 뷰어가 팝업됩니다.\n\n주의할 점은 '웹스퀘어 로그 뷰어'가 HTML 태그 'textarea'로 구현되었기 때문에, 출력 대상이 객체 유형일 경우 '[object Object]'와 같은 문자열로 출력되거나 오류가 발생할 수 있습니다.\n\n이 방법을 사용하려면 'config' 파일의 'WebSquare/debugMenu/@value'의 값을 'use'로 지정해야 합니다. 기본 설정 값은 'use'입니다. 사용을 원하지 않으면 설정 값을 'block'으로 지정합니다.\n\n방법 2) 브라우저 개발자 도구의 콘솔(console)\n\n브라우저에서 제공하는 개발자 도구의 콘솔(console)에서 로그를 확인할 수 있습니다.\n\n이 방법을 사용하려면 'config' 파일의 'WebSquare/debug/@console'의 값을 'true'로 지정해야 합니다. 기본 설정은 미사용입니다.\n\n**Parameters:**\n\n```msg``` - ```String:Y``` - 출력 할 메시지\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.log('Log Test');\n```\n\n"
    },
    "setDisabled": {
      "!type": "fn(obj: +Object)",
      "!doc": "첫 번째 인자(obj)의 설정에 따라 컴포넌트의 비활성화(disabled)를 적용하거나 해제합니다.\n\n첫 번째 인자(obj)의 속성 'includeIdList'와 'excludeIdList'가 모두 설정되어 있으면, 먼저 'includeIdList'가 적용된 후에 'excludeIdList'가 적용됩니다.\n\n**Parameters:**\n\n```obj``` - ```JSON:Y``` - disabled 설정이 담긴 객체\n\n|property|type|description|\n|:-|:-|:-|\n|obj.componentId|<String:N>|[default: body] 컴포넌트의 ID, 비어있으면 body|\n|obj.disabled|<boolean:Y>|[default: false, true] 비활성화(disabeld) 적용 여부|\n|obj.excludeIdList|<Array<String>:N>|제외할 컴포넌트의 ID가 담긴 배열|\n|obj.includeIdList|<Array<String>:N>|허용할 컴포넌트의 ID가 담긴 배열|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 전체 화면 비활성화(disabled).\nvar jsnResult = $p.setDisabled({\n    \"disabled\": true\n});\n\n// 예시 2) 전체 화면 활성화(enabled).\nvar jsnResult = $p.setDisabled({\n    \"disabled\": false\n});\n\n// 예시 3) 'id'가 'wfm_exam1'인 컴포넌트(자식 컴포넌트 포함)를 비활성화(disabled).\nvar jsnResult = $p.setDisabled({\n    \"disabled\": true,\n    \"componentId\" :  \"wfm_exam1\"\n});\n\n// 예시 4) 'id'가 'btn_exam1'인 컴포넌트를 제외한 모든 컴포넌트를 비활성화(disabled).\nvar jsnResult = $p.setDisabled({\n    \"disabled\": true,\n    \"excludeIdList\": [\"btn_exam1\"]\n});\n\n// 예시 5) 'id'가 'btn_exam1'와 'btn_exam2'인 컴포넌트만 비활성화(disabled).\nvar jsnResult = $p.setDisabled({\n    \"disabled\": true,\n    \"includeIdList\": [\"btn_exam1\", \"btn_exam2\"]\n});\n\n// return 예시)\n{\n    \"doneComponents\": [ \"mf_btn_exam2\" ],\n    \"skipComponents\": [ \"mf_btn_exam2\" ]\n}\n```\n\n"
    },
    "getFrame": {
      "!type": "fn()",
      "!doc": "WFrame 컴포넌트의 'src' 속성에 지정된 페이지에서 이 함수를 호출하면, 자신을 감싸고 있는 WFrame 객체를 반환합니다.\n\n전역 스크립트에서 이 함수를 호출하면 null이 반환됩니다.\n\n**Return:**\n\n```Object``` - WFrame 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n //예시) 'main.xml' 페이지에 구성된 WFrame 컴포넌트의 'src' 속성에 지정된 페이지에서 '$p.getFrame'를 호출하는 예시\n \n //('main.xml' 소스 본문 예시)\n //속성 id, src, userData1이 지정되어 있습니다.\n //<w2:wframe id=\"wfm_exam1\" src=\"sub.xml\" userData1=\"example\"><\/w2:wframe>\n \n //('sub.xml' 스크립트 예시)\n //sub.xml을 감싸고 있는 WFrame 객체를 반환받습니다.\n var cmtFrame = $p.getFrame();\n \n //wframe의 id를 반환받습니다.\n var strId = cmtFrame.getOriginalID();\n //return 예시) 'wfm_exam1'\n \n //wframe의 속성 'userData1'의 값을 반환받습니다.\n var strUserData = cmtFrame.getUserData('userData1');\n //return 예시) 'example'\n```\n\n"
    },
    "getPopupWindow": {
      "!type": "fn(id: string)",
      "!doc": "openPopup API에 정의한 id로 검색하여 해당 popup의 window를 반환한다.\n\npopup안의 컴포넌트 및 전역변수 등에 접근이 가능한다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Return:**\n\n```Object``` - 해당 popup의 window\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//팝업의 id가 popup1인 경우의 window 객체 반환\nvar popWinObj = $p.getPopupWindow(\"popup1\");\n\n//자식창 선언 예)scwin.tmpVal = \"tmpVal\";\n//팝업에 tmpVal로 선언 된 전역 변수 접근시 \nvar popTmpVal = popWinObj.scwin.tmpVal;\n\n//팝업에 input1의 ID를 가진 컴포넌트의 value 값 가져오기\nvar popInputVal = popWinObj.input1.getValue();\n```\n\n"
    },
    "getPopupParam": {
      "!type": "fn()",
      "!doc": "openPopup API를 이용하여 popup을 만들때 dataObject 속성에 정의 한 값을 string으로 반환한다.\n\ndataObject 속성과 xml 속성이 둘다 정의 된 경우 dataObject의 값만 반환한다.\n\ndataObject 속성을 이용한 경우 $p.getParameter(dataObject의 name에 할당 한 값) API를 이용하길 권장한다.\n\n**Return:**\n\n```String``` - popup을 만들때 dataObject 속성에 정의 한 값의 string.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//openPopup API의 dataObject 속성을 아래와 같이 정의 한 경우\n//dataObejct : {type:\"json\" , name:\"tmpData\" , data:{\"test\":\"WebSquare\"}}\nvar dataStr = $p.getPopupParam();\n//return 예시 ) {\"test\":\"WebSquare\"}\n```\n\n"
    },
    "js": {
      "!type": "fn(scriptUrl: string, callback: +Object)",
      "!doc": "여러 개의 외부 JavaScript 파일(이하 JS)을 로드할 때 JS별 순서 보장이 필요한 경우 사용합니다. \n\nJS 로딩은 비동기로 진행하고, 실행은 순서대로 됩니다. \n\n인자의 수는 정해져 있지 않으며 마지막 인자의 유형이 'function'이면, 모든 로딩이 완료된 후 지정된 Function을 실행합니다.\n\n**Parameters:**\n\n```scriptUrl``` - ```String:Y``` - JavaScript 파일 URL. 인자 개수는 가변입니다. 파일의 개수 만큼 인자로 지정합니다.\n\n```callback``` - ```Function:N``` - 전달된 마지막 인자의 유형이 'function'인 경우, 이전까지 인자로 전달된 JavaScript 파일의 실행이 완료된 후 실행됩니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 파일 로딩 순서(비동기로 진행) : '/js/exam1.js' -> '/js/exam2.js'\n// 스크립트의 실행 순서 : '/js/exam1.js' -> '/js/exam2.js' -> '마지막 인자 Function'\n$p.js(\n    \"/js/exam1.js\",\n    \"/js/exam2.js\",\n    function () {\n        // 콜백 로직 구성.\n    }\n);\n```\n\n"
    },
    "clearInterval": {
      "!type": "fn(key: string, force: bool)",
      "!doc": "'$p.setInterval'로 등록된 Interval 객체를 해제합니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - key로 지정한 값. ($p.setInterval API 호출 시 options.key에 지정한 값)\n\n```force``` - ```Boolean:N``` - [defulat:false, true] key로 지정된 Interval 객체를 해제하기 전에 등록된 함수를 한 번 실행할지에 대한 여부.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//$p.setInterval API를 호출 시 options.key의 값이 \"timer1\"로 지정된 객체를 해제.\n$p.clearInterval(\"timer1\");\n```\n\n"
    },
    "local": {
      "clear": {
        "!type": "fn()",
        "!doc": "동일한 도메인으로 localStorage에 저장 된 모든 데이터를 삭제합니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// localStorage에 저장 된 모든 데이터를 삭제합니다.\n$p.local.clear();\n```\n\n"
      },
      "removeItem": {
        "!type": "fn(key: string)",
        "!doc": "동일한 도메인의 LocalStorage에서 첫 번째 인자(key)와 일치하는 데이터를 삭제합니다.\n\n모든 데이터를 삭제하려면 '$p.local.clear()'를 사용합니다.\n\n이 기능은 'Page Scope'이 적용되지 않습니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터(item)의 KEY\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 아래의 스크립트를 통해 1개의 값이 LocalStorage에 저장되어 있는 경우\n$p.local.setItem(\"exam_1\", \"WebSquare\");\n\n// 예시 1) Local 'exam_1'로 저장된 데이터를 삭제합니다.\n$p.local.removeItem(\"exam_1\");\n```\n\n"
      },
      "getItem": {
        "!type": "fn(keyName: string)",
        "!doc": "동일한 도메인의 LocalStorage에서 첫 번째 인자(keyName)에 할당된 값을 반환합니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Parameters:**\n\n```keyName``` - ```String:Y``` - LocalStorage에 저장된 KEY\n\n**Return:**\n\n```String``` - 첫 번째 인자(keyName)에 할당된 데이터가 있으면 값을 반환하며, 그렇지 않을 경우 null을 반환합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 할당된 값이 있는 경우 - $p.local.setItem(\"exam_1\", \"WebSquare\"); 또는 localStorage.setItem(\"exam_1\",\"WebSquare\");\nvar strResult1 = $p.local.getItem(\"exam_1\");\n// return 예시) \"WebSquare\"\n\n// 예시 2) 할당된 값이 없는 경우\nvar strResult2 = $p.local.getItem(\"exam_2\");\n// return 예시) null\n```\n\n"
      },
      "key": {
        "!type": "fn(index: number)",
        "!doc": "동일한 도메인의 LocalStorage에서 Index에 해당하는 KEY를 반환합니다.\n\nLocalStorage에 저장된 KEY의 Index 값은 브라우저마다 다를 수 있습니다. 예를 들어 Chrome은 마지막에 저장한 값이 0번째에 위치하지만 IE는 첫 번째에 저장한 값이 0번째에 위치합니다.\n\n'$p.local.length' 함수와 함께 사용하여 전체 KEY 목록을 확인할 수 있습니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 저장된 KEY의 Index.\n\n**Return:**\n\n```String``` - 첫 번째 인자(index)에 해당하는 KEY 값을 반환하며, 값이 없는 경우에는 null을 반환합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 아래의 스크립트를 통해 1개의 값이 LocalStorage에 저장되어 있는 경우\n$p.local.setItem(\"exam_1\", \"WebSquare\");\n\n// 예시 1)\nvar strResult = $p.local.key(0);\n// return 예시) 'exam_1'\n```\n\n"
      },
      "setItem": {
        "!type": "fn(keyName: string, value: string)",
        "!doc": "동일한 도메인의 LocalStorage에 Key와 Value로 이루어진 데이터(item)를 저장합니다.\n\n이 기능은 'Page Scope'이 적용되지 않습니다.\n\n**Parameters:**\n\n```keyName``` - ```String:Y``` - 저장할 Key\n\n```value``` - ```String:Y``` - 저장할 Value\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) LocalStorage에 Key \"exam_1\"로 Value \"WebSquare\"를 할당합니다.\n$p.local.setItem(\"exam_1\", \"WebSquare\");\n\n// 위의 스크립트로 등록된 데이터는 아래의 스크립트로 반환받을 수 있습니다.\n$p.local.getItem(\"exam_1\");\n```\n\n"
      },
      "getAllItem": {
        "!type": "fn()",
        "!doc": "동일한 도메인으로 localStorage에 저장 된 모든 데이터를 key,value형태의 객체로 반환합니다.\n\n**Return:**\n\n```JSON``` - key,value가 저장 된 JSON 객체.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n var tmpData = $p.local.getAllItem();\n //return 예시 ) { name:\"WebSquare\" , add:\"서울시\" }\n```\n\n"
      }
    },
    "getAllPopupList": {
      "!type": "fn(id: string)",
      "!doc": "현재 열려있는 모든 popup 객체를 반환한다.\n\nscope 및 popup type에 관계없이 열려있는 모든 팝업 객체를 전부 반환한다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Return:**\n\n```Array``` - 열려있는 모든 popup 객체들의 배열\n\n**Since:**\n\n5.0_4.4767B.20221117.134711\n\n**Sample:**\n\n```javascript\nvar popList = $p.getAllPopupList();\nfor (var i = popList.length - 1; i >= 0; i-- ) { \n   $p.closePopup(popList[i].id);  // 열려있는 모든 popup을 닫는다. 닫을 때마다 popList가 제거되므로 array를 역순으로 돌아야 한다.\n}\n\n```\n\n"
    },
    "getAllParameter": {
      "!type": "fn()",
      "!doc": "get방식으로 넘어 온 parameter 전체를 JSON 형태로 반환합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n\nvar getParam = $p.getAllParameter();\n```\n\n"
    },
    "top": {
      "!type": "fn()",
      "!doc": "frame 중첩구조에서 최상위 frame window를 반환하는 객체. \n\niframe 중첩구조에서는 top을 반환.\n\nwframe 중첩구조에서도 top을 반환. (추후 변경가능)\n\n**Return:**\n\n```Object``` - top객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n\n```\n\n"
    },
    "setInterval": {
      "!type": "fn(func: +Object, options: +Object)",
      "!doc": "사용자가 지정한 함수를 주기적으로 실행합니다. 이 기능은 JavaScript의 setInterval 기능을 확장하여 제공합니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다. 모든 화면에 영향을 미치므로 사용 시 주의가 필요합니다.\n\n**Parameters:**\n\n```func``` - ```Function:Y``` - 실행할 함수\n\n```options``` - ```JSON:N``` - 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.key|<String:N>|Interval 객체를 구별하기 위한 ID. 지정되지 않은 경우 func.toString().slice(0,30)의 결과 값으로 지정합니다.|\n|options.delay|<Number:N>|함수의 실행 주기로 기본값은 1ms(millisecond / 1000분의 1초)입니다.|\n|options.caller|<Object:N>|함수에서 'this'으로 지정할 객체(웹스퀘어 컴포넌트 포함).|\n|options.args|<Object:N>|함수에 전달할 인자 값들이 담긴 배열.|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// '$p.setInterval'의 두 번째 인자(options)\nvar options = {};\n\n// Interval의 고유 키를 'exam_interval_01'로 지정\noptions.key = \"exam_interval_01\";\n\n// 지정된 함수 실행 주기를 1초로 지정\noptions.delay = 1000;\n\n// 화면에 정의된 컴포넌트 중 id가 'btn_exam1'인 객체를 지정. 함수에서 this로 접근할 수 있습니다.\noptions.caller = btn_exam1;\n\n// 지정된 함수에 전달할 인자 값이 담긴 배열.\noptions.args = [\"api_example\", \"C0001\"];\n\n$p.setInterval(\n    function (arg1, arg2) {\n        console.log(\"arguments arg1 :  \" + arg1); // 출력 예시) arguments arg1 :  api_example\n        console.log(\"arguments arg2 :  \" + arg2); // 출력 예시) arguments arg2 :  C0001\n        console.log(\"this.getOriginalID : \" + this.getOriginalID()); // 출력 예시) this.getOriginalID : btn_exam1\n    },\n    options\n);\n```\n\n"
    },
    "openPopup": {
      "!type": "fn(url: string, options: +Object, params: +Object, target: +Object)",
      "!doc": "팝업을 생성합니다.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 팝업의 URL. 보통 웹스퀘어 화면 파일의 경로를 지정합니다.\n\n```options``` - ```Object:Y``` - 팝업 생성을 위한 선택 사항.\n\n|property|type|description|\n|:-|:-|:-|\n|options.id|<String:N>|[default: ppo1] 팝업의 ID.|\n|options.type|<String:N>|[default: browserPopup, iframePopup, wframePopup] 팝업의 유형. 브라우저에 랜더링되는 형태에 따라 구분됩니다.(속성 \"options.frameMode\", \"options.useIFrame\"을 대신하여 사용합니다.) browserPopup : 새로운 창(Window)으로 생성되는 팝업으로 \"window.open\"함수를 사용합니다. 프로세스가 분리되어 독립적으로 실행됩니다. 부모 화면에 제약을 받지 않고 팝업 위치를 자유롭게 움직일 수 있습니다. iframePopup : 팝업을 호출한 화면에 IFrame으로 생성되는 팝업. 부모 화면에 종속됩니다. wframePopup : 팝업을 호출한 화면에 WFrame으로 생성되는 팝업. 부모 화면에 종속됩니다.|\n|options.width|<String:N>|[default: 500px] 팝업의 width(너비) 값.|\n|options.height|<String:N>|[default: 500px] 팝업의 height(높이) 값.|\n|options.top|<String:N>|[default: 100px] 팝업의 top 위치 값. 위치 계산은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"인 경우에는 브라우저를 기준으로 하며, \"browserPopup\"인 경우에는 모니터를 기준으로 합니다.|\n|options.left|<String:N>|[default: 100px] 팝업의 left 위치 값. 위치 계산은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"인 경우에는 브라우저를 기준으로 하며, \"browserPopup\"인 경우에는 모니터를 기준으로 합니다.|\n|options.popupName|<String:N>|[default: WebSquarePopup] 팝업 객체의 이름. 팝업 프레임의 상단 표시줄에 표시됩니다. \"options.type\"의 설정 값이 \"browserPopup\"일 때, \"document.title\"에 할당됩니다.|\n|options.modal|<String:N>|[default: false, true] modal을 표시해서 뒤쪽 배경을 제어할 수 없도록 할지의 여부. false로 지정하면 뒤쪽의 컴포넌트를 사용할 수 있습니다.|\n|options.frameModal|<String:N>|[default: \"\", \"top\", \"parent\", \"frame\", \"frame의 ID\"] modal을 표시해줄 frame(wframe, tabControl, windowContainer)의 ID를 지정합니다.|\n|options.useModalStack|<String:N>|[default: false, true] 마지막으로 생성된 팝업만 활성화할지의 여부. 속성 \"options.modal\"이 true로 지정된 경우에만 동작합니다.(true: 마지막 팝업만 활성화. false: 모든 팝업을 활성화.)|\n|options.style|<String:N>|[default: \"\"] 팝업의 스타일. 값이 지정되면 \"options.left\", \"options.top\", \"options.width\", \"options.height\"는 적용되지 않습니다.|\n|options.dataObject|<Object:N>|팝업에 전달한 데이터의 정보를 담은 JSON 객체. 데이터 타입, 데이터, 데이터의 이름으로 구성되어 있습니다. 데이터의 이름은 \"$p.getParameter\"함수로 데이터를 추출할 때, 첫 번째 인자로 사용됩니다. (예시) { type: [\"xml\",\"string\",\"json\",\"array\"], data: \"데이터로 type에 지정한 유형에 맞게 할당합니다.\" , name :\"파라미터명\"}|\n|options.resizable|<String:N>|[default: false, true] 팝업의 크기 조절 여부.(팝업의 하단 모서리를 마우스 드래그하여 크기 조절이 가능합니다.) 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.useMaximize|<String:N>|[default: true, false] 팝업의 상단 타이틀 바 영역을 더블 클릭했을 때 팝업 창을 최대화할지의 여부. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.useModalDisable|<String:N>|[default: false, true] 속성 \"options.modal\"이 true로 지정된 경우, 부모창의 컴포넌트들의 비활성화(disabled) 적용 여부. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다. 설정 값을 \"true\"로 지정하면 키보드 \"Tab\"키를 사용한 부모창 컴포넌트들의 포커스 이동을 제한할 수 있습니다.|\n|options.closeAction|<String:N>|[default: \"\"] 팝업의 닫기 버튼을 클릭했을 때 실행할 함수명. 지정한 함수에서 반환값을 true로 작성해야 팝업이 닫힙니다.이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다. 지정한 함수에서 팝업의 실행 시점 ID, 닫기 버튼의 클릭 여부등을 확인할 수 있습니다.|\n|options.className|<String:N>|[default: \"\"] 팝업의 최상위 \"div\" 요소의 \"class\" 속성에 할당되며, 팝업 별로 디자인을 적용할 때 사용합니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.useControl|<String:N>|[default: false, true] 팝업의 상단 타이틀 영역에 기능 버튼 \"최소화\", \"최대화\", \"닫기\"를 표시할지의 여부. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.controls|<Object:N>|[default: { minimize: true, maximize: true, close: true }] \"options.useControl\"의 설정 값이 true이 일 때, 기능 버튼 \"최소화\", \"최대화\", \"닫기\"의 표시 여부를 지정할 수 있습니다. 이 기능은 'options.type'이 'iframePopup' 또는 'wframePopup'인 경우에만 지원됩니다. (설정 예시) { minimize: true, maximize: false, close: true } // 기능 버튼 \"최소화\", \"닫기\"를 표시합니다.|\n|options.foldSize|<Object:N>|[default: { width: 500 }] 팝업 창이 최소화되었을 때의 팝업 창의 너비(width). \"options.useControl\"의 설정 값이 true이고 \"options.controls.minimize\"의 설정 값이 true일 때 지원됩니다. 보통 \"options.width\"의 설정 값과 동일하게 지정합니다. 이 기능은 'options.type'이 'iframePopup' 또는 'wframePopup'인 경우에만 지원됩니다. (설정 예시) { width: 200 } // 팝업이 최소화 되었을 때 팝업의 너비를 \"200px\"로 표시합니다.|\n|options.useATagBtn|<String:N>|[default: false, true] 팝업 상단의 버튼 \"닫기\"를 브라우저에 \"a\"태그로 랜더링할지의 여부. 설정 값이 false인 경우 \"div\"태그로 생성됩니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.disableCloseButton|<String:N>|[default: false, true] 팝업 상단의 버튼 \"닫기\"를 비활성화할지의 여부. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.alwaysOnTop|<String:N>|[default: true, false] 팝업이 생성될 때 이미 열린 팝업 위에 표시하고, 여러 개의 팝업 위치가 겹칠 경우 팝업 창을 클릭하면 클릭한 팝업을 상위로 표시할지 여부. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.popupUrl|<String:N>|[default: \"popup.html\"] 웹스퀘어 화면을 팝업 창으로 띄우기 위한 페이지 URL. 기본 설정 값으로 지정된 파일은 \"/websquare/popup.html\"에 위치합니다. 이 기능은 \"options.type\"의 설정 값이 \"browserPopup\"일 때 지원됩니다.|\n|options.windowDragMove|<String:N>|[default: false, true] 마우스 드래그로 팝업 위치를 이동시킬 때, 팝업이 마우스 위치와 동일하게 움직일지의 여부. 설정 값이 false인 경우, 마우스를 드래그하는 동안 팝업은 움직이지 않고 외각 라인만 마우스 위치에 따라 이동합니다. 마우스 드롭 시 팝업이 해당 위치로 이동합니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.windowMoveType|<String:N>|[default: \"restrict\"] popup 드래그시 영역밖으로 나갈때 동작 속성 지정. \"restrict\"은 영역 밖으로 나가지 않도록 영역 안쪽으로 이동. \"overflow\"은 마우스 포인터 영역 밖으로 나간 시점 위치 그래도 고정.|\n|options.minVisibleWindowPixel|<String:N>|[default: 0] windowMoveType=\"overflow\"설정 후 popup 드래그시 영역 안에 보여질 최소한의 popup 크기|\n|options.processMsgFrame|<String:N>|[default: false, true] \"ProcessMessage\" 레이어를 팝업 화면에만 제한적으로 표시할 지의 여부. 이 기능은 \"options.type\"의 설정 값이 \"wframePopup\"일 때 지원됩니다.|\n|options.fixPosition|<String:N>|[default: false, true] 팝업의 위치를 고정할지의 여부. 설정 값을 true로 지정하면 사용자는 마우스 드래그 앤 드롭으로 팝업 위치를 이동시킬 수 없습니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"wframePopup\"일 때 지원됩니다.|\n|options.status|<String:N>|[default: false, true] status(상태바) 출력 유무. JavaScript의 \"window.open\"의 팝업 옵션 \"status\"에 \"yes\" 또는 \"no\"로 할당되며 브라우저 지원 여부에 따라 동작이 다를 수 있습니다. 이 기능은 \"options.type\"의 설정 값이 \"browserPopup\"일 때 지원됩니다.|\n|options.menubar|<String:N>|[default: false, true] menubar(상단 메뉴바) 출력 유무. JavaScript의 \"window.open\"의 팝업 옵션 \"menubar\"에 \"yes\" 또는 \"no\"로 할당되며 브라우저 지원 여부에 따라 동작이 다를 수 있습니다. 이 기능은 \"options.type\"의 설정 값이 \"browserPopup\"일 때 지원됩니다.|\n|options.scrollbars|<String:N>|[default: false, true] scrollbar(스크롤) 출력 유무. JavaScript의 \"window.open\"의 팝업 옵션 \"scrollbar\"에 \"yes\" 또는 \"no\"로 할당되며 브라우저 지원 여부에 따라 동작이 다를 수 있습니다. 이 기능은 \"options.type\"의 설정 값이 \"browserPopup\"일 때 지원됩니다.|\n|options.srcData|<String:N>|[deprecated][default: null]   속성 \"options.dataObject\"로 대체합니다. \"WebSquare 2.0\"에서 사용하던 속성으로 팝업에 전달할 InstanceNode의 xPath를 지정합니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"browserPopup\"일 때 지원됩니다.|\n|options.destData|<String:N>|[deprecated][default: null]   속성 \"options.dataObject\"로 대체합니다. \"WebSquare 2.0\" 호환 속성으로 \"options.srcData\"에 지정한 InstanceNode를 할당할 팝업의 InstanceNode의 xPath를 지정합니다. 이 기능은 \"options.type\"의 설정 값이 \"iframePopup\" 또는 \"browserPopup\"일 때 지원됩니다.|\n\n\n```params``` - ```Null:N``` - 사용되지 않는 파라메터로 4번째 파라메터를 사용 할 경우 null로 입력.\n\n```target``` - ```Object:N``` - window객체. default로 window\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 팝업 화면에 전달 할 데이터 정의.\nvar jsnPopupData = {\n    \"type\" : \"json\", // 데이터 유형. \"json\"을 권장합니다.\n    \"name\" : \"exam_param\",  // 데이터를 가져오기 위한 파라미터 이름. 팝업 화면에서 $p.getParameter(\"exam_param\")로 추출할 수 있습니다.\n    \"data\" : { \n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false}, \n        \"Region\": \"Seoul\"\n    } // 팝업에 전달할 데이터\n};\n\n// 팝업 생성 옵션 지정\nvar options = {  \n    id : \"exam_popup\", \n    type : \"wframePopup\", \n    width: \"230px\", \n    height: \"250px\", \n    top: \"130px\", \n    left: \"200px\", \n    popupName : \"팝업 예제\", \n    modal : true,\n    closeAction : \"scwin.popup_closeAction\", // [선택] 팝업의 닫기 버튼을 클릭했을 때 실행할 함수명. \n    dataObject : jsnPopupData\n}; \n\n// 팝업 생성\n$p.openPopup(\"/sub_popup.xml\", options);\n\n// 팝업 생성 옵션의 closeAction 함수 정의 예시\nscwin.popup_closeAction = function (argRuntimeID, argJsnInfo) {\n // argRuntimeID : 팝업의 실행 시점 ID\n // argJsnInfo : 팝업의 부가 정보를 담은 JSON 객체\n // argJsnInfo.isCloseButtonClick : [true, false] 팝업의 닫기 버튼을 클릭해서 호출되었는지의 여부\n return true; //팝업을 닫습니다. (반환 값이 true인 경우만 팝업이 닫힙니다.)\n};\n\n// 팝업창에서 전달받은 데이터 반환받기\nvar jsnParamData = $p.getParameter(\"exam_param\");\n// return 예시)\n// { \n//     \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false}, \n//     \"Region\": \"Seoul\"\n// };\n```\n\n"
    },
    "deleteSubmission": {
      "!type": "fn(submissionID: string)",
      "!doc": "등록된 Submission을 삭제합니다.\n\n**Parameters:**\n\n```submissionID``` - ```String:Y``` - Submission의 ID\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// \"submission1\"에 해당하는 Submission 삭제\n$p.deleteSubmission(\"submission1\");\n```\n\n"
    },
    "URLEncoder": {
      "!type": "fn(str: string)",
      "!doc": "첫 번째 인자(str)에 지정된 문자열을 'application/x-www-form-urlencoded' MIME 형식의 문자열로 변환합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - 문자열\n\n**Return:**\n\n```String``` - 변환된 application/x-www-form-urlencoded MIME Format 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar encodeStr = $p.URLEncoder( \"문자열\" );\n//return 예시) \"%b9%ae%c0%da%bf%ad\"\n```\n\n"
    },
    "closePopup": {
      "!type": "fn(id: string)",
      "!doc": "'$p.openPopup' 또는 '$p.createPopup'를 사용하여 팝업의 ID를 지정한 경우, 해당 ID의 팝업을 닫습니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//id가 'popup1'인 popup을 닫습니다.\n$p.closePopup(\"popup1\");\n```\n\n"
    },
    "getAllBASE64Parameter": {
      "!type": "fn()",
      "!doc": "query string으로 전달된 모든 parameter들을 Base64 디코딩 하여 JSON 형식으로 반환합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.getAllBASE64Parameter();\n```\n\n"
    },
    "rejectWorkflow": {
      "!type": "fn(reject: string, workflowID: string)",
      "!doc": "실행중인 Workflow 를 Reject 시킵니다. workflowID 가 전달된 경우에는 해당 workflow가 실행중인 경우에만 Reject 시킵니다.\n\n**Parameters:**\n\n```reject``` - ```String:N``` - 사유 메시지\n\n```workflowID``` - ```String:N``` -\n\n**Return:**\n\n```Object``` - Reject 된 workflow Object\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n\nvar workflowObj = $p.rejectWorkflow( );\n\n```\n\n"
    },
    "isPopup": {
      "!type": "fn(closest: bool)",
      "!doc": "현재 화면의 팝업 여부를 반환합니다. 첫 번째 인자(closest)를 true로 지정하면 상위(부모) Frame을 거슬러 올라가면서 팝업 여부를 체크합니다.\n\n**Parameters:**\n\n```closest``` - ```Boolean:N``` - [default:false, true] 상위(부모) Frame을 거슬러 올라가면서 팝업 여부를 체크할지의 여부.\n\n**Return:**\n\n```boolean``` - 팝업인 경우 true, 팝업이 아닌 경우 false\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 현재 화면의 팝업 여부 확인\nvar ispopup1 = $p.isPopup();\n// return 예시 1-1 : 현재 화면이 팝업인 경우) true\n// return 예시 1-2 : 현재 화면이 팝업이 아닌 경우) false\n\n// 예시 2) 상위 화면(현재 화면 포함)의 팝업 여부 확인\nvar ispopup2 = $p.isPopup(true);\n// return 예시 2-1 : 현재 화면이 팝업인 경우) true\n// return 예시 2-2 : 현재 화면이 팝업이 아닌 경우) false\n```\n\n"
    },
    "hideProcessMessage": {
      "!type": "fn()",
      "!doc": "웹스퀘어의 Process Message Layer를 숨깁니다.\n\nProcess Message Layer는 Submission, Ajax, Excel Download 등과 같은 기능이 실행 중 일 때 표시됩니다.\n\n**Since:**\n\n5.0_4.4793B.20230127.144039\n\n**Sample:**\n\n```javascript\n$p.hideProcessMessage();\n```\n\n"
    },
    "jsAsync": {
      "!type": "fn(pathArr: +Object, options: +Object)",
      "!doc": "$p.js의 기능을 확장한 API 입니다. 업무 공통 파일 또는 외부 JS를 동적으로 로드 할 때 사용합니다. scope기능 및 async await 기능을 지원합니다.\n\nJS 로딩은 비동기로 진행하고, 실행은 순서대로 됩니다.\n\n$p.jsAsync를 호출한 페이지의 scope가 적용됩니다. 즉 $p.jsAsync를 호출한 페이지의 scwin이나 컴포넌트 객체에 직접 접근이 가능합니다.\n\n이 함수는 async 함수입니다. JS로딩이 끝난 이후에 대해 처리를 하려면 await $p.jsAsync() 과 같이 await 키워드를 붙이거나 $p.jsAsync().then()으로 처리합니다 \n\n기본적으로 캐시 기능이 적용됩니다. 한 번 로드한 js는 함수 형태로 전역에 저장하며, 같은 url이 요청될 경우 네트워크 요청 없이 전역에 저장했던 함수를 scope만 바꿔서 다시 실행합니다.\n\n**Parameters:**\n\n```pathArr``` - ```Array:Y``` - JavaScript 파일 URL이 담긴 배열.\n\n```options``` - ```JSON:N``` - 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noCache|<Boolean:N>|캐시 기능을 사용하지 않으려면 true로 설정합니다. 기본 동작은 캐시기능 사용입니다.|\n|options.scopeVariable|<String:N>|scope 기능을 적용할 객체를 지정합니다. 여러 객체를 지정하려면 구분자 \",\"를 사용합니다. 기본값은 \"scwin\" 입니다.|\n|options.wpack|<Boolean:N>|js를 가져올 때 _wpack_경로에서 가져올지에 대한 여부를 설정합니다. w-pack에서 js를 치환하는 기능을 적용한 경우 이 옵견값을 true로 지정합니다.|\n\n**Return:**\n\n```Object``` - Promise 객체.\n\n**Since:**\n\n5.0_5.5149B.20240207.150038\n\n**Sample:**\n\n```javascript\n// 업무 공통 모듈 module_scwin.js, module_scvar.js 및 외부 JS인 lib.js를 동적으로 로드하는 예제\nvar pathArr = [\"/page/ui/module/module_scwin.js\", \"/page/ui/module/module_scvar.js\", \"/cm/js/lib.js\"];\nvar options = {\"noCache\":false,\"scopeVariable\":{\"scwin,scvar\"}}; // 캐시 기능 사용. scope 적용 객체를 scwin 및 scvar로 지정\nawait $p.jsAsync(pathArr, options); \nscwin.module1(param);\nscvar.module2(param2);\nlib.test(param3);\n```\n\n"
    },
    "hideModal": {
      "!type": "fn()",
      "!doc": "웹스퀘어의 Modal Layer를 숨깁니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.hideModal();\n```\n\n"
    },
    "executeSerial": {
      "!type": "fn(submission: +Object, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
      "!doc": "workflow 를 생성하지않고 기존 submission들을 serial 하게 순서를 보장하여 처리하고자 할때 사용\n\nsubmission1 call -> submission1 callback -> submission2 call -> submission2 callback\n\n**Parameters:**\n\n```submission``` - ```array:Y``` - id array  ex) [\"submission1\", \"submission2\", \"submission3\"]\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.executeSerial( [\"submission1\", \"submission2\", \"submission3\"], \"processMsg\",final_callback, reject_callback) ;\n//submission1 call/callback -> submission2 call/callback -> submission3 call/callback -> final_callback or reject_callback\n```\n\n"
    },
    "getPopupUrl": {
      "!type": "fn()",
      "!doc": "'$p.openPopup' 함수를 호출할 때, 'options.type' 값이 'wframePopup'으로 지정되어야 사용할 수 있습니다.\n\n이 함수는 팝업 화면에서 호출되어야 하며, 현재 창(팝업)의 URL을 반환합니다.\n\n**Return:**\n\n```String``` - 현재 화면의 URL\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n // (팝업 호출 예시) type의 값은 \"wframePopup\"로 지정되어야 합니다.\n var options = {\n    type: \"wframePopup\",\n    id: \"popup_exam1\",\n    popupName: \"sample popup\"\n };\n \n $p.openPopup(\"/api_sample/$p.getPopupUrlP01.xml\", options);\n \n // (팝업에서 '$p.getPopupUrl' 호출 예시)\n var strResult = $p.getPopupUrl();\n // return 예시) '/api_sample/$p.getPopupUrlP01.xml'\n```\n\n"
    },
    "createSubmission": {
      "!type": "fn(submissionObj: +Object)",
      "!doc": "Submission을 동적으로 생성합니다.\n\n**Parameters:**\n\n```submissionObj``` - ```JSON:Y``` - 생성할 submission 객체의 속성.\n\n|property|type|description|\n|:-|:-|:-|\n|submissionObj.id|<String:Y>|submission의 ID.|\n|submissionObj.ref|<String:N>|서버로 보낼(request) DataCollection의 조건 표현식. 조건문 형식은 $p.data.get에 전달하는 인자와 같다. 아래 샘플 참고.|\n|submissionObj.target|<String:N>|서버로 응답(response) 받은 데이터가 위치할 DataCollection의 조건 표현식. 조건문 형식은 $p.data.set에 전달하는 인자와 같다. 아래 샘플 참고.|\n|submissionObj.action|<String:N>|통신할 서버 URI.(브라우저 보안 정책으로 crossDomain은 지원되지 않는다.)|\n|submissionObj.method|<String:N>|[default: post, get, urlencoded-post] get : 파라미터를 url에 붙이는 방식 (HTML과 동일).  post : 파라미터를 body 구간에 담는 방식 (HTML과 동일).  urlencoded-post:urlencoded-post.|\n|submissionObj.mediatype|<String:N>|[default: application/xml, text/xml, application/json, application/x-www-form-urlencoded] application/x-www-form-urlencoded : 웹 form 방식(HTML방식). application/json : json 방식. application/xml : XML 방식. text/xml : xml방식 (두 개 차이는 http://stackoverflow.com/questions/4832357 참조)|\n|submissionObj.encoding|<String:N>|[default: utf-8, euc-kr, utf-16] 서버 encoding 타입 (euc-kr/utf-16/utf-8)|\n|submissionObj.processMsg|<String:N>|submission 통신 중 보여줄 메시지. (\"$blank\"로 지정하면 config.xml에 메시지가 지정되어 있어도 메시지 창이 노출되지 않는다.)|\n|submissionObj.localeRef|<String:N>|클라이언트 다국어 적용시 processMsg 대신에 화면에 출력하는 텍스트의 key.|\n|submissionObj.errorHandler|<String:N>|submission 오류 발생 시 실행할 함수.|\n|submissionObj.submitHandler|<Function:N>|submission 요청 전 실행할 함수. submission의 'submit' 이벤트 핸들러.|\n|submissionObj.submitDoneHandler|<Function:N>|response status 코드 값이 정상 일 경우 실행할 함수. submission의 'submit-done' 이벤트 핸들러.|\n|submissionObj.submitErrorHandler|<Function:N>|response status 코드가 오류(200 미만 300 이상)인 경우 실행할 함수. submission의 'submit-error' 이벤트 핸들러.|\n|submissionObj.submitTimeoutHandler|<Function:N>|submission의 'submit-timeout' 이벤트 핸들러.|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar submissionObj = {};\nsubmissionObj.id = \"submission_dynamic\";\n//데이터리스트 dlt_commonGrp 중 modified에 해당하는 데이터 및 dlt_commonCode 데이터 전체를 json형식으로 서버에 전달한다. $p.data.get(ref)의 결과를 서버에 전달하는 것과 같다\nsubmissionObj.ref = 'data:json,[{\"id\":\"dlt_commonGrp\",\"action\":\"modified\"},\"dlt_commonCode\"]';\n//응답 데이터 중 dlt_zipCode 데이터를 찾아 데이터 리스트 dlt_zipCode에 추가한다. 그리고 dma_search_excel에 해당하는 데이터를 찾아 데이터 리스트 dma_search_excel의 데이터를 교체한다.\nsubmissionObj.target = 'data:json,[{\"id\":\"dlt_zipCode\",\"action\":\"append\"},\"dma_search_excel\"]';\nsubmissionObj.action = \"/data/sampleData.json\";\nsubmissionObj.method = \"post\";\nsubmissionObj.mediatype = \"application/json\";\nsubmissionObj.encoding = \"UTF-8\";\nsubmissionObj.processMsg = \"loading\";\n//정의된 객체를 지정한 예시\nsubmissionObj.submitDoneHandler = scwin.handler_submitdone;\n//함수를 직접 정의한 예시\nsubmissionObj.submitErrorHandler = function (e) { \n    //console.log(e);\n    //e.id                    : <String> Submission 객체의 ID\n    //e.errorType             : <String> target-error 로 고정값 반환\n    //e.resourceUri           : <String> 통신 URI 반환\n    //e.responseHeaders       : <String> Response Headers 내용 반환\n    //e.responseHeadersJSON   : <String> Response Headers의 Key, Value를 JSON 문자열\n    //e.responseStatusCode    : <String> Response Status Code 반환\n    //e.responseReasonPhrase  : <String> Response Status Text 반환\n    //e.responseBody          : <String> Response Data 문자열.\n    //e.requestBody           : <String> Request Data 문자열.\n    //e.abort                 : <String> 통신이 중단(abort)된 경우 'true' 반환\n};\n\n//submission 생성\n$p.createSubmission(submissionObj);\n\n//submissionObj.submitDoneHandler에 지정한 function 예시 \nscwin.handler_submitdone = function (e) {\n    //console.log(e);\n    //e.id                    : <String> Submission 객체의 ID\n    //e.resourceUri           : <String> 통신 URI\n    //e.responseHeaders       : <String> Response Headers의 Key, Value를 XML 문자열\n    //e.responseHeadersJSON   : <String> Response Headers의 Key, Value를 JSON 문자열\n    //e.responseStatusCode    : <Number> Response Status Code\n    //e.responseReasonPhrase  : <String> Response Status Text\n    //e.responseText          : <String> Response Data 원본으로 String 형태\n    //e.responseJSON          : <Object> (Response Content-Type이 'JSON' 인 경우 제공)JSON으로 변환된 Response Data.\n    //e.responseBody          : <Object> (Response Content-Type이 'XML' 인 경우 제공)XML로 변환된 Response Data.\n    //e.requestBody           : <String> Request Data 문자열.\n};\n```\n\n"
    },
    "url": {
      "!type": "fn(w2xPath: string, options: +Object)",
      "!doc": "화면 전환 시 웹스퀘어 화면(w2xPath에 해당하는)의 경로만 전달하여 페이지를 이동할 수 있게 해주는 함수.  \n\noptions에 추가 인자를 통해 spa로 페이지를 이동할 수 있다.\n\n**Parameters:**\n\n```w2xPath``` - ```String:Y``` - xml 파일의 경로\n\n```options``` - ```JSON:N``` - SPA에 관련 된 추가 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.spa|<Boolean:N>|[default:false, true] true인 경우 w2xPath를 해시(#)로 전달하며, false인 경우에는 w2xPath를 서치(?)로 전달한다. spa 옵션값을 명시하지 않은 경우, config.xml의 spa값(default:false)을 사용한다.|\n|options.forceReload|<Boolean:N>|페이지 이동 후 브라우저를 강제로 갱신할 것인지에 대한 여부. spa가 true인 경우에만 의미가 있는 옵션이다. spa로 페이지를 계속 이동하다보면 전역 자원이 쌓여서 메모리 릭이 발생할 수 있는데, 이런 경우 중간에 한번 씩 forceReload를 true로 설정하여 브라우저가 갱신되어 전역 자원을 초기화 시켜 메모리릭을 방지 할 수있다.|\n|options.replaceHistory|<Boolean:N>|브라우저의 히스토리를 덮어 쓸 것인지에 대한 여부. true인 경우 내부적으로 location.replace 함수를 호출하며 false인 경우에는 location.assign함수를 호출된다.|\n|options.param|<JSON:N>|페이지 이동 시 추가로 전달할 인자들을 json형태로 전달한다. json 객체로 전달 할 수 있는 data는 string 타입만 가능하다. $p.getParameter 와 $p.getAllParameter API로 꺼내 올 수 있다.|\n|options.shortURL|<Boolean:N>|url을 w2xPath에 해당하는 경로만 전달할 것인지 http://... 와 같이 전체 경로를 전달할 것인지에 대한 옵션. 옵션 값을 지정하지 않은 경우 엔진 내부에서 자동으로 판단한다.|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar param1 = { \"name\":\"WebSquare\", \"ID\":\"tmpVal1\" };\n$p.url(\"/bar.xml\", {\"spa\" : true, \"replaceHistory\" : true, \"param\" : param1}); // bar.xml을 SPA로 페이지 이동하면서 name,ID 파라메터 전달\n\n//bar.xml에서 param1의 값을 꺼내오는 방법\n$p.getParameter(\"name\");\n//return 예시 ) WebSquare\n\n$p.url(\"/bar.xml\", {\"spa\" : true, \"forceReload\" : true, \"param\" : param1}); // bar.xml을 SPA로 이동하면서 브라우저를 재로딩하고 name,ID 파라메터 전달\n```\n\n"
    },
    "getStringByteSize": {
      "!type": "fn(str: string)",
      "!doc": "문자열의 Byte 크기를 반환합니다.\n\n'config' 파일의 'WebSquare/byteCheckEncoding/@value'에 설정된 값이 'euc-kr'이면 한글은 2byte로, 'utf-8'이면 3byte로 계산됩니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - 문자열\n\n**Return:**\n\n```Number``` - byte size\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar numStrSize = $p.getStringByteSize(\"web123+\");\n// return 예시) 7\n\n// (설정값이 'euc-kr'인 경우)\nvar numStrSize = $p.getStringByteSize(\"한글✚\");\n// return 예시) 6\n\n// (설정값이 'utf-8'인 경우)\nvar numStrSize = $p.getStringByteSize(\"한글✚\");\n// return 예시) 9\n```\n\n"
    },
    "setTimeout": {
      "!type": "fn(func: +Object, options: +Object)",
      "!doc": "사용자가 지정한 함수를 일정 시간이 지난 후에 실행합니다. 이 기능은 JavaScript의 setTimeout 기능을 확장하여 제공합니다.\n\n이 함수는 'Page Scope'이 적용되지 않습니다. 모든 화면에 영향을 미치므로 사용 시 주의가 필요합니다.\n\n**Parameters:**\n\n```func``` - ```Function:Y``` - 실행할 함수\n\n```options``` - ```JSON:N``` - 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.key|<String:N>|Timeout 객체를 구별하기 위한 ID. 지정되지 않은 경우 func.toString().slice(0,30)의 결과 값으로 지정합니다.|\n|options.delay|<Number:N>|함수의 실행 주기로 기본값은 1ms(millisecond / 1000분의 1초)입니다.|\n|options.caller|<Object:N>|함수에서 'this'으로 지정할 객체(웹스퀘어 컴포넌트 포함).|\n|options.args|<Object:N>|함수에 전달할 인자 값들이 담긴 배열.|\n|options.before_call|<function:N>|첫 번째 인자(func)에 지정한 함수의 실행 직전에 실행할 함수.|\n|options.callback|<function:N>|첫 번째 인자(func)에 지정한 함수가 실행된 후에 실행할 함수. 첫 번째 인자(func)에 지정한 함수의 return 값이 전달됩니다.|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// '$p.setTimeout'의 두 번째 인자(options)\nvar options = {};\n\n// Timeout의 고유 키를 'exam_timeout_01'로 지정\noptions.key = \"exam_timeout_01\";\n\n// 첫 번째 인자(func)의 실행을 1초 후로 지정\noptions.delay = 1000;\n\n// 화면에 정의된 컴포넌트 중 id가 'btn_exam1'인 객체를 지정. 함수에서 this로 접근할 수 있습니다.\noptions.caller = btn_exam1;\n\n// 첫 번째 인자(func)에 전달할 인자 값이 담긴 배열.\noptions.args = [\"api_example\", \"C0001\"];\n\n// 첫 번째 인자(func) 실행 직전에 호출되는 함수.\noptions.before_call = function () {\n    console.log(\"# before_call\");\n};\n\n// 첫 번째 인자(func) 실행 직후에 호출되는 함수.\noptions.callback = function (arg1) {\n    console.log(\"# callback\");\n\n    // 첫 번째 인자(func)에서 'return'한 값을 확인\n    console.log(\"arguments arg1 :  \", arg1); // 출력 예시) arguments arg1 :  { \"EXEC\": \"DONE\" }\n};\n\n$p.setTimeout(\n    function (arg1, arg2) {\n        console.log(\"arguments arg1 :  \" + arg1); // 출력 예시) arguments arg1 :  api_example\n        console.log(\"arguments arg2 :  \" + arg2); // 출력 예시) arguments arg2 :  C0001\n        console.log(\"this.getOriginalID : \" + this.getOriginalID()); // 출력 예시) this.getOriginalID : btn_exam1\n\n        // 반환 값은 필수가 아니며, 'options.callback'에 지정한 함수에 전달할 값이 있는 경우에 작성합니다.\n        return { \"EXEC\": \"DONE\" };\n    },\n    options\n);\n```\n\n"
    },
    "executeWhilst": {
      "!type": "fn(submission: string, condFn: +Object, maxRepeat: number, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
      "!doc": "workflow 를 생성하지않고 특정 submission을 반복적으로 호출하고자 할때 사용\n\n**Parameters:**\n\n```submission``` - ```String:Y``` - ID\n\n```condFn``` - ```function:Y``` - 실행여부를 체크하는 pre function\n\n```maxRepeat``` - ```int:Y``` - 최대실행 회수. conditon으로만 체크가능한 경우에는 무한루프에 대한 제어용으로도 사용가능\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.executeWhilst( \"submission1\", cond_check, 100, \"processMsg\",final_callback, reject_callback, id) ;\n//submission 을 cond_check sucess 이고 100회 미만 까지 반복 call/callback 수행 \n// -> final_callback or reject_callback\n```\n\n"
    },
    "getEventTarget": {
      "!type": "fn(argThis: +Object)",
      "!doc": "이벤트 핸들러로 등록된 함수에서 this를 인자로 전달받아 이벤트가 발생한 컴포넌트의 정보를 반환합니다.\n\n**Parameters:**\n\n```argThis``` - ```Object:Y``` - this 객체\n\n**Return:**\n\n```Object``` - 웹스퀘어 컴포넌트의 pluginName, id, realId 정보를 갖는 JSON 객체\n\n**Since:**\n\n5.0_4.4239B.20201127.151601\n\n**Sample:**\n\n```javascript\n//예시) Trigger 컴포넌트의 id가 'btn_send'이고 onclick 이벤트 핸들러로 'scwin.btn_send_onclick'가 지정된 경우.\nscwin.btn_send_onclick = function(e) {\n    var jsnInfo = $p.getEventTarget(this);\n    //return 예시)\n    //{\n    //    \"pluginName\": \"trigger\",\n    //    \"id\": \"btn_send\",\n    //    \"realId\": \"mf_btn_send\"\n    //}\n};\n```\n\n"
    },
    "getRuntimeId": {
      "!type": "fn(id: string)",
      "!doc": "실행 시점의 컴포넌트 id를 반환합니다. \n\nwframe의 scope 기능을 사용하면, 각 화면의 컴포넌트 id는 실행 시점에 고유 id로 변경됩니다.\n\nwframe에 구성된 컴포넌트의 id 생성 규칙은 'wframe의 id' + '_' + '컴포넌트 id' 형식입니다.\n\n**Parameters:**\n\n```id``` - ```string:Y``` - 화면에 정의한 컴포넌트 id\n\n**Return:**\n\n```String``` - 실행 시점의 컴포넌트 id\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 다음의 예시는 'config' 파일에 'stricMode'항목의 'scope variable'에 값이 'mf'로 정의된 경우입니다. 이 설정은 기본 값입니다.\n\n// 화면 구성은 다음과 같습니다.\n// 'main.xml'과 'sub.xml'에 Input 컴포넌트가 구성되어 있고, 각각의 id는 동일하게 'ibx_exam1'으로 정의되어 있습니다.\n// 'main.xml'에는 WFrame 컴포넌트가 구성되어 있으며, 속성 'src'의 값은 'sub.xml'로 지정되어 있습니다.\n\n// (main.xml UI 구성 예시)\n// <w2:input id='ibx_exam1'/>\n// <w2:wframe id='wfm_exam1' src='sub.xml'/>\n\n// (sub.xml UI 구성 예시)\n// <w2:input id='ibx_exam1'/>\n\n// (main.xml 스크립트 예시)\nvar strId = $p.getRuntimeId(\"ibx_exam1\");\n// return 예시) 'mf_ibx_exam1'\n\n// (sub.xml 스크립트 예시)\nvar strId = $p.getRuntimeId(\"ibx_exam1\");\n// return 예시) 'mf_wfm_exam1_ibx_exam1'\n```\n\n"
    },
    "executeParallel": {
      "!type": "fn(submission: +Object, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
      "!doc": "workflow 를 생성하지않고 기존 submission들을 parallel 하게 순서를 보장하여 처리하고자 할때 사용\n\nsubmission1 call -> submission2 call -> submission1 callback  -> submission2 callback\n\n**Parameters:**\n\n```submission``` - ```array:Y``` - id array  ex) [\"submission1\", \"submission2\", \"submission3\"]\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.executeParallel( [\"submission1\", \"submission2\", \"submission3\"],\"processMsg\", final_callback, reject_callback, id) ;\n//submission1,submission2, submission3 call \n// -> submission1 callback -> submission2 callback -> submission3 callback\n// -> final_callback or reject_callback\n```\n\n"
    },
    "executeWorkflow": {
      "!type": "fn(workflow: string)",
      "!doc": "정의된 workflow를 id로 실행하거나, workflow 객체를 직접 정의하여 실행합니다.\n\n**Parameters:**\n\n```workflow``` - ```String|Object:Y``` - workflow의 id 또는 workflow 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//예시 1) 정의된 workflow의 id가 'wf_exam1'인 경우\n$p.executeWorkflow(\"wf_exam1\");\n\n//예시 2) workflow 객체를 인자로 사용하는 경우\n\n//workflow객체의 속성은 아래와 같습니다.\n//workflowObj.id : <String:Y> workflow의 id\n//workflowObj.processMsg : <String:N> workflow 통신 중 보여줄 메시지. (문자열 '$blank'을 지정하면 메시지창이 활성화되지 않습니다.)\n//workflowObj.resolveCallback : <String||function:N> 모든 단계가 정상 처리된 후 실행할 function을 지정합니다.\n//workflowObj.rejectCallback : <String||function:N> 단계 진행 중 응답 값 오류 또는 오류 발생 시 실행할 function을 지정합니다.\n//workflowObj.step : <String:Y > 실행 단계가 담긴 배열\n//workflowObj.step[i].type : <String:Y> [submit, submitDone, function] 실행 단계 유형. \n//- submit : submission 실행. 'step.action'에 submission의 id를 지정합니다. 'step.pre'를 지정할 수 있습니다. \n//- submitDone : submission 응답 후 실행. submission에 등록 된 이벤트 핸들러 submitDone 또는 submitError가 실행됩니다. 'step.action'에 submission의 id를 지정합니다. 'step.post'를 지정할 수 있습니다. \n//- function : function 실행. 'step.action'에 function명 또는 function 객체를 지정합니다.\n//workflowObj.step[i].action: <String:Y> 실행 대상. 'stpe.type'의 값에 따라 지정할 수 있는 유형이 구분됩니다. \n//- 'stpe.type'의 값이 'submit' 또는 'submitDone'이면 submission의 id를 지정합니다. \n//- 'stpe.type'의 값이 'function'이면 function 명 또는 function 객체를 지정합니다.\n//workflowObj.step[i].pre : <String||function:N> 'stpe.type'의 값이 'submit' 일 때 지정할 수 있습니다. submission 실행 전 호출할 function 명 또는 function 객체를 지정합니다. function의 반환 값이 true가 아니면 submission이 실행되지 않습니다. (전체 reject 시 workflowObj.reject(msg)을 호출)\n//workflowObj.step[i].post : <String||function:N> 'stpe.type'의 값이 'submitDone' 일 때 지정할 수 있습니다. submission의 'submit-done' 이벤트 이후 실행됩니다.\n\nlet workflowObj = {};\nworkflowObj.id = \"wf_exam2\";\nworkflowObj.processMsg = \"workflow 실행 중입니다.\";\n\nworkflowObj.step = [\n    { \"type\": \"submit\", \"action\": \"sbm_exam1\", \"pre\": \"scwin.sbm_exam1_wf_pre\" },\n    { \"type\": \"function\", \"action\": \"scwin.wf_function1\" },\n    { \"type\": \"submit\", \"action\": \"sbm_exam2\" },\n    { \"type\": \"submitDone\", \"action\": \"sbm_exam1\", \"post\": \"scwin.sbm_exam1_wf_post\" },\n    { \"type\": \"submitDone\", \"action\": \"sbm_exam2\"},\n    { \"type\": \"submit\", \"action\": \"sbm_exam3\" },\n    { \"type\": \"function\", \"action\": \"scwin.wf_function2\" },\n    { \"type\": \"submitDone\", \"action\": \"sbm_exam3\" }\n];\n\nworkflowObj.resolveCallback = function (wObj) {\n    //함수를 직접 정의.\n    console.log(\"# workflow resolveCallback\");\n    console.log(wObj);\n};\n\nworkflowObj.rejectCallback = scwin.comm_wf_rejectCallback; //정의된 함수를 지정.\n\n$p.executeWorkflow(workflowObj);\n\n//step.pre에 지정한 funciton의 반환값이 true이고 응답이 모두 정상인 경우 실행 순서는 다음과 같습니다.\n//1. scwin.sbm_exam1_wf_pre\n//2. sbm_exam1_submit\n//3. sbm_exam1 실행\n//4. scwin.wf_function1\n//5. sbm_exam2_submit\n//6. sbm_exam2 실행\n//7. sbm_exam1_submitdone\n//8. scwin.sbm_exam1_wf_post\n//9. sbm_exam2_submitdone\n//10. sbm_exam3_submit\n//11. sbm_exam3 실행\n//12. scwin.wf_function2\n//13. sbm_exam3_submitdone\n//14. workflow resolveCallback \n\n//stpe의 pre 함수 정의 예시\nscwin.sbm_exam1_wf_pre = function (submissionId, workflowObj) {\n    //console.log(\"# scwin.sbm_exam1_wf_pre\");\n    //console.log(submissionId);\n    //console.log(workflowObj);\n    //workflow를 reject(중단) 하고자 할 때 다음과 같이 호출합니다.\n    //workflowObj.reject();\n    return true;    //true를 반환하지 않으면 submission의 실행이 중단됩니다.\n};\n\n//stpe의 post 함수 정의 예시\nscwin.sbm_exam1_wf_post = function (submissionObj, workflowObj) {\n    //console.log(\"# scwin.sbm_exam1_wf_post\");\n    //console.log(submissionObj);\n    //console.log(workflowObj);\n    //workflow를 reject(중단) 하고자 할 때 다음과 같이 호출합니다.\n    //workflowObj.reject();\n};\n```\n\n"
    },
    "getAllPopupWindowList": {
      "!type": "fn(bMain: bool)",
      "!doc": "현재 열려있는 모든 popup 객체의 window를 반환한다.\n\n반환된 window 객체를 통해 팝업 내부의 컴포넌트, 변수, API에 접근할 수 있다.\n\n**Parameters:**\n\n```bMain``` - ```Boolean:N``` - iframe또는 browserPopup일 때 반환된 window의 $p.main()을 실행한 결과를 반환할지에 대한 여부\n\n**Return:**\n\n```Array``` - 열려있는 모든 popup 객체들의 window 객체들의 배열\n\n**Since:**\n\n5.0_4.4767B.20221117.134711\n\n**Sample:**\n\n```javascript\nvar popWinList = $p.getAllPopupWindowList(true);\nfor (var i = 0; i < popWinList.length; i++ ) { \n   popWinList.scwin.test(); // 열려있는 모든 popup의 scwin.test함수를 호출하는 예제 \n}\n\n```\n\n"
    },
    "updateServerTime": {
      "!type": "fn()",
      "!doc": "비동기 통신으로 서버(WAS)의 현재 시간을 'yyyyMMddHHmmssSSS'형식의 문자열로 응답받아 '$p.getCurrentServerDate'에서 사용하는 기준 시간을 업데이트하고, 응답 데이터(현재 시간)를 Promise 객체로 반환합니다.\n\n**Return:**\n\n```Object``` - Promise 객체. Resolve 함수에서 서버의 현재 시간을 'yyyyMMddHHmmssSSS'형식의 문자열로 전달받을 수 있습니다.\n\n**Since:**\n\n5.0_3.5056B.20231016.182710\n\n**Sample:**\n\n```javascript\n$p.updateServerTime().then(\n    function (argResolve) {\n        // resolve 로직\n        // pattern : yyyyMMddHHmmssSSS\n        // argResolve 예시) '20200516073937243'\n    },\n    function (argReject) {\n        // reject 로직\n    }\n);\n```\n\n"
    },
    "executeSubmission": {
      "!type": "fn(submissionID: string, requestData: +Object, obj: +Object)",
      "!doc": "submissionID에 해당하는 Submission을 실행합니다.\n\n**Parameters:**\n\n```submissionID``` - ```String:Y``` - Submission의 id\n\n```requestData``` - ```Object:N``` - 요청 데이터. Submission에 정의한 속성 'ref'는 무시됩니다.\n\n```obj``` - ```Object|Array:N``` - 전송 중 비활성화할 컴포넌트. 여러 개의 컴포넌트를 지정할 경우 배열로 지정합니다.\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n//예시 1) Submission 'sbm_exam1'을 실행합니다.\n$p.executeSubmission(\"sbm_exam1\");\n\n//예시 2) 2번째 인자 'requestData' 할당하기\n//요청 데이터에 '{ \"TYPE\": \"U00001\" }'를 지정합니다. submission에 정의된 속성 'ref'는 무시됩니다.\n$p.executeSubmission(\n    \"sbm_exam1\",\n    { \"TYPE\": \"U00001\" }\n);\n\n//예시 3) 3번째 인자 'obj' 할당하기\n//웹스퀘어 컴포넌트 grp_form를 응답이 오기 전까지 비활성화합니다. 컴포넌트의 id 문자열이 아닌 객체를 지정해야 합니다.\n$p.executeSubmission(\n    \"sbm_exam1\",\n    null,\n    grp_form\n);\n\n//예시 4) 3번째 인자 'obj' 할당하기 - 여러 개의 컴포넌트 지정\n//웹스퀘어 컴포넌트 btn_send, btn_reset를 응답이 오기 전까지 비활성화합니다. 컴포넌트의 id 문자열이 아닌 객체를 지정해야 합니다.\n$p.executeSubmission(\n    \"sbm_exam1\",\n    null,\n    [btn_send, btn_reset]\n);\n```\n\n"
    }
  },
  "WebSquare": {
    "date": {
      "dateDiff": {
        "!type": "fn(day1: string, day2: string, options: +Object)",
        "!doc": "두 날짜 사이의 차이를 반환합니다.( to - from )\n\n**Parameters:**\n\n```day1``` - ```String:Y``` - 시작 날짜\n\n```day2``` - ```String:Y``` - 끝 날짜\n\n```options``` - ```Object:Y``` - JSON 형태로 저장된 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.returnType|<String:N>|[default: day] 반환 유형을 지정 (day: 일수 차이, month: 개월 수 차이)|\n\n**Return:**\n\n```String``` - 두 날짜의 차이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar diff1 = WebSquare.date.dateDiff( \"20120120\", \"20120210\" );\n//diff1 : 21\r\nvar diff2 = WebSquare.date.dateDiff( \"20230101\", \"20230120\", {\"returnType\" : \"month\"} );\r\n//diff2 : 0\r\nvar diff3 = WebSquare.date.dateDiff( \"20230131\", \"20230201\", {\"returnType\" : \"month\"} );\r\n//diff3 : 1\r\nvar diff4 = WebSquare.date.dateDiff( \"20230101\", \"20240101\", {\"returnType\" : \"month\"} );\r\n//diff4 : 12\n```\n\n"
      },
      "getMaxMinYear": {
        "!type": "fn()",
        "!doc": "maxYear 와 minYear 프로퍼티를 포함한 오브젝트를 반환합니다. config.xml에 정의된 값이 기본값으로 사용됩니다. (아래 Sample 참조.)\n\n**Return:**\n\n```Object``` - maxYear, minYear\n\n**Since:**\n\n2.0_1.3170B.20130708.184524\n\n**Sample:**\n\n```javascript\n//config.xml 에서 아래와 같이 정의된 설정값을 기본값으로 합니다.\n<websquare>\r\n    <date>\r\n        <maxYear value=\"2099\" />\r\n        <minYear value=\"1000\" />\r\n    <\/date>\r\n<\/websquare>\r\n\r\nvar maxMinYear = WebSquare.date.getMaxMinYear();\r\n//maxMinYear[ \"maxYear\" ] : 2099 (yyyy)\r\n//maxMinYear[ \"minYear\" ] : 1000 (yyyy)\n```\n\n"
      },
      "toSolar": {
        "!type": "fn(solar: string)",
        "!doc": "yyyyMMdd 형태의 음력 날짜를 입력으로 받아 해당하는 양력 날짜의 string을 반환한다.\r\n\n1000년 01월 01일 부터 2050년 11월 18일까지 지원한다. \r\n\n변환 범위를 벗어나거나 잘못된 형식의 값을 입력하면 오류 로그가 출력되고 undefined를 반환한다.\n\n**Parameters:**\n\n```solar``` - ```String:Y``` - \"yyyyMMdd\" 형태의 음력 날짜\n\n**Return:**\n\n```String``` - 양력날짜를 나타내는 string\n\n**Since:**\n\n5.0_4.4775B.20221202.171342\n\n**Sample:**\n\n```javascript\nvar solar = WebSquare.date.toLunar(\"20221025\");\n// solar : 20221118\n```\n\n"
      },
      "getFormattedDate": {
        "!type": "fn(dateObj: +Object, pattern: string)",
        "!doc": "Date객체 또는 문자열을 받아서 지정된 format으로 시간을 반환합니다.\r\n\n문자열을 입력받은 경우, 문자열의 날짜 형식과 pattern의 날짜 형식이 일치해야 합니다.\r\n\nWebSquare.date.getFormattedDate ( 20230101 , yyyy.MM.dd ); // 일치\r\n\nWebSquare.date.getFormattedDate ( 20230101 , yy.MM.dd ); // 불일치\r\n\npattern을 입력하지 않는 경우에는 java의 System.currentTimeMillis()값을 반환합니다.\n\n**Parameters:**\n\n```dateObj``` - ```Object:Y``` - JavaScript date객체 또는 문자열\n\n```pattern``` - ```String:N``` - 패턴\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar dateObj = new Date();\nvar dateStr1 = WebSquare.date.getFormattedDate ( dateObj, \"yyyy.MM\" );\r\n//dateStr1 : 2011.12\r\nvar dateStr2 = WebSquare.date.getFormattedDate ( \"20230101\" , \"yyyy.MM.dd\" );\r\n//dateStr2 : 2023.01.01\n```\n\n"
      },
      "isValidDate": {
        "!type": "fn(obj: +Object, sDate: string, options: +Object)",
        "!doc": "yyyyMMdd 형태의 날짜값을 받아서 유효한 날짜인지를 확인하여 boolean 또는 JSON을 반환합니다. 유효하지 않은 날짜라면 obj에 포커스를 줍니다.\n\n**Parameters:**\n\n```obj``` - ```Object:Y``` - websquare 객체\n\n```sDate``` - ```String:Y``` - 검증 대상 날짜\n\n```options``` - ```Object:N``` - JSON 형태로 저장된 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.useAlert|<String:N>|[default: \"true\"] alert을 보여줄지 지정|\n|options.returnType|<String:N>|[default: \"boolean\"] 유효한지 결과를 boolean으로 보여줄지, JSON으로 보여줄지 지정|\n\n**Return:**\n\n```Boolean||JSON``` - Boolean이면 유효한 날짜면 true, 아니면 false, JSON이면 유효하면 {\"result\" : true}, 유효하지 않으면 { \"result\": false, message: message}\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n options.useAlert이 \"true\"이면 alert을 보여주고, \"false\"이면 alert이 보이지 않습니다.\n options.returnType이 \"boolean\"이면 유효하면 true, 유효하지 않는 날짜이면 false를 반환\r\n options.returnType이 \"json\"이면 유효하면 {\"result\" : true}, 유효하지 않으면 { \"result\": false, message: 해당 메세지}를 반환\r\n \r\n var options = {\r\n     useAlert : \"true\",\r\n     returnType : \"json\"\r\n }\r\n var result = WebSquare.date.isValidDate (inputCalendar1, inputCalendar1.getValue(), options);\r\n result : {result: false, message: '입력값은 yyyyMMdd형식이어야 합니다. 입력값 : 345345'}\n```\n\n"
      },
      "getIOUnFormatDate": {
        "!type": "fn(value: string, ioFormat: string)",
        "!doc": "날짜값, ioFormat을 입력받아 날짜값을 yyyyMMddHHmmss 형식으로 치환한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 변환할 날짜 값\n\n```ioFormat``` - ```String:Y``` - 현재 날짜 값에 적용되어 있는 ioFormat 값\n\n**Return:**\n\n```String``` - \"yyyyMMddHHmmss\" 형식으로 치환된 날짜값\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\nvar ioUnformatDate1 = WebSquare.date.getIOUnFormatDate ( \"012017\", \"MMyyyy\"); // ioFormatDate1 : 201701\nvar ioUnformatDate2 = WebSquare.date.getIOUnFormatDate ( \"25012017\", \"ddMMyyyy\"); // ioFormatDate2 : 20170125\r\nvar ioUnformatDate3 = WebSquare.date.getIOUnFormatDate ( \"01252017142055\", \"MMddyyyyHHmmss\"); // ioFormatDate3 : 20170125142005\n```\n\n"
      },
      "getDay": {
        "!type": "fn(dateFormatStr: string)",
        "!doc": "yyyyMMdd 형태의 날짜를 입력받아서 해당 요일을 반환합니다. (예를 들어 '월요일' 등의 string을 반환)\n\n**Parameters:**\n\n```dateFormatStr``` - ```String:Y``` - \"yyyyMMdd\" 형태의 날짜를 나타내는 string\n\n**Return:**\n\n```String``` - '월요일' 등의 요일을 나타내는 string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar day = WebSquare.date.getDay(\"20111225\");\n//day : 일요일\n```\n\n"
      },
      "dateTimeAdd": {
        "!type": "fn(day1: string, offset: number, type: string)",
        "!doc": "날짜 및 시간에 지정된 수만큼 더합니다.( date + offset )\r\n\ntype에서 설정한 값(day,month,hour,minute,time)에 따라서 증가되는 대상이 달라진다.\r\n\ntype이 day일 경우엔 첫번째 인자의 날짜 형식이 yyyyMMdd, month일 경우 yyyyMM, hour일 경우 yyyMMddHH, minute일 경우 yyyyMMddHHmm 형식이어야 한다.\n\n**Parameters:**\n\n```day1``` - ```String:Y``` - 지정 날짜와 시간\n\n```offset``` - ```Number:Y``` - 날짜에 더할 숫자\n\n```type``` - ```String:Y``` - 증가된 값이 적용될 대상(day, month, hour, minute )\n\n**Return:**\n\n```String``` - 지정된 수 많큼 더해진 날짜\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar addTimeDateD = WebSquare.date.dateTimeAdd( \"20120102\", 7, \"day\" );  //addDate : 20120109\nvar addTimeDateM = WebSquare.date.dateTimeAdd( \"201201\", 7, \"month\" );  //addDate : 201208\r\nvar addTimeDateH = WebSquare.date.dateTimeAdd( \"2012010213\", 7, \"hour\" );  //addDate : 2012010220\r\nvar addTimeDatem = WebSquare.date.dateTimeAdd( \"201201021310\", 7, \"minute\" );  //addDate : 201201021317\n```\n\n"
      },
      "getCurrentServerDate": {
        "!type": "fn(pattern: string, msaName: string)",
        "!doc": "서버의 현재 시간을 반환합니다.\r\n\nJava의 SimpleDateFormat의 pattern을 인자로 받아서 시간을 표현합니다.\r\n\npattern을 입력하지 않는 경우에는 yyyyMMdd 패턴의 결과를 반환합니다.\r\n\ny       Year                        1996; 96\r\n\nM       Month in year               07\r\n\nd       Day in month                10\r\n\nH       Hour in day (0-23)          0\r\n\nm       Minute in hour              30\r\n\ns       Second in minute            55\r\n\nS       Millisecond                 978\n\n**Parameters:**\n\n```pattern``` - ```String:N``` - 날짜 형식( ex) yyyyMMdd )\n\n```msaName``` - ```String:N``` - MSA서버명\n\n**Return:**\n\n```String``` - 서버 날짜(시간) String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar dateStr = WebSquare.date.getCurrentServerDate();\n//dateStr : 20111225    (yyyyMMdd)\r\nvar dateStr = WebSquare.date.getCurrentServerDate(\"yyyyMMddHHmmssSSS\")\r\n//dateStr : 20111225112433707 (yyyyMMddHHmmssSSS)\n```\n\n"
      },
      "parseDate": {
        "!type": "fn(str: string, format: string)",
        "!doc": "날짜 형식 포맷을 Date로 변환합니다. (기본 포맷 : yyyyMMdd)\n\n**Parameters:**\n\n```str``` - ```String:Y``` - 년월일 String\n\n```format``` - ```String:N``` - 날짜형식 포맷\n\n**Return:**\n\n```Object``` - 날짜 포맷을 Date 객체로 파싱한 js의 date 오브젝트\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar dateObj = WebSquare.date.parseDate (\"20120101\");\nalert(dateObj.toString());\r\n        \r\n//결과 : Sun Jan 1 00:00:00 UTC+0900 2012\r\nvar dateObj = WebSquare.date.parseDate (\"01222013112430\", \"MMddyyyyHHmmss\");\r\nalert(dateObj.toString());\r\n\r\n//결과 : Tue Jan 22 2013 11:24:30 GMT+0900 (KST)\n```\n\n"
      },
      "dateAdd": {
        "!type": "fn(day1: string, offset: number)",
        "!doc": "날짜에 지정된 수만큼 더합니다.( date + offset )\n\n**Parameters:**\n\n```day1``` - ```String:Y``` - 지정 날짜\n\n```offset``` - ```Number:Y``` - 날짜에 더할 숫자\n\n**Return:**\n\n```String``` - 지정된 수 많큼 더해진 날짜\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar addDate = WebSquare.date.dateAdd( \"20120102\", 7 );\n//addDate : 20120109\n```\n\n"
      },
      "getIOFormatDate": {
        "!type": "fn(value: string, ioFormat: string)",
        "!doc": "날짜값, ioFormat을 입력 받아서 ioFormat에 맞게 날짜 값을 반환하는 함수.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 변환할 날짜 값\n\n```ioFormat``` - ```String:Y``` - 날짜 값에 적용할 ioFormat 값\n\n**Return:**\n\n```String``` - 지정된 ioFormat으로 날짜 값을 반환\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\nvar ioFormatDate1 = WebSquare.date.getIOFormatDate ( \"201701\", \"MMyyyy\"); // ioFormatDate1 : 012017\nvar ioFormatDate2 = WebSquare.date.getIOFormatDate ( \"20170103\", \"MMddyyyy\"); // ioFormatDate2 : 01032017\r\nvar ioFormatDate3 = WebSquare.date.getIOFormatDate ( \"20170103112014\", \"ddMMyyyyHHmmss\"); // ioFormatDate3 : 03012017112014\n```\n\n"
      },
      "toTimestampString": {
        "!type": "fn(dateObj: +Object)",
        "!doc": "java.sql.Timestamp에서 사용되는 yyyy-mm-dd hh:mm:ss.ffffff을 반환합니다.\n\n**Parameters:**\n\n```dateObj``` - ```Object:Y``` - JavaScript date객체\n\n**Return:**\n\n```String``` - yyyy-mm-dd hh:mm:ss.ffffff 형식의 string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar dateObj = new Date();\nvar dateStr = WebSquare.date.toTimestampString (dateObj);\r\n        \r\n//dateStr : 2011-12-25 11:01:47.219000\n```\n\n"
      },
      "toLunar": {
        "!type": "fn(solar: string)",
        "!doc": "yyyyMMdd 형태의 양력 날짜를 입력으로 받아 해당하는 음력 날짜의 string을 반환한다.\r\n\n1000년 02월 13일 부터 2050년 12월 31일까지 지원한다.\r\n\n변환 범위를 벗어나거나 잘못된 형식의 값을 입력하면 오류 로그가 출력되고 undefined를 반환한다.\n\n**Parameters:**\n\n```solar``` - ```String:Y``` - \"yyyyMMdd\" 형태의 양력 날짜\n\n**Return:**\n\n```String``` - 음력날짜를 나타내는 string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lunar = WebSquare.date.toLunar(\"20111225\");\n//lunar : 20111201\n```\n\n"
      }
    },
    "cookie": {
      "setCookie": {
        "!type": "fn(sName: string, sValue: string, SameSite: string)",
        "!doc": "Cookie에서 쿠키명이 sName, 값이 sValue인 쿠키를 저장\r\n\nCookie에 저장한 값은 브라우저가 종료되면 삭제됨. (Session Cookie)\n\n**Parameters:**\n\n```sName``` - ```String:Y``` - cookie 이름\n\n```sValue``` - ```String:Y``` - cookie 값\n\n```SameSite``` - ```String:N``` - SameSite 속성값 (None, Lax, Strict)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nWebSquare.cookie.setCookie(\"globalDebug\", \"false\"); //SameSite 'Lax'로 동작\n\r\nWebSquare.cookie.setCookie(\"globalDebug\", \"false\", \"None\");\r\n\r\nWebSquare.cookie.setCookie(\"globalDebug\", \"false\", \"Strict\");\r\n\r\nconsole.log(WebSquare.cookie.getCookie(\"globalDebug\"));\r\n //(SameSite 속성 설명)\r\n //\"None\" : 동일 사이트와 크로스 사이트에 모두 쿠기 전송 가능\r\n //\"Lax\" : Strct 설정에 일부 예외를 두어 적용 (HTTP get method / a href / link href)\r\n //\"Strict\" : 서로 다른 도메인에서는 cookie 전송 불가\n```\n\n"
      },
      "getCookie": {
        "!type": "fn(sName: string)",
        "!doc": "Cookie에서 쿠키명이 sName인 쿠키의 값을 조회\n\n**Parameters:**\n\n```sName``` - ```String:Y``` - cookie 이름\n\n**Return:**\n\n```String``` - cookie 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nWebSquare.cookie.getCookie(\"globalDebug\");\n\n```\n\n"
      },
      "setCookieAsync": {
        "!type": "fn(sName: string, sValue: string, SameSite: string)",
        "!doc": "Cookie에서 쿠키명이 sName, 값이 sValue인 쿠키를 저장. 비동기로 동작한다.\r\n\n저장된 Cookie는 브라우저가 종료되면 삭제됨. (Session Cookie)\n\n**Parameters:**\n\n```sName``` - ```String:Y``` - cookie 이름\n\n```sValue``` - ```String:Y``` - cookie 값\n\n```SameSite``` - ```String:N``` - SameSite 속성값 (None, Lax, Strict)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.cookie.setCookieAsync(\"globalDebug\", \"false\");\r\n\r\nWebSquare.cookie.setCookie(\"globalDebug\", \"false\", \"None\");\r\n\r\nWebSquare.cookie.setCookie(\"globalDebug\", \"false\", \"Strict\");\r\n\r\nconsole.log(WebSquare.cookie.getCookie(\"globalDebug\"));\r\n //(SameSite 속성 설명)\r\n //\"None\" : 동일 사이트와 크로스 사이트에 모두 쿠기 전송 가능\r\n //\"Lax\" : Strct 설정에 일부 예외를 두어 적용 (HTTP get method / a href / link href)\r\n //\"Strict\" : 서로 다른 도메인에서는 cookie 전송 불가\n```\n\n"
      },
      "delCookie": {
        "!type": "fn(sName: string)",
        "!doc": "Cookie에서 쿠키명이 sName인 쿠키를 삭제\n\n**Parameters:**\n\n```sName``` - ```String:Y``` - cookie 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nWebSquare.cookie.delCookie(\"globalDebug\");\n\n```\n\n"
      }
    },
    "session": {
      "removeSession": {
        "!type": "fn()",
        "!doc": "브라우저 세션 전체를 삭제합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.session.removeSession();\r\n\n```\n\n"
      },
      "setAttribute": {
        "!type": "fn(key: string, value: string)",
        "!doc": "브라우저 세션에 값을 설정합니다. 기존 값이 존재하면 덮어쓰여집니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 브라우저 세션에서의 이름\n\n```value``` - ```String:Y``` - 브라우저 세션에서의 키값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.session.setAttribute(\"userName\", \"홍길동\");\r\n\n```\n\n"
      },
      "getAttribute": {
        "!type": "fn(key: string)",
        "!doc": "브라우저 세션에서 값을 가져옵니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 브라우저 세션에서의 키값\n\n**Return:**\n\n```Object``` - retType에 해당하는 인스턴스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.session.getAttribute( \"custInfo\" );\r\n\n```\n\n"
      },
      "removeAttribute": {
        "!type": "fn(key: string)",
        "!doc": "브라우저 세션에서 값을 삭제합니다. 기존에 저장된 값은 return으로 반환합니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 브라우저 세션에서의 키값\n\n**Return:**\n\n```Object``` - 삭제된 세션의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.session.removeAttribute( \"custInfo\" );\r\n\n```\n\n"
      }
    },
    "localStorage": {
      "clear": {
        "!type": "fn()",
        "!doc": "localStorage가 가지고 있는 모든 데이터를 삭제합니다.\n\nhttp://www.w3.org/TR/webstorage/#storage : clear항목 참조\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n WebSquare.localStorage.clear(); \n // WebSquare.localStorage 컴포넌트에 저장된 모든 데이터를 삭제합니다.\n\n```\n\n"
      },
      "removeItem": {
        "!type": "fn(key: string)",
        "!doc": "입력된 key에 해당하는 item을 삭제합니다.\n\nhttp://www.w3.org/TR/webstorage/#storage : removeItem항목 참조\n\nlocalStorage의 변경된(삭제) 내용을 파일에 즉시 반영합니다.\n\n모든 데이터를 삭제하고 싶은 경우 clear()함수를 호출하면 편리합니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 삭제하고자 하는 item의 key값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n WebSquare.localStorage.removeItem(\"key1\"); \n // key1에 해당하는 item을 삭제합니다.\n\n```\n\n"
      },
      "getItem": {
        "!type": "fn(key: string)",
        "!doc": "key에 해당하는 값을 가져옵니다.\n\nhttp://www.w3.org/TR/webstorage/#storage : getItem항목 참조\n\n**Parameters:**\n\n```key``` - ```String:Y``` - item의 key값\n\n**Return:**\n\n```String``` - key와 매칭된 데이터가 있을 경우 해당 키에 대한 value를 반환하며, 그렇지 않을 경우 null을 리턴합니다.\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "key": {
        "!type": "fn(index: number)",
        "!doc": "index에 해당하는 키값을 가져옵니다.\n\nhttp://www.w3.org/TR/webstorage/#storage : key항목 참조\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 저장소의 index (배열의 index와 비슷한 개념입니다.)\n\n**Return:**\n\n```String``` - index에 해당하는 key값이 존재하는 경우 해당 key값을 반환하며, 그렇지 않을 경우 null을 리턴합니다.\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "setItem": {
        "!type": "fn(key: string, val: string)",
        "!doc": "localStorage에 key와 value로 이루어진 데이터 하나를 저장합니다.\n\nhttp://www.w3.org/TR/webstorage/#storage : setItem항목 참조\n\nlocalStorage의 변경된(삽입) 내용을 파일에 즉시 반영합니다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - item의 키\n\n```val``` - ```String:Y``` - item의 값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n WebSquare.localStorage.setItem(\"age\", \"25\"); \n // age라는 키로 25라는 값을 저장합니다. WebSquare.localStorage.getItem(\"age\")함수를 사용하여 25라는 값을 가져올 수 있습니다.   \n\n```\n\n"
      },
      "getAllItem": {
        "!type": "fn()",
        "!doc": "localStorage가 가지고 있는 모든 데이터를 key,value형태의 오브젝트로 반환합니다.\n\n**Return:**\n\n```Object``` - 현재 컴포넌트 객체가 가지고 있는 모든 데이터 값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n var data = WebSquare.localStorage.getAllItem(); \n // WebSquare.localStorage 컴포넌트에 저장된 모든 데이터를 가져옵니다.\n\n```\n\n"
      }
    },
    "logger": {"printLog": {
      "!type": "fn(msg: string)",
      "!doc": "디버그 창에서 확인할 수 있는 로그를 남깁니다.\n\n**Parameters:**\n\n```msg``` - ```String:Y``` - 로그 메시지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.logger.printLog('Log Test');\r\n\n```\n\n"
    }},
    "layer": {
      "hideModal": {
        "!type": "fn()",
        "!doc": "모달 레이어를 숨김.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "showModal": {
        "!type": "fn(popupComponents: +Object)",
        "!doc": "모달 레이어를 띄우고 componentId를 팝업으로 표시.\n\n**Parameters:**\n\n```popupComponents``` - ```Array:N``` - 팝업으로 표시할 ComponentId 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      }
    },
    "ModelUtil": {
      "isRunningWorkflow": {
        "!type": "fn(workflowID: string)",
        "!doc": "실행중인 Workflow 가 있는지 여부를 반환합니다.\n\nworkflowID 가 전달된 경우에는 해당 id 의 workflow 실행여부를 반환합니다.\n\n**Parameters:**\n\n```workflowID``` - ```String:N``` - workflow 아이디\n\n**Return:**\n\n```boolean``` - 실행여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//실행중인 workflow 가 있는지 여부 반환\nvar isRun = WebSquare.ModelUtil.isRunningWorkflow( );\n\n```\n\n"
      },
      "copyNode": {
        "!type": "fn(srcXPath: string, destXPath: string)",
        "!doc": "srcXPath에 해당하는 Node를 destXPath 에 해당하는 Node의 Child Node로 append합니다.\n\n기존의 destXPath밑에 있던 node들은 사라집니다.\n\n**Parameters:**\n\n```srcXPath``` - ```String:Y``` - append시킬 데이터의 xPath\n\n```destXPath``` - ```String:Y``` - append되는 곳의 xPath\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n        <book idx=\"1\">\n            <title lang=\"eng\">Harry Potter<\/title>\n            <price>29.99<\/price>\n        <\/book>\n        <book idx=\"2\">\n            <title lang=\"eng\">Learning XML<\/title>\n            <price>39.95<\/price>\n        <\/book>\n<\/bookstore>\nWebSquare.ModelUtil.copyNode( \"bookstore/book[@idx='2']\" , \"selectedBook\");\n\n//Model에 selectedBook 노드는 다음과 같다.\n<selectedBook>\n    <book idx='2'>\n        <title lang='eng'>Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/selectedBook>\n\n```\n\n"
      },
      "getRefToReqData": {
        "!type": "fn(submissionObj: +Object)",
        "!doc": "submission 객체의 ref를 request String  으로 변환하여 return\n\n**Parameters:**\n\n```submissionObj``` - ```Object:Y``` - submission 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "getWorkflow": {
        "!type": "fn(id: string)",
        "!doc": "id에 해당하는 Workflow 객체를 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - workflow 아이디\n\n**Return:**\n\n```Object``` - id를 통해서 찾은 workflow\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//xml에 workflow1 이 정의되어 있는 경우에는 실행 전이라도 객체를 구할 수 있음\n//동적으로 생성된 경우에는 실행이 진행되는 구간(pre, defaultCallback, callback, resolveCallback, rejectCallback등) 에서만 객체를 구할 수 있음\n//완료된 submission들의 실행결과 객체는 workflowObj.result 로 구할 수있음\nvar workflowObj = WebSquare.ModelUtil.getWorkflow( \"workflow1\" );\n\n```\n\n"
      },
      "rejectWorkflow": {
        "!type": "fn(reject: string, workflowID: string)",
        "!doc": "실행중인 Workflow 를 Reject 시킵니다. workflowID 가 전달된 경우에는 해당 workflow가 실행중인 경우에만 Reject 시킵니다.\n\n**Parameters:**\n\n```reject``` - ```String:N``` - 사유 메시지\n\n```workflowID``` - ```String:N``` -\n\n**Return:**\n\n```Object``` - Reject 된 workflow Object\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar workflowObj = WebSquare.ModelUtil.rejectWorkflow( );\n\n```\n\n"
      },
      "getRunningWorkflowID": {
        "!type": "fn()",
        "!doc": "실행중인 Workflow ID를 반환합니다.\n\n**Return:**\n\n```String``` - 실행중인 workflow ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//실행중인 workflow ID 반환\nvar runID = WebSquare.ModelUtil.getRunningWorkflowID( );\n\n```\n\n"
      },
      "findSerializedNode": {
        "!type": "fn(xpath: string)",
        "!doc": "WebSquare.ModelUtil.findInstanceNode로 찾은 노드를 serialize해서 반환합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 반환될 instance Node의 XPath\n\n**Return:**\n\n```String``` - Serialize된 Document Element(node)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\nvar xmlStr = WebSquare.ModelUtil.findSerializedNode (\"bookstore/book\");\n\n//xmlStr은 다음과 같다.\n<book idx=\"1\">\n    <title lang=\"eng\">Harry Potter<\/title>\n    <price>29.99<\/price>\n<\/book>\n```\n\n"
      },
      "executeSerial": {
        "!type": "fn(submission: +Object, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
        "!doc": "workflow 를 생성하지않고 기존 submission들을 serial 하게 순서를 보장하여 처리하고자 할때 사용\n\nsubmission1 call -> submission1 callback -> submission2 call -> submission2 callback\n\n**Parameters:**\n\n```submission``` - ```array:Y``` - id array  ex) [\"submission1\", \"submission2\", \"submission3\"]\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nWebSquare.ModelUtil.executeSerial( [\"submission1\", \"submission2\", \"submission3\"], processMsg,final_callback, reject_callback) ;\n//submission1 call/callback -> submission2 call/callback -> submission3 call/callback -> final_callback or reject_callback\n```\n\n"
      },
      "removeInstanceNode": {
        "!type": "fn(xpath: string)",
        "!doc": "xpath에 해당하는 node를 부모로부터 제거합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 제거할 node의 XPath\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\nWebSquare.ModelUtil.removeInstanceNode(\"bookstore/book\");\n\n//bookstore 노드는 다음과 같다.\n<bookstore>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\n```\n\n"
      },
      "findInstanceNodes": {
        "!type": "fn(xpath: string)",
        "!doc": "xpath에 해당하는 Instance 내부의 노드들을 배열 형태로 반환합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 반환될 instance Node의 XPath\n\n**Return:**\n\n```Object``` - xpath로 찾은Document Element(node)로 이루어진 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\nvar xmlDoc = WebSquare.ModelUtil.findInstanceNodes( \"bookstore/book\" );\n\n//xmlDoc.length는 2이다.\n//xmlDoc[0] 은 다음과 같다.\n<book idx=\"1\">\n    <title lang=\"eng\">Harry Potter<\/title>\n    <price>29.99<\/price>\n<\/book>\n//xmlDoc[1] 은 다음과 같다.\n<book idx=\"2\">\n    <title lang=\"eng\">Learning XML<\/title>\n    <price>39.95<\/price>\n<\/book>\n```\n\n"
      },
      "copyChildrenNodes": {
        "!type": "fn(srcXPath: string, destXPath: string, mode: string)",
        "!doc": "srcXPath가 가리키는 하위노드들을 destXPath가 가리키는 하위노드들로 복사합니다.\n\n이 때 mode에 따라 완전히 srcXPath의 하위노드로 replace 하는 것과 ( replaceAll )\n\nsrcXPath와 destXPath의 하위노드를 merge하는 것과 ( overwrite )\n\nsrcXPath의 하위노드와 destXPath의 하위노드 간 합집합을 구하는 것 ( append )\n\ndestXPath 하위노드에 존재하는 노드만 값을 세팅하는 것으로 나누어 집니다. ( replaceOnly )\n\n**Parameters:**\n\n```srcXPath``` - ```String:Y``` - 복사할 데이터의 xPath\n\n```destXPath``` - ```String:Y``` - 복사할 장소의 XPath\n\n```mode``` - ```String:Y``` - ( \"replaceAll\", \"overwrite\", \"replaceOnly\", \"append\" )\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n        <\/book>\n        <book idx=\"2\">\n            <title lang=\"eng\">Learning XML<\/title>\n            <price>39.95<\/price>\n        <\/book>\n<\/bookstore>\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML2<\/title>\n        <price>39.952<\/price>\n        <author>Erik T. Ray<\/author>\n<\/selectedBook>\n\nWebSquare.ModelUtil.copyChildrenNodes( \"bookstore/book[@idx='2']\" , \"selectedBook\", \"replaceAll\");\n\n//Model에 selectedBook 노드는 다음과 같다.\n<selectedBook>\n    <title lang=\"eng\">Learning XML<\/title>\n    <price>39.95<\/price>\n<\/selectedBook>\n\nWebSquare.ModelUtil.copyChildrenNodes( \"bookstore/book[@idx='2']\" , \"selectedBook\", \"overwrite\");\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML<\/title>\n    <price>39.95<\/price>\n    <author>Erik T. Ray<\/author>\n<\/selectedBook>\n\nWebSquare.ModelUtil.copyChildrenNodes( \"bookstore/book[@idx='2']\" , \"selectedBook\", \"append\");\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML2<\/title>\n    <price>39.952<\/price>\n    <author>Erik T. Ray<\/author>\n    <title lang=\"eng\">Learning XML<\/title>\n    <price>39.95<\/price>\n<\/selectedBook>\n\nWebSquare.ModelUtil.copyChildrenNodes( \"bookstore/book[@idx='2']\" , \"selectedBook\", \"replaceOnly\");\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML<\/title>\n    <price>39.95<\/price>\n    <author>Erik T. Ray<\/author>\n<\/selectedBook>\n\n```\n\n"
      },
      "removeInstanceNodes": {
        "!type": "fn(xpath: string)",
        "!doc": "xpath에 해당하는 여러 개의 node를 부모로 부터 제거합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 제거할 node의 xPath\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\nWebSquare.ModelUtil.removeInstanceNodes(\"bookstore/book\");\n\n//bookstore 노드는 다음과 같다.\n<bookstore/>\n\n```\n\n"
      },
      "getSubmission": {
        "!type": "fn(id: string)",
        "!doc": "id에 해당하는 submission 을 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - submission의 아이디\n\n**Return:**\n\n```Object``` - id를 통해서 찾은 submission\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//다음과 같이 submission이 존재하는 경우.\n//<xf:submission id=\"submission1\" ref=\"request\" target=\"response\"\n//    action=\"\" method=\"\" mediatype=\"text/xml\" encoding=\"UTF-8\"\n//    instance=\"\" replace=\"instance\" errorHandler=\"\" customHandler=\"\"\n//    mode=\"asynchronous\" processMsg=\"\">\n//<\/xf:submission>\n\nvar sub = WebSquare.ModelUtil.getSubmission( \"submission1\" );\n\nsub는 submission 객체이며 접근 방법은 다음과 같다.\nsub.action = \"/getBookInfo.jsp\";\nsub.method = \"get\";\n\n```\n\n"
      },
      "abort": {
        "!type": "fn(submissionId: string)",
        "!doc": "현재 진행 중인 Submission을 중지합니다.\n\n**Parameters:**\n\n```submissionId``` - ```String:Y``` - 중지할 Submission의 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n WebSquare.ModelUtil.abort( \"submission1\" );\n\n```\n\n"
      },
      "executeWhilst": {
        "!type": "fn(submission: string, condFn: +Object, maxRepeat: number, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
        "!doc": "workflow 를 생성하지않고 특정 submission을 반복적으로 호출하고자 할때 사용\n\n**Parameters:**\n\n```submission``` - ```String:Y``` - ID\n\n```condFn``` - ```function:Y``` - 실행여부를 체크하는 pre function\n\n```maxRepeat``` - ```int:Y``` - 최대실행 회수. conditon으로만 체크가능한 경우에는 무한루프에 대한 제어용으로도 사용가능\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nWebSquare.ModelUtil.executeWhilst( \"submission1\", cond_check, 100, \"processMsg\",final_callback, reject_callback, \"id1\") ;\n//submission 을 cond_check sucess 이고 100회 미만 까지 반복 call/callback 수행\n// -> final_callback or reject_callback\n```\n\n"
      },
      "getInstanceValue": {
        "!type": "fn(xpath: string)",
        "!doc": "주어진 xpath에 해당하는 Instance 내부의 노드의 nodeValue를 반환합니다.\n\n만약 이 노드가 element 라면 첫번째 자식노드부터 시작하여 그의 형제 노드들을 검색하는 식으로 하여\n\n노드의 nodevalue를 찾습니다.\n\n만약 노드가 attribute 라면 자식노드를 검색할 필요없이 바로 노드의 nodeValue를 반환합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 반환될 instance Node의 XPath\n\n**Return:**\n\n```String``` - xpath로 찾은 노드의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\nvar value1 =  WebSquare.ModelUtil.getInstanceValue( \"bookstore/book/title[@lang='eng']\" );\nvar value2 =  WebSquare.ModelUtil.getInstanceValue( \"bookstore/book/title\" );\nvar value3 =  WebSquare.ModelUtil.getInstanceValue( \"bookstore/book/title/@lang\" );\n\n//value1, value2는 Harry Potter.\n//value3은 eng.\n\n```\n\n"
      },
      "findInstanceNode": {
        "!type": "fn(xpath: string)",
        "!doc": "xpath에 해당하는 Instance 내부의 노드를 반환합니다. 여러개의 노드가 존재할 때 첫번째 노드를 반환합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - 반환될 instance Node의 XPath\n\n**Return:**\n\n```Xml Element``` - xpath로 찾은 xml element\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\nvar xmlDoc = WebSquare.ModelUtil.findInstanceNode (\"bookstore/book\");\n\n//xmlDoc은 다음과 같다.\n<book idx=\"1\">\n    <title lang=\"eng\">Harry Potter<\/title>\n    <price>29.99<\/price>\n<\/book>\n```\n\n"
      },
      "getRunningWorkflow": {
        "!type": "fn(workflowID: string)",
        "!doc": "실행중인 첫번째 Workflow 객체를 반환합니다.\n\n**Parameters:**\n\n```workflowID``` - ```String:N``` - workflow 아이디\n\n**Return:**\n\n```Object``` - 실행 중인 workflow object\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//실행이 진행되는 구간(pre, defaultCallback, callback, resolveCallback, rejectCallback등) 에서만 객체를 구할 수 있음\n//완료된 submission들의 실행결과 객체는 workflowObj.result 로 구할 수있음\nvar workflowObj = WebSquare.ModelUtil.getRunningWorkflow( );\n\n```\n\n"
      },
      "executeParallel": {
        "!type": "fn(submission: +Object, processMsg: string, resolveCallback: +Object, rejectCallback: +Object, id: string)",
        "!doc": "workflow 를 생성하지않고 기존 submission들을 parallel 하게 순서를 보장하여 처리하고자 할때 사용\n\nsubmission1 call -> submission2 call -> submission1 callback  -> submission2 callback\n\n**Parameters:**\n\n```submission``` - ```array:Y``` - id array  ex) [\"submission1\", \"submission2\", \"submission3\"]\n\n```processMsg``` - ```String:N``` - \n\n```resolveCallback``` - ```function:N``` - function\n\n```rejectCallback``` - ```function:N``` - function\n\n```id``` - ```String:N``` -\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nWebSquare.ModelUtil.executeParallel( [\"submission1\", \"submission2\", \"submission3\"],\"processMsg\", final_callback, reject_callback, \"id1\") ;\n//submission1,submission2, submission3 call\n// -> submission1 callback -> submission2 callback -> submission3 callback\n// -> final_callback or reject_callback\n```\n\n"
      },
      "setInstanceNode": {
        "!type": "fn(doc: +Object, xpath: string, modelID: string, mode: string)",
        "!doc": "Document 혹은 Element를 Instance의 xpath에 해당하는 경로에 위치시킵니다.\n\nmode가 replace인 경우에 기존에 있던 것들을 삭제하고 새로운 노드를 추가하고\n\nappend인 경우 기존의 노드들은 놔두고 새로운 노드를 추가합니다.\n\nmode를 명시하지 않을 경우에는 replace 모드입니다.\n\n**Parameters:**\n\n```doc``` - ```Object:Y``` - Document 또는 Document Element(node)\n\n```xpath``` - ```String:Y``` - 노드를 추가할 경로\n\n```modelID``` - ```String:N``` - 노드를 추가할 경로의 Model ID(현재 사용하지 않는 옵션)\n\n```mode``` - ```String:N``` - mode (\"replace\", \"append\")\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML2<\/title>\n    <price>39.952<\/price>\n    <author>Erik T. Ray<\/author>\n<\/selectedBook>\n\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\nWebSquare.ModelUtil.setInstanceNode( doc, \"selectedBook\", null , \"replace\" );\n\n//Model에 selectedBook 노드는 다음과 같다.\n\n<selectedBook>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n<\/selectedBook>\n\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\nWebSquare.ModelUtil.setInstanceNode( doc, \"selectedBook\", null , \"append\" );\n\n<selectedBook>\n    <title lang=\"eng\">Learning XML2<\/title>\n    <price>39.952<\/price>\n    <author>Erik T. Ray<\/author>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n<\/selectedBook>\n\n```\n\n"
      },
      "executeWorkflow": {
        "!type": "fn(workflowId: +Object)",
        "!doc": "workflowId or workflowObj 을 받아서 workflow 실행\n\n**Parameters:**\n\n```workflowId``` - ```Object:Y``` - workflow 아이디 or workflowObj\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nWebSquare.ModelUtil.executeWorkflow (\"workflow1\") ;\n//workflowCollection/workflow id가 workflow1인 workflow를 실행.\n//또는\nvar workflowObj= {\"id\":\"workflow1\", \"processMsg\" : \"workflow실행 중입니다.. \",\n     \"step\" : [{ \"type\":\"submit\", \"action\" : \"submission1\"},\n                  { \"type\":\"submit\",\"pre\": cond, \"action\" : \"submission2\"},\n                  { \"type\":\"submitDone\", \"action\" : \"submission1\", \"post\":post},\n                  { \"type\":\"submitDone\", \"action\" : \"submission2\", \"post\":post}   ],\n                  \"resolveCallback\" : final_callback,\n                  \"rejectCallback\": reject_callback\n                  } ;\nWebSquare.ModelUtil.executeWorkflow  (workflowObj) ;\n//workflowObj object로 workflow를 실행.\n```\n\n"
      },
      "setInstanceValue": {
        "!type": "fn(xpath: string, value: string)",
        "!doc": "주어진 xpath에 해당하는 Instance 내부 노드를 찾아 nodeValue를 설정합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - instance Node의 XPath\n\n```value``` - ```String:Y``` - 설정할 text value\n\n**Return:**\n\n```Boolean``` - node가 존재하지 않을 경우 false, 반영 성공 할 경우 true\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\nvar value1 = WebSquare.ModelUtil.setInstanceValue( \"bookstore/book/title/@lang\" , \"kor\");\nvar value2 = WebSquare.ModelUtil.setInstanceValue( \"bookstore/book/title\" , \"해리포터\");\n\n//value1, value2는 true.\n//반영된 xml Document.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"kor\">해리포터<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        .. 중략\n    <\/book>\n<\/bookstore>\n\n```\n\n"
      },
      "executeSubmission": {
        "!type": "fn(submissionID: string, requestData: +Object, obj: +Object)",
        "!doc": "submissionID에 해당하는 submission을 실행시킵니다.\n\n**Parameters:**\n\n```submissionID``` - ```String:Y``` - submission의 아이디\n\n```requestData``` - ```Object:N``` - 요청 데이터\n\n```obj``` - ```Object:N``` - 전송중 disable시킬 컴퍼넌트\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nWebSquare.ModelUtil.executeSubmission (\"submission1\") ;\n//id가 submission1인 submission을 실행.\n```\n\n"
      },
      "removeChildNodes": {
        "!type": "fn(xpath: string)",
        "!doc": "xpath에 해당하는 부모의 childNode들을 제거합니다.\n\n**Parameters:**\n\n```xpath``` - ```String:Y``` - childNode들을 제거할 부모의 xPath\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//Model에 바인드된 데이터가 다음과 같다.\n<bookstore>\n    <book idx=\"1\">\n        <title lang=\"eng\">Harry Potter<\/title>\n        <price>29.99<\/price>\n    <\/book>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\nWebSquare.ModelUtil.removeChildNodes(\"bookstore/book\");\n\n//bookstore 노드는 다음과 같다.\n<bookstore>\n    <book idx=\"1\"/>\n    <book idx=\"2\">\n        <title lang=\"eng\">Learning XML<\/title>\n        <price>39.95<\/price>\n    <\/book>\n<\/bookstore>\n\n```\n\n"
      }
    },
    "util": {
      "getMediaInfo": {
        "!type": "fn()",
        "!doc": "현재 페이지에 설정된 mediaInfo를 JSON Object형태로 반환\n\n**Return:**\n\n```Object``` - mediaInfo 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "getTimeoutKeyList": {
        "!type": "fn()",
        "!doc": "WebSquare.util.setTimer로 등록된 키값 전부를 array로 반환한다.\n\n**Return:**\n\n```Object``` - setTimer로 등록된 키값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n var timeoutKeyList = WebSquare.util.getTimeoutKeyList();\n for(var i = 0; i < timeoutKeyList.length; i++) { WebSquare.util.clearTimeout(timeoutKeyList[i]); } // 등록된 타이머를 전부 제거\n```\n\n"
      },
      "parent": {
        "!type": "fn(elem: +Object, num: number)",
        "!doc": "주어진 html 객체에서 숫자 num 만큼(없으면 한 단계 위) 상위인 노드를 찾아 반환합니다.\n\n**Parameters:**\n\n```elem``` - ```Object:Y``` - 부모 노드를 검사할 객체\n\n```num``` - ```Number:N``` - 상위 노드를 탐색할 횟수\n\n**Return:**\n\n```Object``` - elem의 상위 노드\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.parent( xmlDoc, 1)\n```\n\n"
      },
      "loadLocale": {
        "!type": "fn(url: string)",
        "!doc": "클라이언트 다국어 JS 파일을 로드.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 다국어 JS 파일의 URL.\n\n**Since:**\n\n5.0_2.4094B.20200713.132313\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "setDomain": {
        "!type": "fn(domain: string)",
        "!doc": "frame 및 popup에서 cross domain을 처리하기 위해 domain을 셋팅한다.\n\n**Parameters:**\n\n```domain``` - ```String:Y``` - 공통 domain\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "prev": {
        "!type": "fn(elem: +Object)",
        "!doc": "텍스트 노드를 제외한 이전 노드 검색해서 반환합니다.\n\n**Parameters:**\n\n```elem``` - ```Object:Y``` - 이전 노드를 검색할 객체\n\n**Return:**\n\n```Object``` - elem의 이전 노드\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.prev( xmlDoc);\n```\n\n"
      },
      "appendingPathComponent": {
        "!type": "fn(starturl: string, endurl: string)",
        "!doc": "url 경로에 다른 경로를 덧붙이는 함수로 /의 유무에 따라 이상동작하는 것을 핸들링.\n\ncase 1 : /hoyoon/ + /inswave.xml = /hoyoon/inswave.xml (//에서 / 하나 지운다)\n\ncase 2 : /hoyoon + /inswave.xml = /hoyoon/inswave.xml (그냥 붙인다)\n\ncase 3 : /hoyoon/ + inswave.xml = /hoyoon/inswave.xml (그냥 붙인다)\n\ncase 4 : /hoyoon + inswave.xml = /hoyoon/inswave.xml (/ 하나 추가한다)\n\ndegenerating case : 뒷부분 컴포넌트에 :// 가 있을 경우(프로토콜이 포함된 절대경로일 경우) 뒷부분만 리턴.\n\n**Parameters:**\n\n```starturl``` - ```String:Y``` - 병합할 url 컴포넌트 앞부분\n\n```endurl``` - ```String:Y``` - 병합할 url 컴포넌트 뒷부분\n\n**Return:**\n\n```String``` - 병합된 url\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "getPopup": {
        "!type": "fn(id: string)",
        "!doc": "id를 찾아서 해당 popup component를 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Return:**\n\n```Object``` - 해당 popup component\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar popObj = WebSquare.util.getPopup(\"popup1\");\n```\n\n"
      },
      "getDocumentSize": {
        "!type": "fn(sizeName: string)",
        "!doc": "scroll bar 영역의 사이즈는 제외한 document의 width나 height를 구합니다.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - \"width\"나 \"height\"에 해당하는 string\n\n**Return:**\n\n```Number``` - document의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.getDocumentSize(\"width\");\n```\n\n"
      },
      "getSubmissionURL": {
        "!type": "fn(url: string)",
        "!doc": "submissionURL 정보를 읽어들여서 필요시 경로처리하는 함수. appendingPathComponent 사용함.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 기본 url 주소\n\n**Return:**\n\n```String``` - submissionURL 처리 된 url\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "isInteger": {
        "!type": "fn(num: string)",
        "!doc": "주어진 숫자가 정수인지 판별합니다.\n\n**Parameters:**\n\n```num``` - ```String:Y``` - Number 또는 Number String\n\n**Return:**\n\n```Boolean``` - 정수라면 true, 정수가 아니면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.isInteger(10)\n```\n\n"
      },
      "deleteLocale": {
        "!type": "fn(url: string)",
        "!doc": "클라이언트 다국어 언어팩을 삭제.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 삭제할 다국어 JS 파일의 URL.\n\n**Since:**\n\n5.0_2.4094B.20200713.132313\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "isNumber": {
        "!type": "fn(value: +Object)",
        "!doc": "주어진 값의 타입이 Number인지 체크합니다.\n\n**Parameters:**\n\n```value``` - ```Obejct:Y``` - type 체크를 할 값\n\n**Return:**\n\n```Boolean``` - type이 Number라면 true, 아니라면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.isNumber(\"12\");\ndata : false\n```\n\n"
      },
      "clearTimeout": {
        "!type": "fn(key: string, force: bool)",
        "!doc": "WebSquare.util.setTimer로 등록한 함수를 직접 clearTimeout시킨다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - WebSquare.util.setTimer로 등록할 때 options.key로 지정한 키값.\n\n```force``` - ```Boolean:N``` - setTimer로 등록된 함수를 실행할지에 대한 여부. 기본값은 false.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.clearTimeout(\"timer1\");\n```\n\n"
      },
      "getGlobalFunction": {
        "!type": "fn(str: string)",
        "!doc": "window 영역에서 함수를 찾아와 반환합니다. 함수가 객체 내부에 있을 경우에도 찾아옵니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - 함수를 나타내는 string\n\n**Return:**\n\n```Function``` - 반환할 함수\n\n**Since:**\n\n2.0_1.3229B.20130731.095639\n\n**Sample:**\n\n```javascript\n\nvar func = WebSquare.util.getGlobalFunction(\"obj.formatter\");\n```\n\n"
      },
      "isMobile": {
        "!type": "fn()",
        "!doc": "현재 동작중인 기기가 모바일 기기인지 판별. 아이폰, 아이패드, 아이팟터치, 안드로이드, 블랙베리를 판별 가능.\n\n**Return:**\n\n```Boolean``` - 모바일 기기인 경우 true, 아닌 경우 false를 반환.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "getKeyCode": {
        "!type": "fn(comp: +Object, e: +Object)",
        "!doc": "key event가 발생하는 컴포넌트 객체와 event객체를 입력 받아서 keyCode값 또는 unicode값을 반환한다.\n\nkeyCode가 발생하는경우에는 keyCode값을, keyCode가 발생하지 않는 경우에는 unicode값을 10진수형태로 반환한다.\n\n**Parameters:**\n\n```comp``` - ```Object:Y``` - 컴포넌트 객체\n\n```e``` - ```Event:Y``` - event 객체\n\n**Return:**\n\n```Number``` - keyCode의 경우 keyCode, uniCode의 경우에는 uniCode값 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar returnValue = WebSquare.util.getKeyCode(input1,e);<br />console.log(\"returnValue=\"+returnValue);\n```\n\n"
      },
      "getMetaValue": {
        "!type": "fn(key: string)",
        "!doc": "head영역에 정의한 Meta key에 해당하는 value를 반환한다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - Meta정보의 key\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "setTime": {
        "!type": "fn(str: string)",
        "!doc": "Time String에 ':'를 추가합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Time String\n\n**Return:**\n\n```String``` - 입력받은 str에서 ':'를 추가한 String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.setTime (\"1123\");\ndata : 11:23\n```\n\n"
      },
      "last": {
        "!type": "fn(elem: +Object)",
        "!doc": "주어진 html 객체의 마지막 child node를 반환합니다.\n\n**Parameters:**\n\n```elem``` - ```Object:Y``` - 하위 노드를 검사할 객체\n\n**Return:**\n\n```Object``` - elem의 마지막 child node\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.last(xmlDoc);\n```\n\n"
      },
      "getCurrentScreen": {
        "!type": "fn()",
        "!doc": "현재 페이지에 설정된 mediaInfo의 screen중에 현재 브라우저 크기에 맞는 screen값을 반환한다.\n\n**Return:**\n\n```String``` - 현재 screen 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "createPopup": {
        "!type": "fn(id: string, type: string, popupName: string, style: string, useIFrame: string, modal: string, srcORurl: string, srcData: string, destData: string, xml: +Object)",
        "!doc": "deprecated : popup을 속성에 따라 만드는 함수입니다. ($p.openPopup으로 대체)\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup 객체의 ID\n\n```type``` - ```String:N``` - popup 객체의 type으로 litewindow, window, browser 중 하나\n\n```popupName``` - ```String:N``` - popup 객체의 이름으로 popup 프레임의 표시줄에 나타납니다.\n\n```style``` - ```String:N``` - popup 객체의 style\n\n```useIFrame``` - ```String:N``` - true, false 두 개의 값을 가질 수 있다.\n\n|property|type|description|\n|:-|:-|:-|\n|true|IFrame 을 사용하는 WebSquare popup|null|\n|false|window.open 을 사용하는 popup|null|\n\n\n```modal``` - ```String:N``` - true, false 두 개의 값을 가질 수 있다.\n\n|property|type|description|\n|:-|:-|:-|\n|true|popup 객체의 뒷 배경에 표시되는 component 를 사용할 수 없다.|null|\n|false|popup 객체의 뒷 배경에 표시되는 component 를 사용할 수 있다.|null|\n\n\n```srcORurl``` - ```String:Y``` - 화면에 표시할 소스.\n\n|property|type|description|\n|:-|:-|:-|\n|popup|객체의 type이 litewindow 혹은 window인 경우 : 표시되는 WebSuqare XML 파일의 이름.|null|\n|popup|객체의 type이 browser인 경우 : 표시되는 웹 사이트의 주소.|null|\n\n\n```srcData``` - ```String:N``` - popup 객체의 type 이 window 일 때 Parent 에서 넘길 xpath\n\n```destData``` - ```String:N``` - popup 객체의 type 이 window 일 때 popup 에 설정할 xpath\n\n```xml``` - ```Array:N``` - popup 객체에 적용될 xml 문서\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.createPopup(\"popup1\", \"window\", \"People Profile\", \"width:600px;height:350px;top:100px;left:100px;\", \"true\", \"true\", \"WebSquare1.xml\", peopleNode, \"map\", peopleNode);\n```\n\n"
      },
      "getChildren": {
        "!type": "fn(component: +Object, options: +Object)",
        "!doc": "특정 component의 자식 component들을 배열로 반환합니다.\n\n**Parameters:**\n\n```component``` - ```Object:N``` - 부모 component. 인자값이 없는 경우 body component가 됩니다.\n\n```options``` - ```Object:N``` - options 속성은 아래와 같습니다.\n\n|property|type|description|\n|:-|:-|:-|\n|obj.recursive|<boolean:N>|자손(descendant)을 포함할 것인지에 대한 옵션으로 기본값은 false. body component인 경우에는 해당 옵션이 무시되어 무조건 false로 적용됩니다.|\n|obj.excludeInnerComp|<boolean:N>|컴포넌트 내부에서 생성된 컴포넌트를 제외할 것인지에 대한 옵션으로 기본값 false.|\n|obj.excludeContainerComp|<boolean:N>|컨테이성 컴포넌트 (wframe, windowContainer, tabControl, widgetContainer, UDC) 내부에 있는 컴포넌트를 제외할 것인지에 대한 옵션으로 기본값 false.|\n|obj.excludeId|<String:N>|제외할 컴포넌트 id. 인자가 여러개일 경우 공백을 구분자로 사용.|\n|obj.excludePlugin|<String:N>|제외할 컴포넌트 plugin 이름. 인자가 여러개일 경우 공백을 구분자로 사용.|\n|obj.includePlugin|<String:N>|포함할 컴포넌트 plugin 이름. 인자가 여러개일 경우 공백을 구분자로 사용. excludePlugin에도 설정하면 해당 컴포넌트는 제외됨.|\n\n**Return:**\n\n```Object``` - component가 담긴 배열\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n (ex1) WebSquare.util.getChildren(); 또는 WebSquare.util.getChildren(null, {recursive:true});\n => body의 직접적인 자식(immediate children) component를 전부 반환합니다. body의 경우에는 recursive 속성을 무시합니다. \n (성능 이슈로 body의 경우에는 자식 노드의 재귀적 탐색을 허용하지 않습니다.)  \n (ex2) WebSquare.util.getChildren (group1, {excludePlugin : \"trigger output\", recursive : true});\n => group1의 모든 자식 및 자손 컴포넌트 (descendant) 중에서 trigger와 output을 제외하고 전부 반환합니다. \n (ex3) WebSquare.util.getChildren(group2, {excludePlugin : \"trigger input\", excludeId : \"treeview1_tooltip windowContainer1_tooltip\");\n => group1의 직접적인 자식(immediate children) component 중 trigger, output component 및 id가 treeview1_tooltip, widnowContainer1_tooltip인 component를 제외한 배열을 반환한다.\n (ex4) WebSquare.util.getChildren (group1, {includePlugin : \"trigger output\", recursive : true});\n => group1의 모든 자식 및 자손 컴포넌트 (descendant) 중에서 trigger와 output만 반환합\n (ex5) WebSquare.util.getChildren (group1, {includePlugin : \"trigger output\", excludePlugin : \"trigger\"});\n => group1의 모든 자식 및 자손 컴포넌트 (descendant) 중에서 output만 반환합\n```\n\n"
      },
      "getComponentById": {
        "!type": "fn(id: string)",
        "!doc": "주어진 id에 해당하는 웹스퀘어 컴포넌트를 찾아 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 웹스퀘어 컴포넌트의 ID\n\n**Return:**\n\n```Object``` - 웹스퀘어 컴포넌트 객체\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar output1 = WebSquare.util.getComponentById(\"output1\");\n```\n\n"
      },
      "getIntervalKeyList": {
        "!type": "fn()",
        "!doc": "WebSquare.util.setIntervalKey로 등록된 키값 전부를 array로 반환한다.\n\n**Return:**\n\n```Object``` - getIntervalKey로 등록된 키값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n var IntervalKeyList = WebSquare.util.getIntervalKeyList();\n for(var i = 0; i < IntervalKeyList.length; i++) { WebSquare.util.clearInterval(IntervalKeyList[i]); } // 등록된 타이머를 전부 제거\n```\n\n"
      },
      "isHybrid": {
        "!type": "fn()",
        "!doc": "브라우저 실행환경이 모바일 하이브리드 앱인지를 판별하는 함수. 모바일에서 실행되는 경우여도 일반 브라우저 앱에서 실행되는 경우는 false이다.\n\n**Return:**\n\n```Boolean``` - 하이브리드앱에서 실행되는 경우 true, 아닌 경우 false를 반환.\n\n**Since:**\n\n5.0_2.3572B.20190419.174727\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "removeData": {
        "!type": "fn(key: string)",
        "!doc": "특정 key로 등록된 data를 제거한다. data의 하위 object를 제거하여 빈 껍데기 상태로 만든다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 삭제하고자 하는 data의 key값\n\n**Return:**\n\n```Object``` - key에 해당하는 data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n var itemList = WebSquare.util.getData(\"item1\").itemList;\n\n```\n\n"
      },
      "next": {
        "!type": "fn(elem: +Object)",
        "!doc": "텍스트 노드를 제외한 다음 노드 검색해서 반환합니다.\n\n**Parameters:**\n\n```elem``` - ```Object:Y``` - 다음 노드를 검색할 객체\n\n**Return:**\n\n```Object``` - elem의 다음 노드\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.next(xmlDoc);\n```\n\n"
      },
      "parseFloat": {
        "!type": "fn(str: string, defaultValue: number)",
        "!doc": "parseFloat를 호출합니다. defaultValue가 주어지고 parseFloat결과가 NaN이면 defaultValue를 반환합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Number string\n\n```defaultValue``` - ```Number:N``` - parseFloat 결과가 NaN일때 반환할 기본 값\n\n**Return:**\n\n```Number``` - 주어진 문자를 숫자로 변환한 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.parseFloat(num, 0);\n```\n\n"
      },
      "reinitialize": {
        "!type": "fn(refresh: bool)",
        "!doc": "브라우저 refresh 없이 페이지를 다시 로딩하거나 또는 브라우저를 refresh합니다.\n\n**Parameters:**\n\n```refresh``` - ```Boolean:N``` - 브라우저를 refresh할 것인지에 대한 여부. ( default값은 false )\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n WebSquare.util.reinitialize(); 브라우저를 refresh하지 않고 해당 페이지를 다시 로딩한다. \n\n```\n```<br />WebSquare.util.reinitialize(true); 브라우저를 refresh한다.\n\n"
      },
      "getTime": {
        "!type": "fn(str: string)",
        "!doc": "Time String에서 ':'을 제거합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Time String\n\n**Return:**\n\n```String``` - 입력받은 str에서 ':'를 제거한 String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.getTime(\"11:23\");\ndata : 1123\n```\n\n"
      },
      "isEmptyObject": {
        "!type": "fn(obj: +Object)",
        "!doc": "인자로 넘어온 객체가 빈 객체이면 true를 반환하고 빈 객체가 아닐 경우 false를 반환하는 함수이다.\n\n**Parameters:**\n\n```obj``` - ```Object:Y``` - 빈 객체인지를 검사할 객체=\n\n**Return:**\n\n```Boolean``` - 빈 객체이면 true, 빈 객체가 아니면 false\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n var A = {\"x\":100};\n WebSquare.util.isEmptyObject(A); // false \n delete A.x; \n WebSquare.util.isEmptyObject(A); // true\n WebSquare.util.isEmptyObject(null); // false  (빈 객체는 {}을 의미한다. null을 의미하는 것이 아니다.)\n```\n\n"
      },
      "setDisabled": {
        "!type": "fn(obj: +Object)",
        "!doc": "컴포넌트 하위로 disabled를 처리한다.\n\n**Parameters:**\n\n```obj``` - ```Object:Y``` - disabled parameter\n\n|property|type|description|\n|:-|:-|:-|\n|obj.componentId|<String:N>|컴포넌트 Id, 비어있으면 body|\n|obj.disabled|<boolean:Y>|disabled flag|\n|obj.excludeIdList|<Array<String>:N>|제외할 컴포넌트 Id 리스트 (미입력시 전체 적용)|\n|obj.includeIdList|<Array<String>:N>|허용할 컴포넌트 Id 리스트 (미입력시 전체 적용)|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nWebSquare.util.setDisabled({\"componentId\":\"\", \"disabled\":true});        //전체 disabled\nWebSquare.util.setDisabled({\"componentId\":\"\", \"disabled\":false});       //전체 enabled\nWebSquare.util.setDisabled({\"componentId\":\"\", \"disabled\":true, \"excludeIdList\": [\"output10\"]}); //output10을 제외한 전체 disabled\nWebSquare.util.setDisabled({\"componentId\":\"\", \"disabled\":true, \"includeIdList\": [\"output1\",\"output2\"]});    //output1,output2만 disabled\n```\n\n"
      },
      "getPopupWindow": {
        "!type": "fn(id: string)",
        "!doc": "id를 찾아서 해당 popup의 window를 반환합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Return:**\n\n```Object``` - 해당 popup의 window\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar popObj = WebSquare.util.getPopupWindow(\"popup1\");\n```\n\n"
      },
      "getPopupParam": {
        "!type": "fn()",
        "!doc": "popup을 만들때 xml 속성으로 넘긴 xmlDocument의 string를 반환합니다.\n\n**Return:**\n\n```String``` - popup을 만들때 xml 속성으로 넘긴 xmlDocument의 string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar dataStr = WebSquare.util.getPopupParam();\n```\n\n"
      },
      "js": {
        "!type": "fn(scriptUrl: string, callback: +Object)",
        "!doc": "여러 개의 외부 script를 로드할 때 스크립트별 순서제어가 필요한 경우 사용합니다. 인자로 넘어온 script들 loading은 병렬로 진행하면서 실행은 순서대로 실행하는 기능을 제공합니다. 그리고 마지막 인자의 type이 function인 경우, 모든 스크립트 로딩이 끝난 후 해당 function을 실행합니다 (callback)\n\n**Parameters:**\n\n```scriptUrl``` - ```String:Y``` - javascript url주소. 인자 개수는 가변입니다. load할 script를 여러개 지정할 경우 script url주소를 script개수만큼 인자로 전달합니다.\n\n```callback``` - ```Function:N``` - 전달된 마지막 인자의 type이 function인 경우, 이전까지 인자로 전달된 모든 스크립트의 실행이 완료된 후에 해당 함수가 실행됩니다. 즉 callback 함수입니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n WebSquare.util.js(\"/common/js/common.js\", \"/common/js/test1.js\", \"/common/js/test2.js\", function(){alert(\"all done\");}\n // common.js, test1.js, test2.js 로딩은 병렬로 이루어지며, 스크립트의 실행은 인자가 넘어온 순서인 common.js -> test1.js -> test2.js 순서로 실행됨.\n // test2.js 실행이 끝나면 callback 함수가 실행되고 따라서 alert(\"all done\"); 이 실행된다.\n```\n\n"
      },
      "clearInterval": {
        "!type": "fn(key: string, force: bool)",
        "!doc": "WebSquare.util.setInterval로 등록한 함수를 직접 clearInterval시킨다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - WebSquare.util.setInterval로 등록할 때 options.key로 지정한 키값.\n\n```force``` - ```Boolean:N``` - setInterval로 등록된 함수를 한 번 실행할지에 대한 여부. 기본값은 false.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.clearInterval(\"timer1\");\n\n```\n\n"
      },
      "dbltoHexacode": {
        "!type": "fn(dbl: number)",
        "!doc": "주어진 정수값을 RGB 색상을 표현하기 위한 hexa code 형태로 변환하여 반환니다.\n\n**Parameters:**\n\n```dbl``` - ```Number:Y``` - 정수 형태의 RGB 값\n\n**Return:**\n\n```String``` - hexa code로 변환된 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.dbltoHexacode(16777215);\n```\n\n"
      },
      "getNumber": {
        "!type": "fn(str: string)",
        "!doc": "입력된 String에서 콤마(',')를 제거한후 parseInt/parseFloat를 실행한 결과를 반환합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - string 형태의 숫자\n\n**Return:**\n\n```Number``` - 입력된 string을 숫자로 변환 한 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.getNumber(\"2,000\");\ndata : 2000\n```\n\n"
      },
      "hexacodetoDbl": {
        "!type": "fn(hexa: string)",
        "!doc": "주어진 hexa code 값을 정수로 변환하여 반환합니다.\n\n**Parameters:**\n\n```hexa``` - ```String:Y``` - hexa code 값\n\n**Return:**\n\n```Number``` - 정수로 변환된 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.hexacodetoDbl(\"A0D39C\");\n```\n\n"
      },
      "multipleDataListDownload": {
        "!type": "fn(options: +Object, infoArr: +Object)",
        "!doc": "DataList의 데이터를 Excel 파일로 저장. sheetName은 중복되지 않게 설정해야 함. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 dataList의 엑셀 다운로드 옵션\n\n\n파일 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|저장할 Excel 파일 이름. [default: excel.xls]|\n|options.multipleSheet|<String:N>|다운로드시 각 DataList를 별도의 시트에 분리해서 출력. [default: true]|\n|options.dataListId|<String:N>|다운로드하려는 dataList의 ID.|\n|options.wframeId|<String:N>|다운로드하려는 dataList가 포함된 WFrame의 ID. [default: 없음]<\/xmp>|\n|Excel|관련 옵션|null|\n\n\n```infoArr``` - ```Object:N``` - dataList에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열.\n\n|property|type|description|\n|:-|:-|:-|\n|infoArr.rowIndex|<Number:N>|내용을 표시할 행 번호.|\n|infoArr.colIndex|<Number:N>|내용을 표시할 열 번호.|\n|infoArr.rowSpan|<Number:N>|병합할 행의 수.|\n|infoArr.colSpan|<Number:N>|병합할 열의 수.|\n|infoArr.text|<String:N>|표시할 내용|\n|infoArr.textAlign|<String:N>|표시할 내용의 정렬 방법. (left, center, right)|\n|infoArr.fontSize|<String:N>|폰크 크기. (예: \"20px\" )|\n|infoArr.fontName|<String:N>|폰트.|\n|infoArr.color|<String:N>|폰트 색. (예: \"red\" )|\n|infoArr.fontWeight|<String:N>|폰트 굵기. (예: \"bold\" )|\n|infoArr.drawBorder|<String:N>|셀 테두리 지정. (예: true )|\n|infoArr.wordWrap|<String:N>|셀의 줄 바꿈. (예: \"true\" )|\n\n**Since:**\n\n5.0_2.3520B.20190308.173838\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 dataList\nvar options = {\n    common: {\n        fileName : \"user.xls\",\n        showProcess : true,\n        multipleSheet : true,\n        printSet : {\n            landScape : \"true\",\n            fitToPage : \"true\",\n            fitWidth : \"1\",\n            fitHeight : \"1\",\n            scale : \"222\"\n        }\n    },\n    excelInfo: [\n        {\n            dataListId : \"dataList1\",\n            sheetName : \"첫번째 sheet\",\n            removeColumns : \"1,3\",\n            foldColumns : \"2\",\n            startRowIndex : 3,\n            startColumnIndex : 0,\n            headerColor : \"#DBEEF3\",\n            bodyColor : \"#92CDDC\",\n            wframeId : \"wframe1\",\n            infoArr : [\n                { \n                    rowIndex : 1, colIndex : 3, rowSpan : 1, colSpan : 2, text : \"데이터표시\" , textAlign : \"center\"\n                }\n            ]\n        },\n        {\n            dataListId : \"dataList2\",\n            sheetName : \"두번째 sheet\",\n            removeColumns : \"1,3\",\n            foldColumns : \"2\",\n            startRowIndex : 3,\n            startColumnIndex : 0,\n            headerColor : \"#DBEEF3\",\n            bodyColor : \"#92CDDC\",\n            wframeId : \"wframe1\",\n            infoArr : [\n                { \n                    rowIndex : 1, colIndex : 3, rowSpan : 1, colSpan : 2, text : \"데이터표시\" , textAlign : \"center\"\n                }\n            ]\n        }\n    ]\n};\nWebSquare.util.multipleDataListDownload( options );\n\n (첫번째 sheet)\n    A            || C          D      E      F\n  ┌──────────────┐┌──────────┬──────┬──────┬────\n1 |              ||          |      |      |\n  |              ||          ┌──────┴──────┐\n2 |              ||          |   데이터표시   |\n  |              ||          └──────┬──────┘\n3 |              ||          |      |      |\n4 | a            || e        |      |      |     -> 그리드 헤더.\n5 | Renaissance  || 20111231 |      |      |     -> 그리드 데이터.\n6 | ... (생략)\n\n (두번째 sheet)\n    A            || C          D      E      F\n  ┌──────────────┐┌──────────┬──────┬──────┬────\n1 |              ||          |      |      |\n  |              ||          ┌──────┴──────┐\n2 |              ||          |   데이터표시   |\n  |              ||          └──────┬──────┘\n3 |              ||          |      |      |\n4 | a            || e        |      |      |     -> 그리드 헤더.\n5 | Renaissance  || 20111231 |      |      |     -> 그리드 데이터.\n6 | ... (생략)\n```\n\n"
      },
      "getTextNodeValue": {
        "!type": "fn(element: +Object)",
        "!doc": "주어진 html element의 text node 값을 반환합니다.\n\n**Parameters:**\n\n```element``` - ```Object:Y``` - html element\n\n**Return:**\n\n```String``` - text node string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.getTextNodeValue( xmlDoc);\n```\n\n"
      },
      "setInterval": {
        "!type": "fn(func: +Object, options: +Object)",
        "!doc": "실행할 함수를 함수를 setInterval로 등록하여 함수가 주기적으로 계속 실행되도록 한다.SPA모드에서 페이지 이동 시 이 함수로 등록한 타이머를 자동으로 제거한다.\n\n**Parameters:**\n\n```func``` - ```Function:Y``` - 실행할 함수\n\n```options``` - ```Object:N``` - options인자로는 아래와 같은 인자가 사용된다.\n\n|property|type|description|\n|:-|:-|:-|\n|options.key|<String:N>|timer를 구별하기 위한 키값. 이 값이 지정되지 않은 경우 키값을 func.toString().slice(0,30)을 키값으로 사용한다.|\n|options.delay|<Number:N>|setInterval의 2번째 인자값. func함수가 delay시간 이후에 실행되도록 한다.  기본값은 1이다.|\n|options.caller|<Object:N>|func내에서 this값을 caller로 변경한다.|\n|options.args|<Object:N>|func에 전달할 인자값. array형태로 인자를 전달한다.|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.setInterval(\"function(){alert(this.id);}\", {caller:grid1, delay:2000, key:\"interval1\"});\n```\n\n"
      },
      "openPopup": {
        "!type": "fn(url: string, options: +Object, params: +Object, target: +Object)",
        "!doc": "popup을 속성에 따라 만드는 함수입니다. createPopup과 인자만 다르고 같은 함수입니다.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - popup창의 url\n\n```options``` - ```Object:Y``` - popup의 options. (width, height 등)\n\n|property|type|description|\n|:-|:-|:-|\n|options.id|<String:N>|[default: ppo1] popup의 id|\n|options.type|<String:N>|[default: browserPopup] 팝업의 종류. 팝업이 브라우저에 랜더링된 형태에 따라서 iframePopup, wframePopup, browserPopup 3가지로 설정 가능함.(기존의 frameMode, useIFrame 속성과 동일 기능)|\n|options.width|<String:N>|[default: 500px] 팝업의 width 설정값.|\n|options.height|<String:N>|[default: 500px] 팝업의 height 설정값.|\n|options.top|<String:N>|[default: 100px] 팝업의 top 설정값. 팝업의 top 설정값. 팝업이 iframe 또는 wframe인 경우 브라우저를 기준,브라우저 window(분리된 창)인 경우 모니터를 기준으로 계산.|\n|options.left|<String:N>|[default: 100px] 팝업의 left 설정값. 팝업이 iframe 또는 wframe인 경우 브라우저를 기준, 브라우저 window(분리된 창)인 경우 모니터를 기준으로 계산.|\n|options.popupName|<String:N>|[default: WebSquarePopup] 팝업 객체의 이름으로 popup 프레임의 표시줄에 표시.|\n|options.modal|<String:N>|[default: false] modal을 이용해서 뒤 쪽 배경을 동작하지 않도록 만들기 위한 인자. false이면 뒤쪽의 컴포넌트가 사용 가능.|\n|options.useModalStack|<String:N>|[default: false] 여러 개의 팝업을 생성할 경우, 제일 마지막에 표시되는 팝업만 활성화. (true: 마지막 팝업만 활성화. false: 모든 팝업을 활성화.)|\n|options.style|<String:N>|[default: \"\"]     팝업의 스타일을 지정값. 값이 있으면 left top width height는 적용되지 않음.|\n|options.srcData|<String:N>|[default: null]   팝업 객체의 type 이 window 일 때 Parent 에서 넘길 xpath.|\n|options.destData|<String:N>|[default: null]   팝업 객체의 type 이 window 일 때 popup 에 설정할 xpath.|\n|options.dataObject|<Object:N>|popup에 설정할 변수의 데이터 타입과 데이터, 변수명을 입력하는 객체. (예) { type: [\"xml\",\"string\",\"json\",\"array\"], data: \"전달 데이터\" , name :\"변수명\"}|\n|options.xml|<String:N>|[default: null]   팝업에 넘길 xmlDocument의 string popup창에서 WebSquare.uiplugin.popup.getPopupParam() api를 사용하여 가져올수 있음.|\n|options.resizable|<String:N>|[default: false]  size조절을 유무  (팝업이 iframe 또는 wframe인 경우 해당)|\n|options.status|<String:N>|[default: false]  status 출력 유무 (팝업이 브라우저 window(분리된 창)인 경우 해당)|\n|options.menubar|<String:N>|[default: false]  menubar 출력 유무 (팝업이 브라우저 window(분리된 창)인 경우 해당)|\n|options.scrollbars|<String:N>|[default: false]  scrollbar 출력 유무 (팝업이 브라우저 window(분리된 창)인 경우 해당)|\n|options.title|<String:N>|[default: false]  title 출력 유무 (팝업이 브라우저 window(분리된 창)인 경우 해당)|\n|options.useMaximize|<String:N>|[default: true] 팝업이 iframe 또는 wframe인 경우, 상단 title 영역을 더블클릭 할 경우 최대화 시킬지 유무|\n|options.closeAction|<String:N>|[default: \"\"] 팝업이 iframe 또는 wframe인 경우, 닫기 버튼을 클릭 할 경우 팝업을 닫기전 호출된 사용자 정의 funcion 이름. 사용자정의 함수 에서 return true;시 팝업을 닫는다.|\n|options.className|<String:N>|[default: \"\"]     팝업이 iframe 또는 wframe인 경우, 팝업의 디자인을 변경하기 위한 class.|\n|options.fullscreen|<String:N>|[default: false]  fullscreen: true 설정시 전체화면으로 팝업을 띄웁니다. (IE전용)|\n|options.useControl|<String:N>|[default: false]  useControl: true 설정시 최소화, 최대화, 닫기 버튼을 사용할 수 있다.|\n|options.foldOnMinimized|<String:N>|[default: false]  foldOnMinimized: true 설정시 최소화 동작이 팝업 접기 동작으로 바뀐다.|\n|options.controls|<Object:N>|[default: { minimize: false, maximize: false, close: false }]     controls: 특정 컨트롤 버튼을 보이거나 숨길 수 있다. (useControl 속성이 true일 때 동작)|\n|options.foldSize|<Object:N>|[default: { width: 500 }]     foldSize: minimize(fold) 동작시의 크기를 지정할 수 있다. (|\n|options.useATagBtn|<Object:N>|[default: false] useATagBtn:true 설정 시 popup에서 a tag를 사용하는 close button, useATagBtn:false 설정 시 popup에서 div tag를 사용하는 close button|\n|options.disableCloseButton|<Object:N>|[default: false] disableCloseButton:true 설정 시 type이 window 또는 litewindow일 때 닫기 버튼을 비활성화, disableCloseButton:false 설정 시 닫기 버튼을 활성화|\n|options.alwaysOnTop|<Object:N>|[default: true] alwaysOnTop:true 설정 시 type이 window 또는 litewindow일 때 기존 팝업이 항상 위에 떠있게 하는 속성, alwaysOnTop:false 설정 시 닫기 버튼을 활성화|\n|options.popupUrl|<Object:N>|[default: \"popup.html\"] popup페이지 자체의 url 기본값은 popup.html|\n|options.windowDragMove|<Object:N>|[default: false] popup 창을 마우스로 이동시킬 때 마우스를 움직일 때마다 실시간으로 창이 마우스를 따라 이동하는 기능|\n|options.windowMoveType|<String:N>|[default: \"restrict\"] popup 드래그시 영역밖으로 나갈때 동작 속성 지정. \"restrict\"은 영역 밖으로 나가지 않도록 영역 안쪽으로 이동. \"overflow\"은 마우스 포인터 영역 밖으로 나간 시점 위치 그래도 고정.|\n|options.minVisibleWindowPixel|<String:N>|[default: 0] windowMoveType=\"overflow\"설정 후 popup 드래그시 영역 안에 보여질 최소한의 popup 크기|\n\n\n```params``` - ```Object:N``` - 팝업창에 넘길 parameter\n\n```target``` - ```Object:N``` - window객체. default로 window\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n requires(\"uiplugin.popup\"); //팝업을 사용하기 위해 반드시 포함되어야 한다.\n \n   // 새로 열릴 화면에 전달할 데이터를 지정 (dataObject를 통해 전달 가능)\n  \n  // 실제 전달할 데이터 정의 \n  var rowJSON = { \n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false},\n        \"Region\": \"Seoul\", \n        \"Carrier\": true\n        };\n  \n \n  var dataObject = {\n      \"type\" : \"json\", // 데이터 타입. \"json\" 권장 \n      \"name\" : \"paramTest\",  // 데이터를 가져오기 위한 key 값. popup에서 $p.getParameter( \"paramTest\" )로 깨내올 수 있음.\n      \"data\" : rowJSON // 실제 전달할 데이터\n      };\n \n \n   // 팝업 생성 옵션 지정\n  \n  var options = {  \n  \n        id : \"popup1\", \n        type : \"wframePopup\", \n        width: \"230px\", \n        height: \"250px\", \n        top: \"130px\", \n        left: \"200px\", \n        popupName : \"testPopup\", \n        modal : true, \n        resizable : true, \n        status : true, \n        menubar : false, \n        scrollbars : false, \n        title : false, \n        dataObject : dataObject\n \n    }; \n  \n   // 팝업 생성 \n \n    WebSquare.util.openPopup(\"/ComponentTest/innerPopup1.xml\",  options );\n\n\n\n   // 팝업창에서 전달 받은 데이터를 확인하는 예제\n   // \n   // var paramData = $p.getParameter(\"paramTest\");\n   // var data = JSON.stringify(paramData);\n   // alert(data);\n   //\n```\n\n"
      },
      "isOdd": {
        "!type": "fn(num: string)",
        "!doc": "주어진 정수가 홀수인지 판별합니다.\n\n**Parameters:**\n\n```num``` - ```String:Y``` - Number String\n\n**Return:**\n\n```Boolean``` - 홀수라면 true, 짝수라면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.isOdd(11);\n```\n\n"
      },
      "getChildNodeAt": {
        "!type": "fn(obj: +Object, idx: number)",
        "!doc": "객체 obj의 idx 번째 child node를 반환합니다.\n\n**Parameters:**\n\n```obj``` - ```Object:Y``` - 하위 객체를 조사할 객체\n\n```idx``` - ```Number:Y``` - 하위 객체의 index\n\n**Return:**\n\n```Object``` - obj의 idx 번째 child node\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.getChildNodeAt( xmlDoc, 1 );\n```\n\n"
      },
      "isString": {
        "!type": "fn(value: +Object)",
        "!doc": "주어진 값의 타입이 String인지 체크합니다.\n\n**Parameters:**\n\n```value``` - ```Obejct:Y``` - type 체크를 할 값\n\n**Return:**\n\n```Boolean``` - type이 String라면 true, 아니라면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar data = WebSquare.util.isString(\"12\");\ndata : true\n```\n\n"
      },
      "multipleExcelDownload": {
        "!type": "fn(options: +Object, infoArr: +Object)",
        "!doc": "그리드의 데이터를 엑셀 파일로 저장합니다. provider 설정 시에만 동작. sheetName은 중복되지 않게 설정해야 함. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 엑셀 다운로드 옵션\n\n\n파일 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|[default: excel.xls] 다운로드하려는 파일의 이름|\n|options.multipleSheet|<String:N>|[default: true] 다운로드시 gridView별 sheet분리 출력유무|\n|options.gridId|<String:N>|[default: true] 다운로드하려는 gridView의 ID|\n|options.wframeId|<String:N>|[default: true] 다운로드하려는 dataList가 포함된 WFrame의 ID<\/xmp>|\n|Excel|관련 옵션|null|\n\n\n```infoArr``` - ```Object:N``` - 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열\n\n|property|type|description|\n|:-|:-|:-|\n|infoArr.rowIndex|<Number:N>|내용을 표시할 행번호|\n|infoArr.colIndex|<Number:N>|내용을 표시할 열번호|\n|infoArr.rowSpan|<Number:N>|병합할 행의 수|\n|infoArr.colSpan|<Number:N>|병합할 열의 수|\n|infoArr.text|<String:N>|표시할 내용|\n|infoArr.textAlign|<String:N>|표시할 내용의 정렬 방법 (left, center, right)|\n|infoArr.fontSize|<String:N>|font size 설정 ( ex) \"20px\" )|\n|infoArr.fontName|<String:N>|font name 설정|\n|infoArr.color|<String:N>|font color 설정 ( ex) \"red\" )|\n|infoArr.fontWeight|<String:N>|font weight 설정 ( ex) \"bold\" )|\n|infoArr.drawBorder|<String:N>|cell의 border 지정 ( ex) true )|\n|infoArr.wordWrap|<String:N>|cell의 줄 바꿈 기능 ( ex) \"true\" )|\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드\nvar options = {\n    common: {\n        fileName : \"user.xls\",\n        showProcess : true,\n        multipleSheet : true,\n        printSet : {\n            landScape : \"true\",\n            fitToPage : \"true\",\n            fitWidth : \"1\",\n            fitHeight : \"1\",\n            scale : \"222\"\n        }\n    },\n    excelInfo: [\n        {\n            gridId : \"grid1\",\n            sheetName : \"첫번째 sheet\",\n            type : \"1\",\n            removeColumns : \"1,3\",\n            foldColumns : \"2\",\n            startRowIndex : 3,\n            startColumnIndex : 0,\n            headerColor : \"#DBEEF3\",\n            bodyColor : \"#92CDDC\",\n            dataProvider : \"com.provider.Provider1\",\n            providerRequestXml : \"<info><key value='TEST'/><info>\",\n            infoArr : [\n                { \n                    rowIndex : 1, colIndex : 3, rowSpan : 1, colSpan : 2, text : \"데이터표시\" , textAlign : \"center\"\n                }\n            ]\n        },\n        {\n            gridId : \"grid2\",\n            sheetName : \"두번째 sheet\",\n            type : \"1\",\n            removeColumns : \"1,3\",\n            foldColumns : \"2\",\n            startRowIndex : 3,\n            startColumnIndex : 0,\n            headerColor : \"#DBEEF3\",\n            bodyColor : \"#92CDDC\",\n            dataProvider : \"com.provider.Provider1\",\n            providerRequestXml : \"<info><key value='TEST'/><info>\",\n            infoArr : [\n                { \n                    rowIndex : 1, colIndex : 3, rowSpan : 1, colSpan : 2, text : \"데이터표시\" , textAlign : \"center\"\n                }\n            ]\n        }\n    ]\n};\nWebSquare.util.multipleExcelDownload( options );\n\n (첫번째 sheet)\n    A            || C          D      E      F\n  ┌──────────────┐┌──────────┬──────┬──────┬────\n1 |              ||          |      |      |\n  |              ||          ┌──────┴──────┐\n2 |              ||          |   데이터표시   |\n  |              ||          └──────┬──────┘\n3 |              ||          |      |      |\n4 | a            || e        |      |      |     -> 그리드 헤더.\n5 | Renaissance  || 20111231 |      |      |     -> 그리드 데이터.\n6 | ... (생략)\n\n (두번째 sheet)\n    A            || C          D      E      F\n  ┌──────────────┐┌──────────┬──────┬──────┬────\n1 |              ||          |      |      |\n  |              ||          ┌──────┴──────┐\n2 |              ||          |   데이터표시   |\n  |              ||          └──────┬──────┘\n3 |              ||          |      |      |\n4 | a            || e        |      |      |     -> 그리드 헤더.\n5 | Renaissance  || 20111231 |      |      |     -> 그리드 데이터.\n6 | ... (생략)\n```\n\n"
      },
      "getBoolean": {
        "!type": "fn(boolstr: string)",
        "!doc": "ture면 true를 반환하고 false면 false를 반환합니다.\n\n**Parameters:**\n\n```boolstr``` - ```String:Y``` - boolean string\n\n**Return:**\n\n```Boolean``` - \"ture\"면 true, \"false\"면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.getBoolean(\"true\");\n```\n\n"
      },
      "getDate": {
        "!type": "fn(str: string)",
        "!doc": "Date String에서 특수문자를 제거합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Date String\n\n**Return:**\n\n```String``` - 입력받은 str에서 특수문자를 제거한 String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.getDate(\"2012/01/01\");\ndate : 20120101\n```\n\n"
      },
      "closePopup": {
        "!type": "fn(id: string)",
        "!doc": "id를 찾아서 popup을 닫아줍니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - popup의 id\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.closePopup(\"popup1\");\n```\n\n"
      },
      "getData": {
        "!type": "fn(key: string)",
        "!doc": "특정 key로 등록된 data를 가져온다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 꺼내오고자 하는 data의 key값\n\n**Return:**\n\n```Object``` - key에 해당하는 data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n var itemList = WebSquare.util.getData(\"item1\").itemList;\n\n```\n\n"
      },
      "encodeParameter": {
        "!type": "fn()",
        "!doc": "config encodeParameter 옵션을 활성화 시켰을 때 uri로 넘어온 parameter를 암호화하는 함수\n\n**Return:**\n\n```String``` - 인자로 넘어온 string을 암호화해서 반환.\n\n**Since:**\n\n5.0_2.3648B.20190530.164616\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "toHexColor": {
        "!type": "fn(rgb: string)",
        "!doc": "rgb(r, g, b) 형식의 string을 입력받아 #RRGGBB 형식의 color code를 반환합니다.\n\n**Parameters:**\n\n```rgb``` - ```String:Y``` - rgb(r, g, b) 형식의 string\n\n**Return:**\n\n```String``` - #RRGGBB 형식의 color code\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.toHexColor(\"rgb(17,59,158)\");\n```\n\n"
      },
      "isPopup": {
        "!type": "fn()",
        "!doc": "현재 Window가 popup이면 true 아니면 false를 반환합니다.\n\n**Return:**\n\n```boolean``` - 팝업창인지 여부를 반환합니다.\n\n**Since:**\n\n2.0_1.3043B.20130527.152219\n\n**Sample:**\n\n```javascript\n\nvar ispopup = WebSquare.util.isPopup();\n```\n\n"
      },
      "setData": {
        "!type": "fn(key: string, data: +Object)",
        "!doc": "특정 key로 data를 등록한다. \n\n입력 받은 data는 웹스퀘어가 관리하는 변수 목록에 전역변수로 등록된다. \n\nSPA로 페이지 이동 시 key와 data가 전부 자동으로 정리된다..\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 등록된 data를 제어하기 위한 key값\n\n```data``` - ```Object:Y``` - 등록할 data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n window[\"common\"] = {};\n common.itemList = []; common.func = function(){};\n WebSquare.util.setData(\"item1\", common);\n```\n\n"
      },
      "setNumber": {
        "!type": "fn(str: string)",
        "!doc": "입력된 숫자에서 콤마(',')을 추가한 문자열로 변환한 다음 반환 합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Number string\n\n**Return:**\n\n```String``` - 입력된 string에 자릿점을 추가한 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.setNumber ( 1234652 );\ndata : 1,234,652\n```\n\n"
      },
      "url": {
        "!type": "fn(w2xPath: string, options: +Object)",
        "!doc": "화면 이동 시 url전체를 전달하는 대신 w2xPath에 해당하는 경로만 전달하여 페이지를 이동할 수 있게 해주는 함수. \n\noptions에 추가 인자를 통해 spa로 페이지를 이동할 수 있다.\n\n**Parameters:**\n\n```w2xPath``` - ```String:Y``` - xml 파일의 경로\n\n```options``` - ```Object:N``` - options로 올 수 있는 값은 아래와 같습니다.\n\n|property|type|description|\n|:-|:-|:-|\n|options.spa|<Boolean:N>|페이지 이동 시 spa = true인 경우 w2xPath를 해시(#)로 전달하며, spa = false인 경우에는 w2xPath를 서치(?)로 전달합니다. spa 옵션값을 명시하지 않은 경우, config.xml의 spa값을 사용합니다. config.xml에 spa 값이 설정되어 있지 않은 경우에는 false입니다.|\n|options.forceReload|<Boolean:N>|페이지 이동 후 브라우저를 강제로 갱신할 것인지에 대한 여부. spa = true인 경우에만 의미가 있는 옵션입니다. spa로 페이지를 계속 이동하다보면 전역 자원이 쌓여서 메모리 릭이 발생할 수 있는데, 이런 경우 forceReload=true 로 설정하면 페이지 이동과 동시에 브라우저가 갱신되어 메모리 릭이 사라지고 전역 자원을 초기화 시킬 수 있습니다.|\n|options.replaceHistory|<Boolean:N>|브라우저의 히스토리를 덮어 쓸 것인지에 대한 여부. true인 경우 내부적으로 location.replace 함수를 호출하며 false인 경우에는 location.assign함수를 호출합니다.|\n|options.param|<Object:N>|페이지 이동 시 추가로 전달할 인자들을 json형태로 나타냅니다.  객체의 값은 반드시 string 형식이어야 합니다.|\n|options.shortURL|<Boolean:N>|url을 w2xPath에 해당하는 경로만 전달할 것인지 http://... 와 같이 전체 경로를 전달할 것인지에 대한 옵션. 옵션 값을 지정하지 않은 경우 엔진 내부에서 자동으로 판단합니다.|\n|options.transition|<String:N>|페이지이동시 화면전환효과를 지정할 수 있습니다. [fadeout , slideup]|\n|options.urlHashText|<String:N>|spa = true인 경우, 페이지 이동 후 주소창에 표시되는 url에서 hash부분을 다르게 표시하고자 할 때 사용하는 옵션입니다. 단, ?&# 세 종류의 문자는 절대 포함되어선 안 됩니다.|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n var param1 = { \"name\" = \"123\", \"ID\"= \"asdf\" }; var param2 = { \"addr\" = \"abcd\", \"PW\"= \"dddx\" };\n WebSquare.util.url(\"/folder1/bar.xml\", {\"spa\" : true, \"replaceHistory\" : true, \"param\" : param1}); // bar.xml을 SPA로 페이지 이동하면서 name,ID 파라메터 전달\n WebSquare.util.url(\"/folder1/bar.xml\", {\"spa\" : true, \"forceReload\" : true, \"param\" : param2}); // bar.xml을 SPA로 이동하면서 브라우저를 재로딩하고, addr,PW 파라메터 전달\n WebSquare.util.url(\"/folder1/bar.xml\", {\"spa\" : true, \"forceReload\" : true, \"param\" : param2,\"transition\":\"fadeout\"}); // bar.xml을 SPA로 이동하면서 브라우저를 재로딩하고, addr,PW 파라메터 전달,화면전환 fadeout\n WebSquare.util.url(\"/folder1/bar.xml\", {\"spa\" : true, \"urlHashText\" : \"pId=bar\"}); // SPA 페이지 이동 후 브라우저 상단 url이 http://xxx/websquare.html#pId=bar 으로 보이게 됩니다.\n```\n\n"
      },
      "getStringByteSize": {
        "!type": "fn(str: string, ignoreChar: string)",
        "!doc": "주어진 string의 byte size를 반환합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - byte size를 알아낼 string\n\n```ignoreChar``` - ```String:N``` - byte size 체크시 무시할 문자\n\n**Return:**\n\n```Number``` - byte size\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.getStringByteSize(\"websquare\");\ndata : 9\n```\n\n"
      },
      "parseInt": {
        "!type": "fn(str: string, defaultValue: number)",
        "!doc": "parseInt를 호출합니다. defaultValue가 주어지고 parseInt결과가 NaN이면 defaultValue를 반환합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Number string\n\n```defaultValue``` - ```Number:N``` - parseInt 결과가 NaN일때 반환할 기본 값\n\n**Return:**\n\n```Number``` - 주어진 문자를 숫자로 변환한 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data = WebSquare.util.parseInt(num, 0);\n```\n\n"
      },
      "setTimeout": {
        "!type": "fn(func: +Object, options: +Object)",
        "!doc": "실행할 함수를 함수를 setTimer로 등록하여 일정 시간 후에 실행되도록 한다.    SPA모드에서 페이지 이동 시 이 함수로 등록한 타이머를 자동으로 제거한다.\n\n**Parameters:**\n\n```func``` - ```Function:Y``` - 실행할 함수\n\n```options``` - ```Object:N``` - options인자로는 아래와 같은 인자가 사용된다.\n\n|property|type|description|\n|:-|:-|:-|\n|options.key|<String:N>|timer를 구별하기 위한 키값. 이 값이 지정되지 않은 경우 키값을 func.toString().slice(0,30)을 키값으로 사용한다.|\n|options.delay|<Number:N>|setTimer의 2번째 인자값. func함수가 delay시간 이후에 실행되도록 한다.  기본값은 1이다.|\n|options.caller|<Object:N>|func내에서 this값을 caller로 변경한다.|\n|options.args|<Object:N>|func에 전달할 인자값. array형태로 인자를 전달한다.|\n|options.before_call|<function:N>|func 함수가 실행되기 직전에 실행할 함수. func함수와 마찬가지로 data를 인자로 받는다.|\n|options.callback|<function:N>|func함수가 실행된 후에 실행할 함수. func함수의 return값을 인자로 받는다|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.setTimeout(function(){alert(this.id);}, {caller:grid1, delay:200, key:timer1});\n```\n\n"
      },
      "getEventTarget": {
        "!type": "fn(this: +Object)",
        "!doc": "이벤트로 등록된 함수에서 인자로 this를 넘겨 getEventTarget API를 호출할 경우 호출한 컴포넌트 정보를 반환.\n\n**Parameters:**\n\n```this``` - ```Object:Y``` - 함수 내의 this 객체\n\n**Return:**\n\n```Object``` - 웹스퀘어 컴포넌트의 pluginName 및 id 정보를 갖는 객체\n\n**Since:**\n\n5.0_4.4239B.20201127.151601\n\n**Sample:**\n\n```javascript\n(사용 예)\n   var info = WebSquare.util.getEventTarget(this);\n\n(반환 정보)\n{\n     \"pluginName\": \"플러그인 이름\",\n      \"id\": \"개발 소스에 입력한 실제 id\"\n}\n```\n\n"
      },
      "isNull": {
        "!type": "fn(value: +Object)",
        "!doc": "주어진 값이 null인지 체크합니다.\n\n**Parameters:**\n\n```value``` - ```Obejct:Y``` - null 체크를 할 값\n\n**Return:**\n\n```Boolean``` - null이라면 true, 아니라면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "setDate": {
        "!type": "fn(str: string)",
        "!doc": "Date String에 길이가 1인 특수문자를 추가합니다. 특수문자의 기본 값은 / 입니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - Date String\n\n**Return:**\n\n```String``` - 입력받은 str에서 특수문자를 추가한 String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar data1 = WebSquare.util.setDate (\"20120101\");\ndata1 : 2012/01/01\nvar data2 = WebSquare.util.setDate (\"20120101\", \".\");\ndata1 : 2012.01.01\n```\n\n"
      },
      "first": {
        "!type": "fn(elem: +Object)",
        "!doc": "주어진 html 객체의 첫 번째 child node를 반환합니다.\n\n**Parameters:**\n\n```elem``` - ```Object:Y``` - 하위 노드를 검사할 객체\n\n**Return:**\n\n```Object``` - elem의 첫 번째 child node\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.util.first( xmlDoc);\n```\n\n"
      }
    },
    "xml": {
      "encode": {
        "!type": "fn(s: string)",
        "!doc": "encode하는 함수로써 & < > '  CR LF 를 encode 합니다.\n\n**Parameters:**\n\n```s``` - ```String:Y``` - encode 대상 문자열\n\n**Return:**\n\n```String``` - string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.xml.encode( \"&\" )\r\n\n```\n\n"
      },
      "appendChild": {
        "!type": "fn(descNode: +Object, srcNode: +Object)",
        "!doc": "destNode의 하위 노드로 srcNode를 추가합니다.\n\n**Parameters:**\n\n```descNode``` - ```Object:Y``` - 부모 노드\n\n```srcNode``` - ```Object:Y``` - 자식 노드\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar node1 = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar doc = WebSquare.xml.parse(\"<author>J. K. Rowling<\/author>\");\r\nvar node2 = WebSquare.xml.findNode(doc, \"author\");\r\nWebSquare.xml.appendChild( node1, node2 );  \r\n        \r\nnode1은 다음과 같다.  \r\n<book idx=\"1\">\r\n    <title lang=\"eng\">Harry Potter<\/title>\r\n    <price>29.99<\/price>\r\n    <author>J. K. Rowling<\/author>\r\n<\/book>\r\n\n```\n\n"
      },
      "hasChildElement": {
        "!type": "fn(domNode: +Object)",
        "!doc": "element가 하위 노드를 가지는지 여부를 반환합니다.\n\n**Parameters:**\n\n```domNode``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n**Return:**\n\n```Boolean``` - childNode 가 존재하는지 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc1 = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar doc2 = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book/title\" );\r\nvar hasChildYn1 = WebSquare.xml.hasChildElement(doc1);\r\nvar hasChildYn2 = WebSquare.xml.hasChildElement(doc2);\r\n        \r\nhasChildYn1은 true, hasChildYn2는 false.\n```\n\n"
      },
      "getCDataNodeValue": {
        "!type": "fn(element: +Object)",
        "!doc": "element의 CData Node 값을, 존재하지 않으면 null을 반환.\n\n**Parameters:**\n\n```element``` - ```Object:Y``` - Document Element(node)\n\n**Return:**\n\n```String``` - CDataNode Value 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n        <html>\r\n            <![CDATA[ <b>Stunning!<\/b>]]> \r\n        <\/html>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book/html\" );\r\nvar value =  WebSquare.xml.getCDataNodeValue( doc );\r\n        \r\nvalue는 <b>Stunning!<\/b>이다.\n```\n\n"
      },
      "indent": {
        "!type": "fn(obj: +Object, type: string)",
        "!doc": "XML Document를 XML String으로 변환합니다. \r\n\nserialize 함수와 다르게 줄바꿈을 제공합니다.\n\n**Parameters:**\n\n```obj``` - ```Document:Y``` - XML String으로 변환할 문자열\n\n```type``` - ```String:Y``` - type을 적지 않았을 경우 WebSquare.xml.serialize을 실행하여 그 결과에 줄 바꿈 문자를 넣고, type이 'undefined'가 아닐 경우 재귀적으로 xml을 파싱한다.\n\n**Return:**\n\n```String``` - XML String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar xmlDoc = WebSquare.xml.indent(\"<data><title>WebSquare<\/title><\/data>\");\n<data>\r\n    <title>WebSquare<\/title>\r\n<\/data>\n```\n\n"
      },
      "getChildrenByTagName": {
        "!type": "fn(element: +Object, name: string, uri: string)",
        "!doc": "element의 하위 노드 중 tagName이 인자와 일치하는 node들을 반환합니다.\n\n**Parameters:**\n\n```element``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```name``` - ```String:Y``` - nodeName 문자열\n\n```uri``` - ```String:Y``` - namespace uri ( 존재 할 경우 namespace 일치 여부도 확인 )\n\n**Return:**\n\n```Array``` - 일치하는 Document Element(node) 들의 Array\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar childs =  WebSquare.xml.getChildrenByTagName( doc, \"title\" );\r\n        \r\nchilds.length은 1이다.\r\nchilds[0] 노드는 다음과 같다.\r\n<title lang=\"eng\">Harry Potter<\/title>\r\n\n```\n\n"
      },
      "findNodes": {
        "!type": "fn(doc: +Object, path: string)",
        "!doc": "XPath로 검색하여 일치하는 노드 목록을 Array로 반환합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```path``` - ```String:Y``` - XPath\n\n**Return:**\n\n```Array``` - Document Element(node)를 담은 Array 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore\" );\r\nvar nodes = WebSquare.xml.findNodes( doc, \"book\" );\r\n        \r\nnodes.length 는 2이다. \r\nnodes[0]는 다음과 같다\r\n<book idx=\"1\">\r\n    <title lang=\"eng\">Harry Potter<\/title>\r\n    <price>29.99<\/price>\r\n<\/book>\r\nnodes[1]은 다음과 같다.\r\n<book idx=\"2\">\r\n    <title lang=\"eng\">Learning XML<\/title>\r\n    <price>39.95<\/price>\r\n<\/book>\r\n\n```\n\n"
      },
      "getString": {
        "!type": "fn(doc: +Object, key: string)",
        "!doc": "XPath로 검색한 node element에서 value Attribute 값을 조회합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath 문자열\n\n**Return:**\n\n```String``` - 조회 결과 값. 값이 없으면 빈 문자열 반환.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price value=\"USD\">29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar value = WebSquare.xml.getString( doc, \"price\" );\r\n        \r\nvalue는 USD이다.\n```\n\n"
      },
      "parse": {
        "!type": "fn(obj: string, namespace: bool)",
        "!doc": "XML String을 XML Document로 변환합니다.\n\n**Parameters:**\n\n```obj``` - ```String:Y``` - XML Document로 변환할 문자열\n\n```namespace``` - ```Boolean:N``` - namespace를 파싱 할 지 여부\n\n**Return:**\n\n```Document``` - XML Document\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar xmlDoc = WebSquare.xml.parse(\"<data><title>WebSquare<\/title><\/data>\", false);\r\n\n```\n\n"
      },
      "decode": {
        "!type": "fn(s: string)",
        "!doc": "decode하는 함수로써 < > '  & \\n에 해당하는 문자들은 decode합니다.\n\n**Parameters:**\n\n```s``` - ```String:Y``` - decode 대상 문자열\n\n**Return:**\n\n```String``` - string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.xml.decode(\"&amp;\");\r\n\n```\n\n"
      },
      "getChildren": {
        "!type": "fn(doc: +Object, key: string)",
        "!doc": "xpath로 노드를 검색하여 하위 노드를 반환합니다. \r\n\n반환되는 값은 다음과 같은 형태입니다. \r\n\n[{@tagName : Node , value : value1 } , {@tagName : Node , value : value2 }]\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath 문자열\n\n**Return:**\n\n```Array``` - XML정보가 들어있는 Oject Array\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price value=\"USD\">29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore\" );\r\nvar dataArr = WebSquare.xml.getChildren(doc, \"book\");\r\n\r\ndataArr.length는 2이다.\r\ndataArr[0][\"@tagName\"]은 title, dataArr[0][\"lang\"]은 eng이다.\r\ndataArr[1][\"@tagName\"]은 price, dataArr[1][\"value\"]는 USD이다.\r\n\n```\n\n"
      },
      "getValue": {
        "!type": "fn(doc: +Object, key: string, attribute: string)",
        "!doc": "첫번째 인자로 주어진 Document 또는 Element를 기준으로 XPath로 조회한 node의 attribute나 text노드의 값을 조회합니다.\r\n\n 마지막 인자(attribute)가 없는 경우 Text Node나 CData Node를 조회하고, 마지막 인자가 있는 경우 attribute 값을 조회합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath 문자열\n\n```attribute``` - ```String:Y``` - 값을 조회할 attribut e이름. 지정하지 않으면 Text 노드나 CData 노드에서 값을 조회한다.\n\n**Return:**\n\n```String``` - 조회 결과 값. 값이 없으면 빈 문자열 반환.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar value = WebSquare.xml.getValue( doc, \"title\" );\r\n        \r\nvalue는 Harry Potter이다. \r\n\n```\n\n"
      },
      "serialize": {
        "!type": "fn(dom: +Object)",
        "!doc": "XML Document를 XML String으로 변환합니다.\n\n**Parameters:**\n\n```dom``` - ```Document:Y``` - XML String으로 변환할 XML Document\n\n**Return:**\n\n```String``` - XML String\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar xmlStr = WebSquare.xml.serialize(xmlDoc);\r\n\n```\n\n"
      },
      "getTextNodeValue": {
        "!type": "fn(element: +Object)",
        "!doc": "element의 Text Node를, 존재하지 않으면 null을 반환합니다.\n\n**Parameters:**\n\n```element``` - ```Object:Y``` - Document Element(node)\n\n**Return:**\n\n```String``` - TextNode Value 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book/title\" );\r\nvar value =  WebSquare.xml.getTextNodeValue( doc );\r\n        \r\nvalue는 Harry Potter이다.\r\n\n```\n\n"
      },
      "setAttribute": {
        "!type": "fn(doc: +Object, key: string, value1: string, value2: string)",
        "!doc": "첫번째 인자로 주어진 Document 또는 Element를 기준으로 attribute를 설정합니다.\r\n\n마지막 인자(value2)가 없는 경우 현재 Element(Document의 경우 최상위 Element)에 속성값을 설정하고\r\n\n마지막 인자(value2)가 있는 경우 두번째 인자(key)를 XPath로 사용하여 조회한 node에 속성값을 설정합니다.\r\n\nXPath로 검색한 node element에서 Attribute를 조회합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath. value2가 설정되어 있지 않으면 값을 설정할 attribute로 사용됨. 이 경우 Attribute로 사용될 수 있는 문자만 지정되어야 함.\n\n```value1``` - ```String:Y``` - 값을 설정할 attribute이름. value2가 설정되어 있지 않으면 설정할 값으로 사용됨\n\n```value2``` - ```String:Y``` - 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nWebSquare.xml.setAttribute(doc, \"formats\" , \"Hardcover\");\r\nWebSquare.xml.setAttribute(doc, \"price\" , \"value\" , \"USD\");\r\n\r\nModel의 변경된 데이터는 다음과 같다.\r\n        \r\n<bookstore>\r\n    <book idx='1' formats='Hardcover'>\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price value=\"USD\">29.99<\/price>\r\n    <\/book>\r\n    ...중략...\r\n<\/bookstore>\n```\n\n"
      },
      "setString": {
        "!type": "fn(doc: +Object, key: string, value: string)",
        "!doc": "XPath로 검색한 node element에서 value Attribute 값을 설정합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath 문자열\n\n```value``` - ```String:Y``` - 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nWebSquare.xml.setString(doc, \"price\" , \"USD\");\r\n        \r\n<bookstore>\r\n    <book idx='1'>\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price value=\"USD\">29.99<\/price>\r\n    <\/book>\r\n    ...중략...\r\n<\/bookstore>\n```\n\n"
      },
      "getAttribute": {
        "!type": "fn(doc: +Object, key: string, attribute: string)",
        "!doc": "첫번째 인자로 주어진 Document 또는 Element를 기준으로 attribute를 조회합니다.\r\n\n마지막 인자(attribute)가 없는 경우 현재 Element(Document의 경우 최상위 Element)에 두번째 인자(key)를이용하여 attribute를 조회하고\r\n\n마지막 인자(attribute)가 있는 경우 두번째 인자(key)를 XPath로 사용하여 조회한 node에 세번째 인자(attribute)를 이용하여 attribute를 조회합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath. attribute가 설정되어 있지 않으면 값을 설정할 attribute로 사용됨. 이 경우 Attribute로 사용될 수 있는 문자만 지정되어야 함.\n\n```attribute``` - ```String:Y``` - 값을 조회할 attribute이름.\n\n**Return:**\n\n```String``` - 조회 결과 값. 값이 없으면 빈 문자열 반환.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar value1 = WebSquare.xml.getAttribute( doc, \"idx\" );\r\nvar value2 = WebSquare.xml.getAttribute( doc, \"title\", \"lang\" );\r\n        \r\nvalue1는 1, value2는 eng이다.\n```\n\n"
      },
      "setValue": {
        "!type": "fn(doc: +Object, key: string, value1: string, value2: string)",
        "!doc": "첫번째 인자로 주어진 Document 또는 Element를 기준으로 XPath로 조회한 node에 attribute나 text노드를 추가합니다.\r\n\n마지막 인자가 없는 경우 value1값을 Text Node에 추가하고, 마지막 인자가 있는 경우 value1을 attribute이름으로 사용합니다.             \r\n\nXPath로 조회한 node가 존재하지 않으면 생성을 시도한 다음 작업을 수행합니다. 노드를 생성하기 위해서는 XPath가 노드명으로만 구성되어야 합니다. \r\n\n노드를 생성하지 못하게 되면 아무런 작업을 수행하지 않습니다.(에러도 발생하지 않습니다.)\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```key``` - ```String:Y``` - XPath 문자열\n\n```value1``` - ```String:Y``` - 값을 설정할 attribute 이름. value2가 지정되어 있지 않으면 Text 노드 값으로 사용된다.\n\n```value2``` - ```String:Y``` - 추가할 값. 지정하지 않으면 Text 노드나 CData 노드를 삭제한 후 value1의 값을 Text 노드에 추가\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nWebSquare.xml.setValue(doc, \"title\" , \"Harry Potter and the Philosopher's Stone\");\r\nWebSquare.xml.setValue(doc, \"price\" , \"value\" , \"USD\");\r\n\r\nModel의 변경된 데이터는 다음과 같다.\r\n        \r\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter and the Philosopher's Stone<\/title>\r\n        <price value=\"USD\">29.99<\/price>\r\n    <\/book>\r\n    ...중략...\r\n<\/bookstore>\r\n\n```\n\n"
      },
      "getFirstChildElement": {
        "!type": "fn(element: +Object)",
        "!doc": "element에서 하위 노드들 중 첫번째 element node를 반환합니다. \r\n\nElement node가 존재하지 않으면 null을 반환합니다.\n\n**Parameters:**\n\n```element``` - ```Object:Y``` - Document Element(node)\n\n**Return:**\n\n```Object``` - Document Element(node) 또는 없을 경우 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar child =  WebSquare.xml.getFirstChildElement( doc );\r\n        \r\nchild 노드는 다음과 같다.\r\n<title lang=\"eng\">Harry Potter<\/title>\r\n\n```\n\n"
      },
      "findNode": {
        "!type": "fn(doc: +Object, path: string)",
        "!doc": "XPath로 검색하여 일치하는 노드 중 첫번째 노드를 반환합니다.\n\n**Parameters:**\n\n```doc``` - ```Document:Y``` - Document 또는 Document Element(node)\n\n```path``` - ```String:Y``` - XPath 문자열\n\n**Return:**\n\n```Object``` - Document Element(node) 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar node = WebSquare.xml.findNode( doc, \"title\" );\r\n        \r\nnode는 다음과 같다.\r\n                \r\n<title lang=\"eng\">Harry Potter<\/title>\r\n\n```\n\n"
      },
      "getFirstChildElements": {
        "!type": "fn(element: +Object)",
        "!doc": "element에서 하위 노드를 배열로 반환합니다. \r\n\nElement node가 존재하지 않으면 빈 Array를 반환합니다.\n\n**Parameters:**\n\n```element``` - ```Object:Y``` - Document Element(node)\n\n**Return:**\n\n```Array``` - 자식 Element(node)들의 Array\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 바인드된 데이터가 다음과 같다.\n<bookstore>\r\n    <book idx=\"1\">\r\n        <title lang=\"eng\">Harry Potter<\/title>\r\n        <price>29.99<\/price>\r\n    <\/book>\r\n    <book idx=\"2\">\r\n        <title lang=\"eng\">Learning XML<\/title>\r\n        <price>39.95<\/price>\r\n    <\/book>\r\n<\/bookstore>\r\nvar doc = WebSquare.ModelUtil.findInstanceNode( \"bookstore/book\" );\r\nvar child =  WebSquare.xml.getFirstChildElement( doc );\r\n        \r\nchild 노드는 다음과 같다.\r\n<title lang=\"eng\">Harry Potter<\/title>\n```\n\n"
      }
    },
    "uiplugin": {
      "gridLayout": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setLayout": {
          "!type": "fn(itemIdx: number, columnInfo: number, rowInfo: number)",
          "!doc": "gridlayout item의 gridColumn, gridRow의 속성을 변경.\n\n                적응형이 설정된 경우에는 해상도별 layout정보를 세미콜론(;)으로\n\n                구분하여 전달.\n\n**Parameters:**\n\n```itemIdx``` - ```Number:Y``` - gridlayout item의 index\n\n```columnInfo``` - ```Number:Y``` - 변경하고자 하는 column값\n\n```rowInfo``` - ```Number:Y``` - 변경하고자 하는 row값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nthis.setLayout(0, 1, 1);\n실행 결과: itemIdx에 해당하는 gridlayout item의 column과 row값을 인자로 넘어온 columnInfo와 rowInfo값으로 변경시킨 후에\n         해상도별 column과 row값을 세미콜론(;)으로 구분하여 모두 반환한다.\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getLayout": {
          "!type": "fn(itemIdx: number)",
          "!doc": "gridlayout item의 gridColumn, gridRow의 속성을 변경하지 않고,\n\n                적응형이 설정된 경우에는 해상도별 layout정보를 세미콜론(;)으로\n\n                구분하여 전달.\n\n**Parameters:**\n\n```itemIdx``` - ```Number:Y``` - gridlayout item의 index\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nthis.getLayout(0);\n실행 결과: itemIdx에 해당하는 gridlayout item의 해상도별 column과 row값을 세미콜론(;)으로 구분하여 모두 반환한다.\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setGap": {
          "!type": "fn(gapStr: string, valueStr: string)",
          "!doc": "columnGap이나 rowGap의 속성을 변경.\n\n                적응형이 설정된 경우에는 현재 화면에서\n\n                활성화된 gap을 수정.\n\n**Parameters:**\n\n```gapStr``` - ```String:Y``` - \"col\" 혹은 \"row\"\n\n```valueStr``` - ```String:Y``` - 변경하고자 하는 값 (px,em,% 등)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nthis.setGap(\"col\", \"1px\");\n실행 결과: 현재 해상도에 설정된 columnGap의 값이 1px이 된다.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTemplate": {
          "!type": "fn()",
          "!doc": "gridlayout template의 gridTemplateColumns,\n\n                gridTemplateRows의 속성을 변경하지 않고, 적응형이\n\n                설정된 경우에는 해상도별 temaplate정보를 세미콜론(;)\n\n                으로 구분하여 전달.\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nthis.getTemplate();\n실행 결과: \"templateColumnsInfo: 100px 30px 1fr:100px:100px, templateRowsInfo: 1fr 1fr 1fr:300px:100px\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "setActiveLayout": {
          "!type": "fn(itemIdx: number, columnInfo: number, rowInfo: number)",
          "!doc": "gridlayout item의 gridColumn, gridRow의 속성을 변경.\n\n                적응형이 설정된 경우에는 현재 화면에서 활성화된 layout을 수정.\n\n**Parameters:**\n\n```itemIdx``` - ```Number:Y``` - gridlayout item의 index\n\n```columnInfo``` - ```Number:Y``` - 변경하고자 하는 column값 (0이면 바꾸지 않음)\n\n```rowInfo``` - ```Number:Y``` - 변경하고자 하는 row값 (0이면 바꾸지 않음)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nthis.setActiveLayout(0, 1, 1);\n실행 결과: itemIdx에 해당하는 gridlayout item의 column과 row값을 인자로 넘어온 columnInfo와 rowInfo값으로 변경시켜준다.\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_4.4598B.20220223.170449\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "roundRectangle": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "roundRectangle 의 넓이(width) 및 높이(height)를 설정.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 넓이\n\n```height``` - ```Number:Y``` - 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\nroundRectangle1.setSize(100,50);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "slider": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "슬라이더 현재 값을 반환.\n\n**Return:**\n\n```Number``` - 현재 슬라이더의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n var returnValue = slider1.getValue();\n// returnValue는 현재 slider의 thumb의 위치에 해당하는 값.\n```\n\n"
        },
        "setMaxValue": {
          "!type": "fn(value: number)",
          "!doc": "슬라이더 상의 최대값을 동적으로 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - 슬라이더 상에 표시되는 최대값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n slider1.setMaxValue(60);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: number)",
          "!doc": "인자로 받은 값을 슬라이더에 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - 슬라이더에 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 0~100(minValue ~ maxValue)까지 범위에서 선택하며, increment가 10인 경우.\n slider1.setValue(100);\n// thumb의 위치가 오른쪽 끝으로 이동.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setMinValue": {
          "!type": "fn(value: number)",
          "!doc": "슬라이더 상의 최소값을 동적으로 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - 슬라이더 상에 표시되는 최소값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n slider1.setMinValue(15);\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "textbox": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getDataType": {
          "!type": "fn()",
          "!doc": "dataType 속성 값을 반환.\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\n//아래와 같이 textbox가 정의 된 경우\n<w2:textbox id=\"textbox1\" style=\"position: relative;\" dataType=\"text\" label=\"이름\"><\/w2:textbox>\n\nvar returnValue = textbox1.getDataType();\n// (반환 예) \"text\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ntextbox1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 클래스를 추가.\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 클래스 명.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n componentId.addClass(\"selected\");\n 컴포넌트에 selected 라는 class를 추가.\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에서 className 클래스를 삭제. \n\n기본 설정은 addClass API를 통해 추가 된 클래스만 삭제 가능. \n\n직접 정의된 클래스를 삭제할 경우, config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml 파일에 아래 설정을 추가. \n| <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 class를 정의한 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래와 같이 정의.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class 삭제\ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setAttributeNode": {
          "!type": "fn(nodeName: string, nodeValue: string)",
          "!doc": "nodeName에 해당하는 하위 노드에 값을 설정.\n\nnodeName으로 사용할 수 있는 값은 사용자가 추가한 속성목록이다.\n\n**Parameters:**\n\n```nodeName``` - ```String:Y``` - 값을 설정할 하위 노드의 이름\n\n```nodeValue``` - ```String:Y``` - 노드에 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n textbox1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getFormatValue": {
          "!type": "fn()",
          "!doc": "format이 적용된 값을 반환.\n\n**Return:**\n\n```String``` - 포맷이 적용된 값\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// 아래와 같이 displayFormat을 적용.\n<w2:textbox id=\"textbox1\" dataType=\"number\" displayFormat=\"#,###.00\" label=\"100000\" style=\"position: relative;\"><\/w2:textbox>\n\nvar returnValue = textbox1.getFormatValue();\n// (반환 값) \"100,000.00\"\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 name key와 textbox1 컴포넌트의 value를 binding 하는 경우\ntextbox1.setRef(\"data:dataMap1.name\");\n\n//InstanceData의 res/userData/name 과 연동할 경우.\ntextbox1.setRef(\"res/userData/name\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setDisplayFormatter": {
          "!type": "fn(formatter: string)",
          "!doc": "컴포넌트의 displayFormatter 속성을 설정.\n\n**Parameters:**\n\n```formatter``` - ```String:Y``` - 새로 설정 할 formatter 함수명\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\n// 아래와 같이 textbox가 정의 된 경우\n<w2:textbox id=\"textbox1\" label=\"hong gil dong\" style=\"position: relative;\"><\/w2:textbox>\n\n// 전역스크립트에 아래와 같이 textbox1의 format Function을 정의 한다.(value의 값을 대문자로 치환)\nvar commObj = {}; \ncommObj.fn_setUpper = function(value){\n    value = value.toUpperCase();\n    return value;\n};\n\n// textbox1컴포넌트의 displayFormatter를 설정.\ntextbox1.setDisplayFormatter(\"commObj.fn_setUpper\");\n\n// (출력 예) HONG GIL DONG\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setLocaleRef": {
          "!type": "fn(localeRef: string)",
          "!doc": "localeRef 속성값을 설정한다.\n\n**Parameters:**\n\n```localeRef``` - ```String:Y``` - 새로 설정할 localeRef 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 textbox1이 정의 된 경우\n<w2:textbox id=\"textbox1\" style=\"position: relative;\" localeRef=\"name\"><\/w2:textbox>\n\n//client 다국어 설정의 name key를 적용.\ntextbox1.setLocaleRef(\"name\");\n\n//만약 다국어 설정이 정상적으로 되어있지 않거나 name 이라는 key가 없는 경우 아래와 같은 text로 표현된다.\n//예시 ) global_undefined\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "컴포넌트의 displayFormat 속성을 설정.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//아래와 같이 textbox가 정의 된 경우\n<w2:textbox id=\"textbox1\" dataType=\"number\" displayFormat=\"#,###\" label=\"1000000\" style=\"position: relative;\"><\/w2:textbox>\n\n// (출력 예) 1,000,000\n\n//textbox1 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.\ntextbox1.setDisplayFormat(\"#,###.#0\");\n\n// (출력 예) 1,000,000.00\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "포맷이 적용되지 않은 value(label 속성 값)를 반환.\n\n**Return:**\n\n```String``` - textbox의 value(label 속성의 값)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 textbox1이 정의 된 경우\n<w2:textbox id=\"textbox1\" label=\"Pinocchio\" style=\"position: relative;\"><\/w2:textbox>\n\nvar returnValue = textbox1.getValue();\n// (반환 예)\"Pinocchio\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "className 클래스를 제거하거나 추가. \n\n기본 설정은 addClass(); 함수를 통해 추가된 클래스만 삭제 가능. \n\n직접 정의된 class를 삭제하는 경우, config.xml 파일에 아래 설정을 추가. \n```javascript\n// config.xml 파일에 아래 설정을 추가 .\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 제거하거나 추가할 클래스.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 class를 정의 한 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래와 같이 정의.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// 적용된 tmpInputClass class 삭제\ninput1.toggleClass(\"tmpInputClass\");\n\n// tmpInputClass class를 다시 추가\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getAttributeNode": {
          "!type": "fn(attributeName: string)",
          "!doc": "tagname 속성 확장용인 HTML attributes(스튜디오에서의 명칭)를 이용하여 정의된 속성값을 반환.\n\n정의한 tagname의 태그가 갖는 HTML 속성 또한 반환 가능. \n\n예를 들어 id,class,style등의 속성은 반환되나 tagname과 같은 속성 값은 반환되지 않음.\n\n**Parameters:**\n\n```attributeName``` - ```String:Y``` - 속성명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 tagname속성을 이용하여 attribute를 추가 한 경우\n<w2:textbox id=\"ui_btnLogin\" style=\"\" tagname=\"a\">\n    <w2:attributes>\n        <w2:href>#<\/w2:href>\n    <\/w2:attributes>\n<\/w2:textbox>\n\nui_btnLogin.getAttributeNode(\"href\");\n// (반환 예) \"#\"\n\nui_btnLogin.getAttributeNode(\"id\");\n// (반환 예) \"ui_btnLogin\"\n\nui_btnLogin.getAttributeNode(\"tagname\");\n// (반환 예) null\n```\n\n"
        },
        "setValue": {
          "!type": "fn(label: string)",
          "!doc": "화면에 출력될 text인 value(label 속성에 정의 된 값)를 설정한다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 화면에 출력될 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\ntextbox1.setValue(\"Pinocchio\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "removeAttributeNode": {
          "!type": "fn(nodeName: string)",
          "!doc": "nodeName에 해당하는 하위 노드를 삭제.\n\nnodeName으로 사용할 수 있는 값은 사용자가 추가한 속성목록이다.\n\n**Parameters:**\n\n```nodeName``` - ```String:Y``` - 삭제할 하위 노드의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "oldClassName 클래스를 newClassName 클래스로 변경.\n\naddClass(); 함수를 통해 추가된 클래스만 변경 가능. \n\n직접 정의된 클래스를 삭제하는 경우 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml 파일에 아래를 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 삭제 할 class의 이름.\n\n```newClassName``` - ```String:Y``` - 추가 할 class의 이름.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트에 class를 정의한 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래와 같이 정의.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n//tmpInputClass class를 tmpInputWarninClass로 변경\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "upload": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setSubDir": {
          "!type": "fn(value: string)",
          "!doc": "subDir의 값을 새로 설정.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - subDir속성에 새로 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n upload1.setSubDir('subDir1');\n// websquare.xml에 정의된 subDir1의 위치로 업로드 위치를 설정.\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCallback": {
          "!type": "fn(obj: +Object)",
          "!doc": "파일 업로드가 끝났을 경우에 호출하는 함수를 설정.\n\n**Parameters:**\n\n```obj``` - ```Function:Y``` - 호출하는 함수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n function uploadcallback( result ) {\n     var fileNm = WebSquare.xml.getValue( result,\"/ret/storedFileList\" );\n     alert(fileNm);\n }\n\n upload1.setCallback(uploadcallback);\n upload1.submit();\n// 파일 업로드가 끝나고 uploadcallback 함수가 실행됨.\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addParam": {
          "!type": "fn(key: string, value: string)",
          "!doc": "Upload 객체가 입력받은 값을 업로드 시 value를 key 값으로 post로 전달.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - Upload시에 전송될 key 값\n\n```value``` - ```String:Y``` - Upload시에 전송될 value 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 예제\n upload1.addParam('baseDir','upload');\n```\n\n"
        },
        "getActionUrl": {
          "!type": "fn(options: +Object)",
          "!doc": "option의 action 속성을 반환.\n\n**Parameters:**\n\n```options``` - ```Object> options 반환할 action 관련 설정이 담겨있는 객체\n |<Boolean:N``` - 반환할 action 관련 설정이 담겨있는 객체\n\n|property|type|description|\n|:-|:-|:-|\n|options.msa|<Boolean:N>|MSA Server가 반영된 전체 url 반환 여부|\n\n**Return:**\n\n```String``` - option의 action 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n var returnValue = upload1.getActionUrl();\n// returnValue는 'http://localhost:8090/websquare/upload.wq?callbackFunction=upload1.callback'.\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "changeMsaName": {
          "!type": "fn(msaName: string)",
          "!doc": "업로드할 서버를 설정.\n\n**Parameters:**\n\n```msaName``` - ```String:Y``` - MSA 서버명\n\n**Since:**\n\n5.0_5.5130B.20240117.162839\n\n**Sample:**\n\n```javascript\n // 예제\n upload1.changeMsaName('site1');\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "reset": {
          "!type": "fn()",
          "!doc": "컴포넌트를 초기화.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n upload1.reset();\n// 업로드 컴포넌트가 초기화 됨.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "submit": {
          "!type": "fn()",
          "!doc": "파일을 전송.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n upload1.submit();\n 파일을 업로드 한다.\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getSubDir": {
          "!type": "fn()",
          "!doc": "subDir 설정값을 반환.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 예제\n upload1.getSubDir();\n```\n\n"
        },
        "changeFormAction": {
          "!type": "fn(url: string)",
          "!doc": "Upload 객체가 입력받은 값을 업로드할 URL을 설정.\n\n입력된 action은 HTML Object 중에 Form의 action과 같은 방법을 사용.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - Upload시에 전송될 URL\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 예제\n upload1.changeFormAction('http://localhost:8080/upload.jsp');\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "파일 이름을 반환.\n\n**Return:**\n\n```String``` - 파일 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 업로드하려는 파일을 선택한다.\n var returnValue = upload1.getValue();\n// returnValue는 'C:\\Users\\Public\\Pictures\\Sample Pictures\\Lighthouse.jpg'.\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwPyramidChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "fwPyramidChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(false); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn()",
          "!doc": "fwPyramidChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nfwPyramidChart1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setPlotColor": {
          "!type": "fn()",
          "!doc": "차트의 dataplot 색상을 지정합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var colorArr = [\"ff0000\",\"00ff00\",\"0000ff\"];\n chart1.setPlotColor(colorArr);\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setChartColumnRef": {
          "!type": "fn(ref: string, labelNode: string, seriesColumns: string)",
          "!doc": "fwPyramidChart의 DataCollection 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesColumns``` - ```String:Y``` - seriesColumns\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnRef('data:dataList1','Month',\"[['Year2','Year3','Year1']]\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwPyramidChart의 차트 데이터를 변경합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwFunnelChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setChartColumnSimpleRef": {
          "!type": "fn(ref: string, labelNode: string, seriesNode: string, valueNode: string)",
          "!doc": "seriesType이 simple인 차트의 fwPyramidChart dataList 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesNode``` - ```String:Y``` - seriesNode\n\n```valueNode``` - ```String:Y``` - valueNode\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnSimpleRef(null,'Month', 'Year1','Year1');\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwPyramidChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwPyramidChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwPyramidChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwPyramidChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwPyramidChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "textarea": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트에 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - DataList의 id와 ref를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ntextarea1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 textarea1 key와 textarea1 컴포넌트의 value를 binding 하는 경우\ntextarea1.setRef(\"data:dataMap1.remark\");\n\n//InstanceData의 res/userData/remark 과 연동 할 경우.\ntextarea1.setRef(\"res/userData/remark\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setPlaceholder": {
          "!type": "fn(placeholderStr: string)",
          "!doc": "placeholder 속성값을 변경한다.\n\n**Parameters:**\n\n```placeholderStr``` - ```String:Y``` - 변경할 placeholder의 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ntextarea1.setPlaceholder(\"내용을 입력하세요\");\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "유효성 검사를 수행. \n```javascript\n(유효성 검사 항목)\n minByteLength\n minLength\n maxByteLength\n maxLength\n mandatory\n```\n\n\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// mandatory=\"true\"이고 미입력 상태에서 유효성 검사.\n     var returnValue = textarea1.validate();\n     returnValue는 false이다.\n// 유효성 검사 조건(mandatory, min, maxLength 등)을 만족할 경우, true를 반환.\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n textarea1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "컴포넌트의 value를 반환.\n\n**Return:**\n\n```String``` - 컴포넌트의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 사용자가 textarea1 컴포넌트에 \"WebSquare\"를 입력 한 경우\nvar tmpRs = textarea1.getValue();\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트의 value를 설정.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - TextArea의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// script영역에서 개행이 있는 Text를 value로 설정할 경우\nvar text =  \"Inswave \\n\"  \n        +\"WebSquare \\n\"\n        +\"ProWorks \\n\";\ntextarea1.setValue(text);\n\n// (표시 예)\n    Inswave \n    WebSquare \n    ProWorks\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "body": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "widgetContainer": {
        "isValidPos": {
          "!type": "fn(x: number, y: number, unitWidth: number, unitHeight: number)",
          "!doc": "넘겨받은 위치정보를 이용해 해당 영역이 유효한지 여부를 반환한다.\n\n단, widget간의 충돌 체크는 하지 않으며, 오직 boundary 제한과 min/max 제한만을 체크한다.\n\n**Parameters:**\n\n```x``` - ```Number:Y``` - widget의 x값\n\n```y``` - ```Number:Y``` - widget의 y값\n\n```unitWidth``` - ```Number:Y``` - widget의 unitWidth값\n\n```unitHeight``` - ```Number:Y``` - widget의 unitHeight값\n\n**Return:**\n\n```Boolean``` - 해당 위치의 유효 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//x === -1 이기 때문에 유효하지 않은 위치이므로 result === false.\nvar result = isValidPos(-1, 3, 2, 3);\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "exportWidget": {
          "!type": "fn(widgetId: string)",
          "!doc": "widgetContainer가 현재 가지고 있는 여러 개의 위젯 중 주어진 ID에 해당하는 위젯 객체만 반환.\n\nID에 해당하는 정보가 없을 경우 null을 반환.\n\n관련 함수: exportWidgets는 widgetContainer가 현재 갖고 있는 모든 위젯의 정보를 반환.\n\n**Parameters:**\n\n```widgetId``` - ```String:Y``` - 위젯 ID\n\n**Return:**\n\n```Object``` - 위젯 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// exportWidget()를 이용해 특정 widget 정보를 jsonObj에 저장함.\nvar jsonObj = widgetContainer1.exportWidget('widget1');\nvar jsonObj2 = widgetContainer1.exportWidget('widgetContainer1_widget1');\n// 저장한 JSON을 출력.\nconsole.log(jsonObj);\nconsole.log(jsonObj2);\n```\n\n"
        },
        "moveWidget": {
          "!type": "fn(widgetId: string, newX: number, newY: number)",
          "!doc": "해당 widget id를 가진 widget의 좌표를 (newX, newY)로 이동시킨다.\n\nnewX, newY 중 유효한 값이 할당되지 않은 인자의 경우 widget의 기존값을 유지한다.\n\nwidget을 조작하기 전 마지막으로 성공했던 상태로 rollback한 후 처리를 시작한다.\n\n모드에 따라 충돌 해소를 시도한 후 성공했다면 commit을, 실패했다면 rollback을 실행한다.\n\nmove에 성공했을 시에는 true를, 실패했을 시에는 false를 반환한다.\n\n**Parameters:**\n\n```widgetId``` - ```String:Y``` - 조작할 widget의 id\n\n```newX``` - ```Number:N``` - widget의 새 x좌표\n\n```newY``` - ```Number:N``` - widget의 새 y좌표\n\n**Return:**\n\n```Boolean``` - 조작의 성공 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//widget0을 (2,2)로 이동\nwidgetContainer1.moveWidget('widget0', 2, 2);\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getWidgetByTitle": {
          "!type": "fn(id: string)",
          "!doc": "widget의 title을 받아 해당 widget 객체를 반환한다. 해당 widget을 찾지 못할 시 null을 반환한다.\n\n중복되는 widget이 있을 시 처음으로 찾은 widget만을 반환한다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - widget의 id\n\n**Return:**\n\n```Object``` - 해당 id를 가진 widget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//변수 widget에 title이 'widget0'인 widget 객체가 저장됨.\nvar widget = widgetContainer1.getWidgetByTitle('widget0');\n//해당 title을 가진 widget을 찾을 수 없으면 null을 반환.\nwidgetContainer1.getWidgetByTitle('NoSuchTitle') === null;  // true;\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "exportWidgets": {
          "!type": "fn()",
          "!doc": "widgetContainer가 현재 가지고 있는 widget들의 정보를 객체의 배열(JSON)로 반환한다.\n\n**Return:**\n\n```Object[]``` - widget 객체의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//exportWidgets()를 이용해 현재 widget들의 정보를 jsonArr에 저장함.\nvar jsonArr = widgetContainer1.exportWidgets();\n//저장한 JSON을 출력.\nconsole.log(jsonArr);\n```\n\n"
        },
        "setTitleClass": {
          "!type": "fn(id: string, className: string)",
          "!doc": "titleClass 속성에 따라 정의된 타이틀 영역에 클래스를 추가.\n\n관련 속성: titleClass\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 위젯 아이디\n\n```className``` - ```String:Y``` - 위젯에 적용할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n 위젯(\"widget1\")의 title 영역에 새로운 클래스(\"w2widget_disable\")를 동적으로 적용\n widgetContinerID.setTitleClass(\"widget1\",\"w2widget_disable\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "enableWidgetMove": {
          "!type": "fn(isMovable: bool)",
          "!doc": "위젯컨테이너의 위젯이동 여부를 설정합니다\n\n**Parameters:**\n\n```isMovable``` - ```Boolean:Y``` - 이동가능하게 할지의 여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "removeWidgets": {
          "!type": "fn(widgetIds: string)",
          "!doc": "widget의 id, id의 배열을 받아 해당 widget들을 삭제한다.\n\n실제 삭제를 위해 내부에서 _removeWidgets를 부른다. 삭제 성공 시 삭제된 widget들의 id의 배열을 반환한다.\n\n인자로 widget 객체, widget 객체의 배열을 넘겨받아도 정상작동 하지만 권장사항은 id 또는 id의 배열이다.\n\n**Parameters:**\n\n```widgetIds``` - ```String | String[]:Y``` - 삭제할 widget들의 id의 배열\n\n**Return:**\n\n```String[]``` - 삭제된 widget들의 id의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar ids = ['widget0', 'widget1', 'widget2'];\n//id가 widget0, widget1, widget2인 widget들 삭제\nwidgetContainer1.removeWidgets(ids);\nwidgetContainer1.getWidgetById('widget0') === null  // true;\n```\n\n"
        },
        "enableWidgetTitle": {
          "!type": "fn(showTitle: bool)",
          "!doc": "위젯컨테이너 내부의 모든 위젯의 타이틀바를 제어합니다.\n\n**Parameters:**\n\n```showTitle``` - ```Boolean:Y``` - 타이틀을 보여줄지 숨길지의 여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//widget container의 모든 위젯의 title을 숨김\nwidgetContainer1.enableWidgetTitle(false);\n```\n\n"
        },
        "importWidgets": {
          "!type": "fn(jsonArr: +Object, clearFlag: bool)",
          "!doc": "여러 개의 현재 존재하지 않는 위젯 객체들을 배열(JSON)을 받아 widgetContainer에 삽입.\n\nclearFlag가 true인 경우 기존의 위젯을 모두 지우고 새로운 위젯 객체를 추가.\n\n**Parameters:**\n\n```jsonArr``` - ```Object[]:Y``` - 위젯 객체의 배열\n\n```clearFlag``` - ```Boolean:Y``` - 기존 위젯들을 삭제할지 여부\n\n**Return:**\n\n```Object[]``` - import된 위젯 객체의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// exportWidgets()를 이용해 현재 widget들의 jsonArr를 저장함.\nvar jsonArr = widgetContainer1.exportWidgets();\n// 기존 widget들을 지우고 jsonArr의 widget들을 표시함.\nwidgetContainer1.importWidgets(jsonArr, true);\n```\n\n"
        },
        "redraw": {
          "!type": "fn()",
          "!doc": "widgetContainer 내부의 widget들을 그 상태에 따라 적절히 렌더링한다.\n\nAPI를 사용할 경우 처리가 끝난 후 불리며, drag&drop을 사용할 경우 widget들의 실시간 위치상태에 변화가 생기는 경우에 불린다.\n\noneColumn, maximize, minimize, ghost 등등 모든 렌더링 작업은 이 함수에서 _renderWithRect를 호출함으로써 이뤄진다.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "setCols": {
          "!type": "fn(cols: string)",
          "!doc": "격자 형태의 WidgetContainer가 포함할 컬럼 수를 설정. 단, 컬럼 수는 현재 위젯들의 너비와 같거나 더 큰 값이어야 함.\n\n**Parameters:**\n\n```cols``` - ```String:Y``` - widgetContainer의 새롭게 설정할 cols\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//위젯들의 너비는 1, 2, 3, 혹은 4인 경우에만 아래가 동작. 현재 위젯의 너비가 4보다 클 경우 아래 예제는 동작하지 않음.\nwidgetContainer1.setCols(4);\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getWidgetById": {
          "!type": "fn(id: string)",
          "!doc": "widget의 id를 받아 해당 widget 객체를 반환한다. 해당 widget을 찾지 못할 시 null을 반환한다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - widget의 id\n\n**Return:**\n\n```Object``` - 해당 id를 가진 widget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//변수 widget에 id가 'widget0'인 widget 객체가 저장됨.\nvar widget = widgetContainer1.getWidgetById('widget0');\n//해당 id를 가진 widget을 찾을 수 없으면 null을 반환.\nwidgetContainer1.getWidgetById('NoSuchId') === null;  // true;\n```\n\n"
        },
        "importWidget": {
          "!type": "fn(id: string, jsonObj: +Object)",
          "!doc": "현재 존재하는 한 개의 위젯에 대한 정보를 JSON으로 받아 이를 다시 WidgetContainer에 추가. \n\n내부적으로 해당 ID의 위젯을 지우고 다시 그림. 단, ID는 기존 ID를 유지. \n\n관련 함수: importWidgets은 현재 존재하지 않는 여러 개의 위젯을 WidgetContainer에 추가.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 위젯 아이디\n\n```jsonObj``` - ```Object:Y``` - 위젯 객체의 배열\n\n**Return:**\n\n```Boolean``` - 조작 성공 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "removeTitleClass": {
          "!type": "fn(id: string, className: string)",
          "!doc": "titleClass 속성에 따라 정의된 타이틀 영역에서 지정된 클래스를 제거.\n\n관련 속성: titleClass\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 위젯 아이디\n\n```className``` - ```String:Y``` - 위젯에서 삭제할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n 위젯(\"widget1\")의 title 영역에 적용된 클래스(\"w2widget_disable\")를 동적으로 삭제\n widgetContinerID.removeTitleClass(\"widget1\",\"w2widget_disable\");\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "enableWidgetResize": {
          "!type": "fn(isResizable: bool)",
          "!doc": "위젯컨테이너의 위젯리사이즈 여부를 설정합니다\n\n**Parameters:**\n\n```isResizable``` - ```Boolean:Y``` - 리사이징 가능하게 할지의 여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "resizeWidget": {
          "!type": "fn(widgetId: string, newWidth: number, newHeight: number, options: +Object)",
          "!doc": "해당 widget id를 가진 widget의 크기를 (newWidth, newHeight)로 변경한다.\n\nnewWidth, newHeight 중 유효한 값이 할당되지 않은 인자의 경우 widget의 기존값을 유지한다.\n\nwidget을 조작하기 전 마지막으로 성공했던 상태로 rollback한 후 처리를 시작한다.\n\n모드에 따라 충돌 해소를 시도한 후 성공했다면 commit을, 실패했다면 rollback을 실행한다.\n\nresize에 성공했을 시에는 true를, 실패했을 시에는 false를 반환한다.\n\n**Parameters:**\n\n```widgetId``` - ```String:Y``` - 조작할 widget의 id\n\n```newWidth``` - ```Number:N``` - widget의 새 unitWidth값\n\n```newHeight``` - ```Number:N``` - widget의 새 unitHeight값\n\n```options``` - ```Object | Object[]:Y``` - 기타 옵션\n\n**Return:**\n\n```Boolean``` - 조작의 성공 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// widget1을 (2,2)의 크기로 변경하되 resizeWidget 값이 false인 경우에도 위젯 크기를 강제로 변경 가능.\nwidgetContainer1.resizeWidget(\"widget1\", 2, 2, {\"force\" : true});\n```\n\n"
        },
        "addWidgets": {
          "!type": "fn(option: +Object)",
          "!doc": "widget의 options 객체, 또는 options 객체의 배열을 받아 새로운 widget을 추가한다.\n\nwidget 생성 도중 오류가 발생할 시, 모든 생성을 취소하고 rollback을 시도한다.\n\n**Parameters:**\n\n```option``` - ```Object:Y``` - widget생성을 위한 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.x|<Number:N>|[default:0] widgetContainer 좌표계 상의 x 값|\n|options.y|<Number:N>|[default:0] widgetContainer 좌표계 상의 y 값|\n|options.unitWidth|<Number:N>|[default:1] widgetContainer 좌표계 상의 unitWidth 값. 모든 widget의 unitWidth 합계 이상으로 WindowContainer 컴포넌트 속성인 cols를 적용해야 한다.|\n|options.unitHeight|<Number:N>|[default:1] widgetContainer 좌표계 상의 unitHeight 값|\n|options.id|<String:N>|[default:\"\"] 위젯의 id|\n|options.title|<String:N>|[default:\"\"] 위젯의 타이틀|\n|options.hasTitleBar|<Boolean:N>|[default:true] widget의 타이틀바 렌더 여부|\n|options.src|<String:N>|[default:\"\"] widget 내부의 wframe 영역에 불러들일 소스 xml|\n|options.scope|<Boolean:N>|[default:false] widget 내부 wframe의 scope 속성|\n|options.className|<String:N>|[default:\"\"] widget에 적용될 className|\n|options.params|<Object:N>|[default:undefined] widget 객체에 저장할 사용자 정의 데이터.|\n|options.fixed|<Boolean:N>|[default:false] 위젯의 고정 여부. 런타임 도중 API 또는 버튼을 통해 토글할 수 있다.|\n|options.resized|<Boolean:N>|[default:false] 위젯의 리사이징 여부. 런타임 도중 API를 통해 토글할 수 있다.|\n|options.minimized|<Boolean:N>|[default:false] 위젯의 최대화 여부. 런타임 도중 API 또는 버튼을 통해 토글할 수 있다.|\n|options.maximizeFormatter|<String:N>|[default:null] 위젯의 최대화 설정을 반환할 함수 또는 함수의 이름|\n|options.buttonFormatter|<String:N>|[default:null] 위젯의 우상단 버튼들의 설정을 반환할 함수 또는 함수의 이름|\n\n**Return:**\n\n```Array:Y``` - added 생성된 widget 객체 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//단일 widget을 생성\nvar options = {id : \"widget1\",\n               title : \"widget1\",\n               titleClass : \"w2widget_blue\",\n               src : null,\n               scope : true,\n               x : 0,\n               y : 1,\n               unitWidth : 1,\n               unitHeight : 1};\nvar newWidget = widgetContainer1.addWidgets(options);\n//여러 widget을 동시에 생성\nvar optionsArr = [];\n    optionsArr[0] = {id : \"widget0\",\n               title : \"widget0\",\n               src : \"widget.xml\",\n               scope : true,\n               x : 0,\n               y : 0,\n               unitWidth : 1,\n               unitHeight : 1};\nvar newWidgets = widgetContainer1.addWidgets(optionsArr);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "radio": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "컴포넌트로 포커스를 이동.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n radio1.focus();\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "removeAll": {
          "!type": "fn()",
          "!doc": "모든 선택 항목을 삭제.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\nradio1.removeAll();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn()",
          "!doc": "선택 된 항목의 label을 반환한다.\n\n**Return:**\n\n```String``` - 선택 된 항목의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 radio가 정의되고 자택이 선택 된 경우\n<xf:select1 id=\"radio1\" selectedIndex=\"-1\" appearance=\"full\" style=\"position: relative;\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[자택]]><\/xf:label>\n            <xf:value><![CDATA[0]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[직장]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = radio1.getText();\n//return 예시 ) \"자택\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "getItemDisabled": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 설정을 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n**Return:**\n\n```Boolean``` - 항목의 비활성화 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 활성화 되어있고, 첫번째 항목의 활성화 여부를 반환 받는 예\n    \nvar returnValue = radio1.getItemDisabled(0);\n// (반환 값) false\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n radio1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "click": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 항목에 클릭 이벤트를 발생시켜 해당 항목을 선택/해제.\n\n클릭 관련 이벤트를 발생시킴.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 클릭 이벤트를 발생시킬 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목에 click 이벤트를 발생시킨다.\n// 첫번째 항목을 선택/해제\nradio1.click(0);\n```\n\n"
        },
        "setEnableColumn": {
          "!type": "fn(columnId: string, enableColumnFalseValue: string)",
          "!doc": "enableColumn 속성을 동적으로 설정.\n\nenableColumn 속성으로 설정된 컬럼은 Radio와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음.\n\nenableColumn 속성은 Radio의 선택 항목 목록 중 특정 항목을 disable 시키기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n enableColumn\n enableColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - enableColumn으로 설정할 컬럼의 ID. (disable 시킬 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```enableColumnFalseValue``` - ```String:N``` - 목록을 disable 시키기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Radio는 DataList와 바인딩되어 있음.\nradio1.setEnableColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Radio의 선택 목록에 disable 처리되어 표시됨.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 항목의 인덱스를 반환.\n\n**Return:**\n\n```Number``` - 선택 된 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 선택된 경우,\nvar returnValue = radio1.getSelectedIndex(); \n// (반환 값) 0\n```\n\n"
        },
        "reset": {
          "!type": "fn()",
          "!doc": "항목의 선택을 해제.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 선택 해제.\nradio1.reset();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "선택 항목 개수를 반환.\n\n**Return:**\n\n```Number``` - 선택 항목 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 총 2개의 항목이 있는 경우\nvar returnValue = radio1.getItemCount();\n// (반환 값) 2\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "addItem": {
          "!type": "fn(value: string, label: string, index: number)",
          "!doc": "선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 항목의 value\n\n```label``` - ```String:Y``` - 항목의 label\n\n```index``` - ```Number:N``` - 항목의 index\n\n**Return:**\n\n```Number``` - 추가된 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 radio가 정의 된 경우\n<xf:select1 id=\"radio1\" selectedIndex=\"-1\" appearance=\"full\" style=\"position: relative;\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[자택]]><\/xf:label>\n            <xf:value><![CDATA[0]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[직장]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = radio1.addItem( '3', '기타' );\n// (반환 값) 2\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. \n\nDataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함. 명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// dataMap1의 gender key와 radio1 컴포넌트의 value를 바인딩하는 경우\nradio1.setRef(\"data:dataMap1.gender\");\n\n// InstanceData의 \"res/userData/hobby\"와 연동 할 경우.\nradio1.setRef(\"res/userData/gender\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setVisibleColumn": {
          "!type": "fn(columnId: string, visibleColumnFalseValue: string)",
          "!doc": "visibleColumn 속성을 동적으로 설정.\n\nvisibleColumn 속성으로 설정된 컬럼은 Radio와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음.\n\nvisibleColumn 속성은 Radio의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n visibleColumn\n visibleColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```visibleColumnFalseValue``` - ```String:N``` - 목록을 감추기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Radio는 DataList와 바인딩되어 있음.\nradio1.setVisibleColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Radio의 선택 목록에 표시되지 않음.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 검증 속성)\n mandatory\n```\n\n\n\n**Return:**\n\n```Boolean``` - 유효성 검사 결과 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setItemDisabled": {
          "!type": "fn(index: number, flag: bool)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 속성을 설정.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n```flag``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목을 비활성화\nradio1.setItemDisabled(0, true);    \n// 첫번째 항목은 선택 및 선택 해제가 불가능.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "선택 된 항목의 value를 반환한다.\n\n**Return:**\n\n```String``` - 선택 된 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 radio가 정의되고 자택이 선택 된 경우\n<xf:select1 id=\"radio1\" selectedIndex=\"-1\" appearance=\"full\" style=\"position: relative;\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[자택]]><\/xf:label>\n            <xf:value><![CDATA[0]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[직장]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = radio1.getValue();\n//return 예시 ) \"0\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 API)\n displaymessage=true\n\n(유효성 관련 속성)\n mandatory\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 radio 컴포넌트에 mandatory 속성을 정의했을 경우\n<xf:select1 appearance=\"full\" id=\"radio1\" style=\"position: absolute;width:257px;height:78px;left:888px;top:458px;\" mandatory=\"true\">\n    <xf:choices>\n        <xf:itemset nodeset=\"data:dataList3\">\n            <xf:label ref=\"label\"><\/xf:label>\n            <xf:value ref=\"value\"><\/xf:value>\n        <\/xf:itemset>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnObj = radio.validateObject();\n// (반환 값 - radio 값이 없을 경우 ) returnObj 객체 반환 \n\nreturnObj.callerId = \"radio\" returnObj.type = \"mandatory\" returnObj.value = \"\"\n// (반환 값 - radio 값이 있을 경우) 비어있는 객체가 반환 \n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. \n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "deleteItem": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목을 삭제.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 삭제할 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 radio가 정의 된 경우\n<xf:select1 id=\"radio1\" selectedIndex=\"-1\" appearance=\"full\" style=\"position: relative;\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[자택]]><\/xf:label>\n            <xf:value><![CDATA[0]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[직장]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = radio1.deleteItem(0);\n// (반환 값) {label: \"자택\", value: \"0\"}\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "파라메터로 넘어온 값에 해당하는 선택 항목을 선택.  \n\n여러 항목을 한번에 설정할 경우 공백(space)를 이용하여 구분. 주어진 값에 대한 선택 항목이 없는 경우, 아무 동작이 일어나지 않음.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 radio가 정의 된 경우\n<xf:select1 id=\"radio1\" selectedIndex=\"-1\" appearance=\"full\" style=\"position: relative;\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nradio1.setValue(\"M\");   //남성 항목이 선택됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\nDataList와 바인딩할 경우 nodeset 파라미터는 data:로 시작해야 함.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - DataList의 ID. \"data:\"로 시작해야 함. (혹은 InstanceData의 XPath)\n\n```label``` - ```String:N``` - label로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 label에 설정할 nodeset 하위의 XPath)\n\n```value``` - ```String:N``` - value로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 value에 설정할 nodeset 하위의 XPath)\n\n**Since:**\n\n2.0_1.3566B.20131112.110724\n\n**Sample:**\n\n```javascript\n// DataList 정의.\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"lbl\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"code\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <lbl><![CDATA[남성]]><\/lbl>\n            <code><![CDATA[M]]><\/code>\n        <\/w2:row>\n        <w2:row>\n            <lbl><![CDATA[여성]]><\/lbl>\n            <code><![CDATA[F]]><\/code>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (예제 1) DataList1과 바인딩하고 label은 lbl 컬럼을, value는 code컬럼을 사용.   \nradio1.setNodeSet('data:dataList1','lbl','code');\n\n// (예제 2) DataList2와 바인딩하고 label 및 value는 예전 컬럼 정보를 사용.\nradio1.setNodeSet('data:dataList2');    \n// (결과) 기존에 할당된 label의 lbl과 value의 code는 그대로 유지되고 dataList만 변경됨.\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(index: number)",
          "!doc": "주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 선택되지 않은 경우, 첫번째 항목이 선택됨. (선택된 경우에는, 선택이 해제됨)\nradio1.setSelectedIndex(0);\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "output": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\noutput1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setHeight": {
          "!type": "fn(height: number)",
          "!doc": "height를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - 컴포넌트 height\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//height를 20px로 설정한다.\noutput1.setHeight(20);\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getFormatValue": {
          "!type": "fn()",
          "!doc": "format이 적용 된 값을 반환한다.\n\n**Return:**\n\n```String``` - foramt된 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 displayFormat을 적용 한 output을 정의 한 경우.\n<xf:output id=\"output1\" dataType=\"number\" displayFormat=\"#,###.00\" style=\"position: relative;\">\n    <xf:label><![CDATA[100000]]><\/xf:label>\n<\/xf:output>\n\nvar returnValue = output1.getFormatValue();\n//return 예시 ) \"100,000.00\"\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setBackgroundImage": {
          "!type": "fn(url: string)",
          "!doc": "배경이미지를 설정한다. 해당값은 CSS의 background-image 속성값으로 설정된다.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 이미지의 URL\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\noutput1.setBackgroundImage('/img/txtBgImg.png');\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "getRawValue": {
          "!type": "fn()",
          "!doc": "format이 적용되지 않은 value를 반환한다.\n\n**Return:**\n\n```String``` - 가공되지 않은 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 displayFormat을 적용 한 output을 정의 한 경우.\n<xf:output id=\"output1\" dataType=\"number\" displayFormat=\"#,###.00\" style=\"position: relative;\">\n    <xf:label><![CDATA[100000]]><\/xf:label>\n<\/xf:output>\n\nvar returnValue = output1.getRawValue();\n//return 예시 ) \"100000\"\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 name key와 textbox1 컴포넌트의 value를 binding 하는 경우\noutput1.setRef(\"data:dataMap1.name\");\n\n//InstanceData의 res/userData/name 과 연동할 경우.\noutput1.setRef(\"res/userData/name\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setLocaleRef": {
          "!type": "fn(localeRef: string)",
          "!doc": "localeRef 속성값을 설정한다.\n\n**Parameters:**\n\n```localeRef``` - ```String:Y``` - 새로 설정할 localeRef 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//client 다국어 설정의 name key를 적용.\noutput1.setLocaleRef(\"name\");\n\n//만약 다국어 설정이 정상적으로 되어있지 않거나 name 이라는 key가 없는 경우 아래와 같은 text로 표현된다.\n//예시 ) global_undefined\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setWidth": {
          "!type": "fn(width: number)",
          "!doc": "width를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 컴포넌트의 width.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//width를 200px로 설정한다.\noutput1.setWidth(200);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "displayFormat 속성을 설정한다.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 output이 정의 된 경우\n<xf:output id=\"output1\" dataType=\"number\" style=\"position: relative;\">\n    <xf:label><![CDATA[1000000]]><\/xf:label>\n<\/xf:output>\n\n//output1 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.\noutput1.setDisplayFormat(\"#,###.#0\");\n\n//출력 예시 ) 1,000,000.00\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "화면에 보여지는 값을 반환한다.\n\nFormat이 적용되지않은 값은 getRawValue API를 사용한다.\n\n**Return:**\n\n```String``` - 현재 화면에 보여지는 값.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 displayFormat을 적용 한 output을 정의 한 경우.\n<xf:output id=\"output1\" dataType=\"number\" displayFormat=\"#,###.00\" style=\"position: relative;\">\n    <xf:label><![CDATA[100000]]><\/xf:label>\n<\/xf:output>\n\nvar returnValue = output1.getValue();\n//return 예시 ) \"100,000.00\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "value(화면에 출력되는 text)를 설정한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 화면에 출력될 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\noutput1.setValue(\"WebSquare\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabel": {
          "!type": "fn(label: string)",
          "!doc": "label속성(value)의 값을 변경한다.setValue와 동일한 기능을 제공한다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 출력 할 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\noutput1.setLabel(\"WebSquare\");\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "slideHide": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setSlideHide": {
          "!type": "fn(status: string)",
          "!doc": "slide 상태 또는 hide 상태로 변환. \n\n애니메이션 효과 없이 즉시 반영됨.\n\n**Parameters:**\n\n```status``` - ```String:Y``` - \"slide\" 또는 \"hide\" 값만 전달.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "startHide": {
          "!type": "fn()",
          "!doc": "slideHide객체의 hide를 시작합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "startSlide": {
          "!type": "fn()",
          "!doc": "slideHide객체의 slide를 시작합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setHeight": {
          "!type": "fn(height: number)",
          "!doc": "slideHide 객체의 높이를 설정. \n\nslideDirection=left 혹은 right인 경우에만 유효.\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - slideHide의 설정할 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setWidth": {
          "!type": "fn(width: number)",
          "!doc": "slideHide 객체의 넓이를 설정. \n\nslideDirection=up 혹은 down인 경우만 유효.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - slideHide의 설정할 넓이.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwSparkChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "fwSparkChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(false); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn()",
          "!doc": "fwSparkChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setChartColumnRef": {
          "!type": "fn(ref: string, labelNode: string, seriesColumns: string)",
          "!doc": "fwSparkChart의 DataCollection 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesColumns``` - ```String:Y``` - seriesColumns\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnRef('data:dataList1','Month',\"[['Year2','Year3','Year1']]\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwSparkChart의 차트 데이터를 변경합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwSparkChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setChartColumnSimpleRef": {
          "!type": "fn(ref: string, labelNode: string, seriesNode: string, valueNode: string)",
          "!doc": "seriesType이 simple인 차트의 fwSparkChart dataList 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesNode``` - ```String:Y``` - seriesNode\n\n```valueNode``` - ```String:Y``` - valueNode\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnSimpleRef(null,'Month', 'Year1','Year1');\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwSparkChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwSparkChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwSparkChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwSparkChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwSparkChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "checkcombobox": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getSelectedInfo": {
          "!type": "fn()",
          "!doc": "선택 된 항목들의 정보가 담긴 JSON을 Array에 담아 반환.\n\n**Return:**\n\n```Array``` - 선택 된 항목들의 정보(JSON)가 담긴 array\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 사과 항목이 선택 된 경우\n<xf:checkcombobox id=\"checkcombobox1\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\nvar selectedArr = checkcombobox1.getSelectedInfo();\n//return 예시 ) [{index: 0, label: \"사과\", value: \"1\", checked: true}]\n\n//첫번째 항목(사과)을 꺼내 올 경우\nvar selectedObj =  selectedArr[0];\n//return 예시 ) {index: 0, label: \"사과\", value: \"1\", checked: true}\n\n//첫번째 항목의 value를 꺼내 올 경우\nvar selectedValue = selectedObj.value;\n//return 예시 ) \"1\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "initCheckCombobox": {
          "!type": "fn()",
          "!doc": "CheckComboBox를 초기화. (항목 삭제 및 value 초기화)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ncheckcombobox.initCheckCombobox();\n```\n\n"
        },
        "removeAll": {
          "!type": "fn(isInitialize: bool)",
          "!doc": "[default:false, true] 모든 항목을 삭제하는 기능으로 allOption이 정의 된 경우 isInitialize값을 true로 적용하면 해당 항목은 삭제되지 않는다.\n\n**Parameters:**\n\n```isInitialize``` - ```Boolean:N``` - allOption 항목 삭제 유무\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//allOption의 항목이 정의 된 경우 allOption을 포함한 모든 항목이 삭제\ncheckcombobox1.removeAll();\n\n//allOption의 항목이 정의 된 경우 allOption의 항목을 제외한 항목이 삭제\ncheckcombobox1.removeAll(true);\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setDelimiter": {
          "!type": "fn(delimiter: string)",
          "!doc": "delimiter 속성을 설정한다.\n\n**Parameters:**\n\n```delimiter``` - ```String:Y``` - value와 label을 함께 표시할 때 사용하는 구분자\n\n**Since:**\n\n5.0_4.4780B.20221216.152932\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTextArray": {
          "!type": "fn()",
          "!doc": "선택 된 항목들의 label을 Array에 담아 반환.\n\n**Return:**\n\n```Array``` - 선택 된 항목들의 label이 담긴 Array\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//항목 중 \"사과\"와 \"오렌지\"가 선택 된 경우\nvar returnValue = checkcombobox1.getTextArray();\n//return 예시 ) [\"사과\", \"오렌지\"]\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "openTable": {
          "!type": "fn()",
          "!doc": "선택 항목 목록을 여는 기능. \n\n선택 항목 목록을 갱신(updateTabe)하고 보여(showTable)주는 작업을 수행.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInfo": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 항목의 정보가 담긴 JSON을 반환.\n\n**Parameters:**\n\n```index``` - ```Integer:Y``` - 조회 대상 index\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 chooseOption속성과 allOption속성이 true로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" chooseOption=\"true\" allOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\nvar returnValue = checkcombobox1.getInfo(1);    //allOption이 true임으로 1번째가 사과 항목이다.\n//return 예시 ) {index: 1, label: \"사과\", value: \"1\", checked: false}\n```\n\n"
        },
        "setDisplayMode": {
          "!type": "fn(displayMode: string)",
          "!doc": "displayMode 속성을 설정한다.\n\n**Parameters:**\n\n```displayMode``` - ```String:Y``` - 선택 항목의 표현 방법 (\"value\", \"label\", \"value delim label\", \"label delim value\")\n\n**Since:**\n\n5.0_4.5109B.20231213.165007\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 label을 반환. 선택된 항목이 여러 개인 경우, separator를 사용하여 반환.\n\nseparator를 설정하지 않은 경우, 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택 된 항목들의 label이 담긴 문자열\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n// \"사과\"와 \"오렌지\"가 선택 된 경우\nvar returnValue = checkcombobox1.getText();\n// (반환 값) \"사과 오렌지\"\n\n//구분자 , 적용\nvar returnValue = checkcombobox1.getText(\",\");\n// (반환 값) \"사과,오렌지\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "getItemDisabled": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 설정을 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n**Return:**\n\n```Boolean``` - 해당 항목의 비활성화 여부\n\n**Since:**\n\n5.0_1.1586A.20150127.190125\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 활성화 되어있고, 첫번째 항목의 활성화 여부를 반환 받는 예\n\nvar returnValue = checkcombobox1.getItemDisabled(0);\n// (반환 값) false\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setEnableColumn": {
          "!type": "fn(columnId: string, enableColumnFalseValue: string)",
          "!doc": "enableColumn 속성을 동적으로 설정.\n\nenableColumn 속성으로 설정된 컬럼은 Checkcombobox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음.\n\nenableColumn 속성은 Checkcombobox의 선택 항목 목록 중 특정 항목을 disable 시키기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n enableColumn\n enableColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - enableColumn으로 설정할 컬럼의 ID. (disable 시킬 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```enableColumnFalseValue``` - ```String:N``` - 목록을 disable 시키기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Checkcombobox는 DataList와 바인딩되어 있음.\ncheckcombobox1.setEnableColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Checkcombobox의 선택 목록에 disable 처리되어 표시됨.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getInfoArray": {
          "!type": "fn()",
          "!doc": "모든 항목들의 각각의 정보가 담긴 JSON을 Array에 담아 반환.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 chooseOption속성과 allOption속성이 true로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" chooseOption=\"true\" allOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\nvar listArray = checkcombobox1.getInfoArray();\n\n//사과 항목의 정보를 꺼내 올 경우\nvar tmpListObj = listArray[1];\n//return 예시 ) {index: 1, label: \"사과\", value: \"1\", checked: false}\n\n//사과 항목의 value를 꺼내 올 경우\nvar tmpListValue = tmpListObj.value;\nreturn 예시 ) \"1\"\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getValueArray": {
          "!type": "fn()",
          "!doc": "선택 된 항목들의 value를 담은 Array를 반환.\n\n**Return:**\n\n```Array``` - 선택 된 항목들의 value가 담긴 Array\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//value가 \"1\"과 \"2\"인 항목이 선택 된 경우\n\nvar returnValue = checkcombobox1.getValueArray(); \n//return 예시 ) [\"1\", \"2\"]\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "선택 항목 개수를 반환.\n\n**Return:**\n\n```Number``` - 선택 항목 개수\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 총 2개의 선택 항목이 있는 경우\nvar returnValue = checkcombobox1.getItemCount();\n// (반환 값) 2\n```\n\n"
        },
        "setSelectedInfo": {
          "!type": "fn(infoArray: +Object)",
          "!doc": "항목의 선택여부가 담긴 정보(JSON)를 기반으로 항목을 선택/해지.\n\n**Parameters:**\n\n```infoArray``` - ```Array:Y``` - 선택/해지하려는 각 항목의 정보가 담긴 JOSN을 담고 있는 Array\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 allOption속성을 true로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" allOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>     \n\n//\"오렌지\" 항목을 선택하고자 할 때   - allOption항목이 true임으로 해당 항목이 0번째 index이다.\ncheckcombobox1.setSelectedInfo([{index:2,checked:true}]);\n\n//\"사과\"와 \"오렌지\"항목을 선택하고자 할 때 - allOption항목이 true임으로 해당 항목이 0번째 index이다.\ncheckcombobox1.setSelectedInfo([{index:1,checked:true},{index:2,checked:true}]);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = checkcombobox1.getNextTabID();\n```\n\n"
        },
        "addItem": {
          "!type": "fn(value: string, label: string, index: number)",
          "!doc": "선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.\n\n단, allOption 속성으로 지정항 항목은 index에 포함되며, chooseOption 속성으로 지정한 항목은 index에 포함되지 않음.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 항목의 value\n\n```label``` - ```String:Y``` - 항목의 label\n\n```index``` - ```Number:N``` - 항목의 index\n\n**Return:**\n\n```Number``` - 추가된 항목의 index\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 항목을 추가하지 않고 chooseOption속성과 allOption속성을 true로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" chooseOption=\"true\" allOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\"><\/xf:checkcombobox>\n\n// index를 지정하지 않고 항목 추가\ncheckcombobox1.addItem( \"1\" , \"사과\");\n//결과 - \"전체 선택\" 항목 하위로(제일 마지막에) 추가된다. 항목의 순서는 \"전체 선택\", \"사과\" 가 된다.\n//      \"선택\"(chooseOption)은 선택 가능한 항목에는 빠져있고 항목이 선택되지 않은 경우 label에 표현된다.\n\n// index를 0으로 지정하여 항목 추가\ncheckcombobox1.addItem( \"2\" , \"오렌지\",0);\n//결과 - 0번째에 항목이 추가되어 \"전체 선택\" 항목 위에 추가된다. 항목의 순서는 \"오렌지\", \"전체 선택\", \"사과\" 가 된다.\n//      \"선택\"(chooseOption)은 선택 가능한 항목에는 빠져있고 항목이 선택되지 않은 경우 label에 표현된다.\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ncheckcombobox1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// dataMap1의 hobby key와 checkcombobox1 컴포넌트의 value를 바인딩하는 경우\ncheckcombobox1.setRef(\"data:dataMap1.hobby\");\n\n// InstanceData의 \"res/userData/hobby\"와 연동 할 경우.\ncheckcombobox1.setRef(\"res/userData/hobby\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setVisibleColumn": {
          "!type": "fn(columnId: string, visibleColumnFalseValue: string)",
          "!doc": "visibleColumn 속성을 동적으로 설정.\n\nvisibleColumn 속성으로 설정된 컬럼은 CheckComboBox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음.\n\nvisibleColumn 속성은 CheckComboBox의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n visibleColumn\n visibleColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```visibleColumnFalseValue``` - ```String:N``` - 목록을 감추기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_2.3747B.20190731.184739\n\n**Sample:**\n\n```javascript\n// CheckComboBox는 DataList와 바인딩되어 있음.\ncheckCombobox1.setVisibleColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 CheckComboBox의 선택 목록에 표시되지 않음.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "checkAll": {
          "!type": "fn(checked: +Object)",
          "!doc": "모든 항목을 선택하거나 해제.\n\n**Parameters:**\n\n```checked``` - ```Bollean:Y``` - 선택/해제 상태\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//전체 선택\ncheckcombobox1.checkAll(true);\n\n//전체 해제\ncheckcombobox1.checkAll(false);\n```\n\n"
        },
        "setItemDisabled": {
          "!type": "fn(index: number, flag: bool)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 속성을 설정.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n```flag``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.1586A.20150127.190125\n\n**Sample:**\n\n```javascript\n// 첫번째 항목을 비활성화\ncheckcombobox1.setItemDisabled(0, true);\n// 첫번째 항목은 선택 및 선택 해제가 불가능.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setItemSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\n현재 사용자가 선택(입력)된 값은 그대로 유지되고, 선택 항목 목록만 새로 설정됨.\n\n**Parameters:**\n\n```nodeset``` - ```String:N``` - 변경 대상 nodeset\n\n```label``` - ```String:N``` - 선택 항목 목록의 label로 새로 설정할 경로\n\n```value``` - ```String:N``` - 선택 항목 목록의 value로 새로 설정할 경로\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// (1) id가 \"dc_tmpSearchList\"인 DataList 선택 항목(itemSet)과 바인딩.\n// (2) disp 컬럼을 label로 code 컬럼을 value로 설정\n\ncheckcombobox1.setItemSet(\"data:dc_tmpSearchList\",\"disp\",\"code\");\n```\n\n"
        },
        "getValue": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 value를 반환. 선택된 항목이 여러 개인 경우 separator를 사용하여 반환됨.\n\nseparator를 설정하지 않은 경우 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택된 항목의 value가 담긴 문자열\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// value가 \"1\"과 \"2\"인 항목이 선택 된 경우\n\n// 기본 API를 이용하여 꺼내 올 때\nvar returnValue = checkcombobox1.getValue();\n// (반환 값) \"1 2\"\n\n// \",\" 구분자를 이용하여 꺼내 올 때\nvar returnValue = checkcombobox1.getValue(\",\");\n// (반환 값) \"1,2\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "컴포넌트를 화면에서 보이지 않도록 숨깁니다.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength \n minByteLength\n maxByteLength\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 checkcombobox1 컴포넌트에 mandatory 속성을 정의했을 경우\n<xf:checkcombobox appearance=\"minimal\" id=\"checkcombobox1\" style=\"position: absolute;width:249px;height:57px;left:74px;top:459px;\" mandatory=\"true\">\n    <xf:choices>\n        <xf:itemset nodeset=\"data:dataList2\">\n            <xf:label ref=\"label\"><\/xf:label>\n            <xf:value ref=\"value\"><\/xf:value>\n        <\/xf:itemset>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\nvar returnObj = checkcombobox1.validateObject();\n// (반환 값 - checkcombobox의 값이 없을 경우) returnObj 객체 반환\n\nreturnObj.callerId = \"checkcombobox1\" returnObj.type = \"mandatory\" returnObj.value = \"\" \n// (반환 값 - checkcombobox의 값이 있을 경우) 비어있는 객체가 반환\n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. \n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "deleteItem": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목을 삭제. allOption=true인 경우, 해당 항목도 index에 포함됨.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 삭제할 항목의 index\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 항목을 추가하고 chooseOption 및 allOption 속성이 true인 경우\n<xf:checkcombobox id=\"checkcombobox1\" chooseOption=\"true\" allOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <\/xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\n\nvar returnValue = checkcombobox1.deleteItem(0); //allOption이 true로 정의되어있음으로 allOption에 대한 항목이 삭제된다.\n// (반환 값) {label: \"전체 선택\", value: \"all\"}\n\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "파라메터로 넘어온 값에 해당하는 선택 항목을 선택.  \n\n여러 항목을 한번에 설정할 경우 공백(space)를 이용하여 구분. 주어진 값에 대한 선택 항목이 없는 경우, 아무 동작이 일어나지 않음.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 value\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 separator 속성을 \",\"로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" separator=\",\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Orange]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\n//\"Apple\"과 \"Orange\" 항목을 선택하는 예제 \ncheckcombobox1.setValue(\"1,2\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\nDataList와 바인딩할 경우 nodeset 파라미터는 data:로 시작해야 함.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - DataList의 ID. \"data:\"로 시작해야 함. (혹은 InstanceData의 XPath)\n\n```label``` - ```String:N``` - label로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 label에 설정할 nodeset 하위의 XPath)\n\n```value``` - ```String:N``` - value로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 value에 설정할 nodeset 하위의 XPath)\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n// DataList 정의.\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"lbl\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"code\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <lbl><![CDATA[zero]]><\/lbl>\n            <code><![CDATA[0]]><\/code>\n        <\/w2:row>\n        <w2:row>\n            <lbl><![CDATA[one]]><\/lbl>\n            <code><![CDATA[1]]><\/code>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (예제 1) DataList1과 바인딩하고 label은 lbl 컬럼을, value는 code컬럼을 사용.   \ncheckcombobox1.setNodeSet('data:dataList1','lbl','code');\n\n// (예제 2) DataList2와 바인딩하고 label 및 value는 예전 컬럼 정보를 사용.\ncheckcombobox1.setNodeSet('data:dataList2');    \n// (결과) 기존에 할당된 label의 lbl과 value의 code는 그대로 유지되고 dataList만 변경됨.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setText": {
          "!type": "fn(label: string)",
          "!doc": "파라메터로 넘어온 label이 항목에 있는 경우 해당 항목이 선택되며 separator속성에 정의 한 구분자로 label간의 구분자를 넣어야 함.\n\nseparator속성을 미지정 한 경우 공백(space)를 통해 항목을 구분.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 선택하고자 하는 항목들의 label 문자열\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//아래와 같이 항목을 추가하고 separator속성을 \",\"로 정의 한 경우\n<xf:checkcombobox id=\"checkcombobox1\" separator=\",\" style=\"position: relative;width: 148px;height: 21px;\" \nappearance=\"minimal\" direction=\"auto\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[사과]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[오렌지]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:checkcombobox>\n\n//\"사과\"와 \"오렌지\"항목을 선택 할 경우\ncheckcombobox1.setText(\"사과,오렌지\");\n\n//만약 separator속성을 정의하지 않은경우 label 사이에 공백을 넣어줘야 한다.\ncheckcombobox1.setText(\"사과 오렌지\");\n```\n\n"
        }
      },
      "windowContainer": {
        "restoreWindowSize": {
          "!type": "fn(windowId: string)",
          "!doc": "입력받은 windowId에 해당하는 위도우 창을 이전 크기(defaultWidth, defaultHeight 옵션으로 설정한 크기 값)로 되돌리는 기능.\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - 사이즈 복원시킬 window창의 ID\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nwindowContainer에 옵션으로 defaultWidth, defaultHeight 설정 값을 각각 210px, 300px로 한다.\nwindow를 생성하고 사이즈를 변경한후에 restoreWindowSize API를 실행한다. 실행 후, defaultWidth, defaultHeight에서 설정한 값으로 window의 크기가 복원된다.      \nwindowContainer1.restoreWindowSize(\"win0\");\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "closeOthers": {
          "!type": "fn(windowId: string)",
          "!doc": "현재 활성화되어 있는 window이외의 window를 닫는다.\n\n**Parameters:**\n\n```windowId``` - ```String:N``` - 기준으로 할 window의 windowId 또는 id. 인자가 없을경우 현재 활성화된 window를 기준으로 한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//활성화된 window외의 window를 닫는다.\nwindowContainer1.closeOthers();\n\n\n//windowId에 해당하는 window를 기준으로 닫을 경우\n//createWindow 호출 시 windowID를 설정하지 않은 경우 title이 windowId가 된다.\nwindowContainer1.createWindow( \"tmp001\" , null , \"/uiTestW5/test001.xml\");\n\nwindowContainer1.closeOthers(\"tmp001\");\n\n \n//windowId가 title과 다르게 설정된 경우\nwindowContainer1.createWindow( \"tmp001\" , \"wc1\" , \"/uiTestW5/test001.xml\");\n\nwindowContainer1.closeOthers(\"wc1\");\n\n```\n\n"
        },
        "closeWindow": {
          "!type": "fn(windowId: string)",
          "!doc": "현재 활성화되어 있는 window를 닫는다.\n\nwindow의 닫기 버튼을 누른 것과 동일하다.\n\n**Parameters:**\n\n```windowId``` - ```String:N``` - 닫고자 하는 window의 id. 인자가 없을경우 현재 활성화된 window가 닫힌다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//활성화된 window를 닫는다.\nwindowContainer1.closeWindow();\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setWindowMaxNum": {
          "!type": "fn(windowMaxNum: number)",
          "!doc": "windowContainer에서 열 수 있는 최대 window 개수를 설정합니다.\n\n**Parameters:**\n\n```windowMaxNum``` - ```Number:Y``` - 새로 설정할 window의 최대 개수\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fixWindow": {
          "!type": "fn(winInfoId: string)",
          "!doc": "인자로 넘겨진 id에 해당하는 윈도우를 고정시킨다.\n\n**Parameters:**\n\n```winInfoId``` - ```String:Y``` - 해당 윈도우의 id\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setWindowPosition": {
          "!type": "fn(left: number, top: number)",
          "!doc": "현재 선택되어 있는 window의 x,y 위치를 조정한다.(px단위로 적용된다.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - x좌표\n\n```top``` - ```Number:Y``` - y좌표\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//window를 왼쪽에서 10px, 위에서 100px 아래에 위치 시킨다.\nwindowContainer1.setWindowPosition('10','100');\n```\n\n"
        },
        "getUniqueIdByTitle": {
          "!type": "fn(title: string)",
          "!doc": "인자로 넘겨진 title을 가진 window의 unique id를 반환한다.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - window title\n\n**Return:**\n\n```Array``` - unique id\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//title이 'sub1'인 window의 unique id를 반환한다.\nwindowContainer1.getUniqueIdByTitle('sub1');\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setMenu": {
          "!type": "fn(arrData: +Object, height: number)",
          "!doc": "nameLayerMenu 속성 사용시에 메뉴목록을 동적으로 설정합니다.\n\n**Parameters:**\n\n```arrData``` - ```Array:Y``` - 메뉴목록을 설정할 array 데이터\n\n```height``` - ```Number:N``` - 메뉴의 높이값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getWindowByWindowId": {
          "!type": "fn(windowId: string, focus: bool)",
          "!doc": "인자로 넘겨진 windowID를 가진 window의 window 객체를 반환한다.\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - window ID\n\n```focus``` - ```Boolean:N``` - window에 focus를 줄지의 여부\n\n**Return:**\n\n```Object``` - window 객체\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\n//createWindow 호출 시 windowID를 설정하지 않은 경우에 window의 input1 컴포넌트의 value를 꺼내오는 경우 (title이 ID가 된다.)\n\n//아래와 같이 windowID를 설정하지 않고 window를 생성한다.\nwindowContainer1.createWindow( \"tmp001\" , null , \"/uiTestW5/test001.xml\");\n\n//\"tmp001\"의 ID을 가진 window 꺼내오기 (title의 ID로 설정되어있다.)\nvar tmpObj = windowContainer1.getWindowByWindowId(\"tmp001\");\n\n//window page내의 input1 컴포넌트의 value 꺼내오기\nvar tmpRs = tmpObj.input1.getValue();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 window의 index를 반환한다.\n\n**Return:**\n\n```Number``` - 선택된 window의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//3개의 window 중 1번째 window가 선택된 경우\nvar tmpRs = windowContainer1.getSelectedIndex();\n//return 예시 ) 0\n```\n\n"
        },
        "isMultiView": {
          "!type": "fn()",
          "!doc": "현재 multiView(두 개의 창을 나란히 보는 모드)인지, 아닌지를 반환하는 함수\n\n**Return:**\n\n```Boolean``` - multiView일 경우 true, singleView일 경우 false\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getWindowByUniqueId": {
          "!type": "fn(uuid: string, focus: bool)",
          "!doc": "인자로 넘겨진 uniqueID를 가진 window의 window 객체를 반환한다.\n\n**Parameters:**\n\n```uuid``` - ```String:Y``` - unique ID\n\n```focus``` - ```Boolean:N``` - window에 focus를 줄지의 여부\n\n**Return:**\n\n```Object``` - window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//createWindow 호출 시 windowID를 설정하지 않은 경우에 window의 input1 컴포넌트의 value를 꺼내오는 경우 (title이 ID가 된다.)\n\n//아래와 같이 windowID를 설정하지 않고 window를 생성한다.\nwindowContainer1.createWindow( \"tmp001\" , null , \"/uiTestW5/test001.xml\");\n\n// title이 \"tmp001\"인 window 꺼내오기\nvar uniqueId = windowContainer1.getUniqueIdByTitle('tmp001');\nvar tmpObj = windowContainer1.getWindowByWindowId(uniqueId[0]);\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getWindow": {
          "!type": "fn(title: string)",
          "!doc": "인자로 넘겨진 title를 가진 window의 window 객체를 반환한다.\n\nwindow에 link된 WedSquare페이지의 Function 또는 컴포넌트 등에 접근할 때 사용된다.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 윈도우 title\n\n**Return:**\n\n```Object``` - window 객체\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//\"edu001\"의 title을 가진 window에 있는 input1 컴포넌트에 접근하여 값을 꺼내올 경우\n\n//\"eud001\"의 title을 가진 window 꺼내오기\nvar tmpObj = windowContainer1.getWindow(\"edu001\");\n\n//window page내의 input1 컴포넌트의 value 꺼내오기\nvar tmpRs = tmpObj.input1.getValue();\n```\n\n"
        },
        "getSelectedWindowId": {
          "!type": "fn()",
          "!doc": "선택된 window의 windowId를 반환한다.\n\ncreateWindow API를 호출 시 windowId를 설정하지 않은 경우 title의 값이 ID로 설정된다.\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\n//CASE 1. 아래와 같이 widnowID를 설정하지 않고 window를 생성한 경우\nwindowContainer1.createWindow( \"page001\" , null , \"/uiTestW5/test0001.xml\");\n\nvar tmpRs1 = windowContainer1.getSelectedWindowId();\n//return 예시 ) \"page001\"\n\n//CASE 2. 아래와 같이 widnowID를 설정하여 window를 생성한 경우\nwindowContainer1.createWindow( \"page001\" , null , \"/uiTestW5/test0001.xml\", \"page001\" , \"p001\");\n\nvar tmpRs2 = windowContainer1.getSelectedWindowId();\n//return 예시 ) \"p001\"\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getFrame": {
          "!type": "fn(windowId: string)",
          "!doc": "windowId에 해당하는 window의 frame객체 (iframe 또는 wframe)을 반환한다.\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - windowId\n\n**Return:**\n\n```Object``` - frame 객체\n\n**Since:**\n\n5.0_2.3379B.20181130.150429\n\n**Sample:**\n\n```javascript\nwindowContainer1.createWindow({\"title\" : \"TEST\", \"src\" : \"sub.xml\", \"windowId\" : \"window1\"});\nwindowContainer1.getFrame(\"window1\").setSrc(\"sub2.xml\");\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setZIndex": {
          "!type": "fn(windowIndex: string)",
          "!doc": "인자로 넘겨진 윈도우의 z-Index를 증가시킨다.\n\n**Parameters:**\n\n```windowIndex``` - ```String:Y``` - 해당 윈도우 컴포넌트의 window index\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "createWindow": {
          "!type": "fn(title: string, iconUrl: string, src: string, windowTitle: string, windowId: string, openAction: string, closeAction: string, windowTooltip: string, windowHeaderHTML: string, options: +Object, frameMode: string, userIconClass: string, userIconPosition: string)",
          "!doc": "window를 생성(open)한다.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 툴바의 네임레이어에 표시되는 타이틀.\n\n```iconUrl``` - ```String:Y``` - 현재는 사용되지 않으며 null로 입력한다.사용자 정의 아이콘은 userIconClass로 대체\n\n```src``` - ```String:Y``` - window에 link할 페이지의 URL.\n\n```windowTitle``` - ```String:N``` - window의 헤더에 표시될 타이틀로 null 이나 \"\"입력시 title값이 출력.\n\n```windowId``` - ```String:N``` - window ID로 null 이나 \"\"입력시 title이 id로 생성.\n\n```openAction``` - ```String:N``` - [existWindow, newWindow, selectWindow]existWindow : id가 동일한 윈도우가 떠있으면 그 윈도우를 사용하여 다시 표시 / newWindow : 항상 새로운 창을 생성 / selectWindow : id가 동일한 창이 있으면 그 윈도우를 선택\n\n```closeAction``` - ```String:N``` - window가 닫힐 때 동작을 지정하는 함수명(return은 boolean으로 하여야 함 false일 경우 닫기 중지, true일 경우 닫기)\n\n```windowTooltip``` - ```String:N``` - 툴바의 네임레이어에 표현될 tooltip.(미입력시 windowTitle이 tooltip으로 셋팅됨)\n\n```windowHeaderHTML``` - ```String:N``` - window 상단의 헤더 정 가운데 영역에 출력할 내용. dom element 입력이 가능하다.\n\n```options``` - ```Object:N``` - 창 생성시 설정할 부가 옵션들.\n\n|property|type|description|\n|:-|:-|:-|\n|options.fixed|<Boolean>|고정핀 활성화 여부|\n|options.useNameLayer|<Boolean>|네임레이어 표시 여부|\n|options.defaultWidth|<String>|윈도우 defaultWidth|\n|options.defaultHeight|<String>|윈도우 defaultHeight|\n\n\n```frameMode``` - ```String:N``` - 창의 종류를 설정. frameMode = \"iframe\" 이면 iframe창 생성. frameMode = \"wframe\"이면 wframe창 생성.\n\n```userIconClass``` - ```String:N``` - 각 윈도우의 아이콘의 image src가 들어있는 사용자 정의 클래스명.\n\n```userIconPosition``` - ```String:N``` - 사용자 정의 아이콘이 고정핀 왼쪽에 있을지 오른쪽에 있을지 설정, \"left\", \"right\", default는 \"right\"\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n//CASE1 별도의 옵션이 없이 window를 생성할 경우\nwindowContainer1.createWindow( \"edu001\" , null , \"/uiTestW5/searchBox.xml\" );\n//id가 edu001인 window가 생성되며 헤더의 title 및 하단 툴바의 네임레이어에 \"edu001\" 값이 적용된다.\n\n//CASE2 closeAction및 세부 옵션을 적용하여 window를 생성할 경우\n\n//script 블럭에 아래와 같이 window의 close 제어 function을 정의한다. - createWindow API를 호출할 때 closeAction에 사용.\nfunction fn_closeMsg(){\n     return confirm(\"do you close this window?\"); // 확인, 취소 버튼이 있는 메세지 창 사용. \n     //return false; // 무조건 닫기 취소.\n}\n\nwindowContainer1.createWindow( \"music\" , \"\" , \"/test/music.xml\", \"page001\", \"P0001\", \"existWindow\", \"fn_closeMsg\");\n//id가 P0001인 window가 생성되며 하단 툴바의 네임레이어에는 \"music\", 헤더의 title에는 \"page001\" 값이 적용된다.\n//해당 window가 닫힐 때는 fn_closeMsg Function이 호출된다.\n\n// 새로 열릴 창에 파라미터 전달 가능 (dataObject 사용) //\n \n// 실제 전달할 데이터 정의 \n var rowJSON = { \n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false}, \n        \"Region\": \"Seoul\", \n        \"Carrier\": true\n        };\n        \n    \n// 창 옵션 및 전달할 데이터를 정의. (dataObject를 통해 전달 가능)           \nvar obj = {\n        \"title\" : \"Test\", \n        \"windowID\": \"001\", \n        \"frameMode\" : \"wframe\", \n        \"src\" : \"popup_sub.xml\",\n        \"userIconClass\" : \"w2windowContainer_nameLayer_imageIcon1\",\n        \"userIconPosition\" : \"left\",\n        \"dataObject\": {\n            \"type\" : \"json\", \n            \"name\" : \"windowParam\", \n            \"data\" : rowJSON\n            }\n        };\n                  \n// 창 생성.                  \nwindowCon1.createWindow(obj);\n \n\n// 새로 영린 창에서 전달 받은 데이터를 확인하는 예제 \n\n// var paramData = $p.getParameter(\"windowParam\");\n//  var data = JSON.stringify(paramData);\n// alert(data);\n\n\n\n```\n\n"
        },
        "getWindowLabel": {
          "!type": "fn(windowId: string, type: string)",
          "!doc": "인자값으로 넘어오는 type에 따라 label(text)값을 반환한다.\n\ntype의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip)\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - 반환할 window의 id\n\n```type``` - ```String:Y``` - [toolbar, window, tooltip]label의 type\n\n**Since:**\n\n2.0_1.3634B.20131129.005443\n\n**Sample:**\n\n```javascript\n//아래와 같이 window를 생성한다.\nwindowContainer1.createWindow( \"edu001\" , null , \"/uiTestW5/searchBox.xml\" , \"교육자료001\" , \"P001\" );\n\n//네임레이어의 값 꺼내오기\nvar tmpRs1 = windowContainer1.getWindowLabel(\"P001\", \"toolbar\");\n//return 예시 ) \"edu001\"\n\n//헤더의 title 값 꺼내오기\nvar tmpRs2 = windowContainer1.getWindowLabel(\"P001\", \"window\");\n//return 예시 ) \"교육자료001\"\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "컴포넌트의 크기를 조정한다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 컴포넌트의 폭\n\n```height``` - ```Number:Y``` - 컴포넌트의 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n windowContainer1.setSize(300,300);\n width는 450px, height는 300px인 windowContainer 생성. \n width는 450px, height는 150px 이하로 줄일 수 없다.\n```\n\n"
        },
        "setWindowCustomMsg": {
          "!type": "fn(msg: string)",
          "!doc": "현재 선택되어 있는 window의 사용자정의 메세지를 설정한다. (useCustomMsg=true인경우)\n\n**Parameters:**\n\n```msg``` - ```String:Y``` - 상태 메세지\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//선택된 window의 사용자정의 메시 설정.\nwindowContainer1.setWindowCustomMsg('Have a good day!');\n```\n\n"
        },
        "setWindowTabOrder": {
          "!type": "fn(arr: string)",
          "!doc": "스크립트 단에서 nameLayer 순서를 조정\n\n기존에는 0,1,2,3,4로 위치가 정해져 있으면 wc1.setWindowTabOrder([4,3,2,1,0])을 호출시 해당 형태로 윈도우 위치 조정 가능\n\n**Parameters:**\n\n```arr``` - ```String:Y``` - 사용자가 원하는 배열 위치 정보\n\n**Since:**\n\n5.0_5.4932B.20230622.113658\n\n**Sample:**\n\n```javascript\n wdc_main.setWindowTabOrder([2,1,0]);\n```\n\n"
        },
        "setSingleView": {
          "!type": "fn()",
          "!doc": "multiView(두 개의 창을 나란히 보는 모드)를 해제한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAllWindowStatusMsg": {
          "!type": "fn(msg: string)",
          "!doc": "모든 window의 상태 메세지를 설정한다.\n\n**Parameters:**\n\n```msg``` - ```String:Y``` - 상태 메세지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//모든 window의 하단 상태 메세지를 변경.\nwindowContainer1.setAllWindowStatusMsg('Have a good day!');\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "createFrame": {
          "!type": "fn()",
          "!doc": "빈 iframe을 동적으로 생성한다. 단 iframe의 총 개수가 windowMaxNum 설정과 같은 경우에는 이 함수를 직접 호출하더라도 빈 iframe을 생성하지 않는다.\n\n(버전 정보: 5.0_2.2777B.20170904.121217 버전에서 추가)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUniqueIdByWindowId": {
          "!type": "fn(windowId: string)",
          "!doc": "인자로 넘겨진 windowID를 가진 window의 unique id를 반환한다.\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - window ID\n\n**Return:**\n\n```Array``` - unique id\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//windowId가 'sub1'인 window의 unique id를 반환한다.\nwindowContainer1.getUniqueIdByTitle('sub1');\n```\n\n"
        },
        "setWindowStatusMsg": {
          "!type": "fn(msg: string)",
          "!doc": "현재 선택되어 있는 window의 상태 메세지를 설정한다.\n\n**Parameters:**\n\n```msg``` - ```String:Y``` - 상태 메세지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택된 window의 상태값 설정.\nwindowContainer1.setWindowStatusMsg('Have a good day!');\n```\n\n"
        },
        "setWindowLabel": {
          "!type": "fn(windowId: string, type: string, value: string)",
          "!doc": "windowId에 해당하는 window의 type에 따른 label값을 설정한다.\n\ntype의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip), all(앞의 3가지 모두).\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - window의 id\n\n```type``` - ```String:Y``` - [toolbar, window, tooltip, all]설정할 label의 type\n\n```value``` - ```String:Y``` - 설정할 label의 값\n\n**Since:**\n\n2.0_1.3634B.20131129.005443\n\n**Sample:**\n\n```javascript\n//id가 window3인 window의 네임레이어, 헤더의 title, tooltip을 TestWindow로 변경\nwindowContainer1.setWindowLabel(\"window3\", \"all\", \"TestWindow\");\n\n//id가 window2인 window의 헤더 title을 \"테스트 페이지\" 로 변경\nwindowContainer1.setWindowLabel(\"window2\", \"window\", \"테스트 페이지\");\n```\n\n"
        },
        "setFocus": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 window에 focus를 준다.\n\n**Parameters:**\n\n```index``` - ```Number||String:Y``` - Window index 또는 windowId\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n windowContainer1.setFocus(0);\n windowContainer1.setFocus(\"window_1\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setMultiView": {
          "!type": "fn(windowId: string, direction: number)",
          "!doc": "multiView(두 개의 창을 나란히 보는 모드)를 실행한다.\n\n**Parameters:**\n\n```windowId``` - ```String:Y``` - 현재 활성화된 window와 나란히 놓을 새로운 window의 id\n\n```direction``` - ```Number:N``` - 나란히 놓을 방향. 0 또는 기본값 : horizontal, 1 : vertical\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "setArrangeWindows": {
          "!type": "fn(type: string, windowIdArray: +Object)",
          "!doc": "윈도우를 정렬. \n\n툴바에 있는 윈도우 정렬 아이콘과 동일한 기능을 제공.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 정렬할 타입.\n\n|property|type|description|\n|:-|:-|:-|\n|\"vertical\"| |null|\n|\"horizontal\"|null|null|\n|\"cascade\"|null|null|\n|\"sequential\"|null|null|\n\n\n```windowIdArray``` - ```Object:N``` - 정렬할 windowId를 담은 Array (useFixButton 속성 무시)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1) - 세로로 window1, window3, window2가 하나씩 열림\nwindowContainer1.setArrangeWindows(\"vertical\", [\"window1\", \"window3\", \"window2\"]);\n\n// (예제 2) -  가로로 window2, window1, window3가 하나씩 열림\nwindowContainer1.setArrangeWindows(\"horizontal\", [\"window2\", \"window1\", \"window3\"]);\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setWindowSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "현재 선택되어 있는 window의 크기를 조정한다.(px단위로 적용된다.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - window의 넓이\n\n```height``` - ```Number:Y``` - window의 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택되어진 window의 width를 200px, height를 300px로 설정한다.\nwindowContainer1.setWindowSize('200','300');\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "unfixWindow": {
          "!type": "fn(winInfoId: string)",
          "!doc": "인자로 넘겨진 id에 해당하는 윈도우의 고정을 해제시킨다.\n\n**Parameters:**\n\n```winInfoId``` - ```String:Y``` - 해당 윈도우의 id\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "pivot": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "pivotCSVUpload": {
          "!type": "fn(options: +Object)",
          "!doc": "csv 파일을 읽어 Pivot의 데이터를 설정한다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - JSON형태로 저장된 Pivot의 csv 업로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.delim|<String:N>|[default: ',']CSV 파일에서 데이터를 구분할 구분자|\n|options.escapeChar|<String:N>|CSV 데이터에서 제거해야 되는 문자셋 ( ex) '\\'' )|\n|options.startRowIndex|<Number:N>|[default: 0] csv파일에서 Pivot의 데이터가 시작되는 행의 번호, startRowIndex가 설정되면, header 설정은 무시된다.|\n|options.skipSpace|<String:N>|[default: 0, 1]공백무시 여부(1이면 무시 0이면 포함)|\n|options.append|<String:N>|[default: 0, 1]csv파일에서 가져온 데이터를 Pivot에 append시킬지 여부(1이면 현재 Pivot에 데이터를 추가로 넣어줌 0이면 현재 Pivot의 데이터를 삭제하고 넣음)|\n|options.popupUrl|<String:N>|업로드시에 호출할 popup의 url|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n  delim:              \",\",\n  escapeChar:         \"'\",\n  startRowIndex:        1\n};\npivotTable.pivotCSVUpload(options);\n\n//별도의 옵션이 없을 경우 빈 객체를 파라메터로 넘겨줘야 한다.\npivotTable.pivotCSVUpload({});\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setvals": {
          "!type": "fn(valsStr: string)",
          "!doc": "pivot의 vals 영역을 새로 설정한 후 해당 설정에 맞게 pivot을 다시 그립니다. 여러 영역을 한꺼번에 변경할 경우에는 setOption API를 대신 사용합니다.\n\n**Parameters:**\n\n```valsStr``` - ```String:Y``` - vals영역에 넣을 필드들을 구분자 ,를 이용하여 나열한다. 순서가 바뀌면 그려지는 모양 또한 바뀐다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n pivotTable.setvals( \"field5, field5\" );  // vals 영역에 field5,6를 위치시킨다.\n pivotTable.setvals( \"field6, field5\" );  // vals 영역에 field6,5를 위치시킨다. 위의 명령과 실행결과가 다르다는 것에 유의한다.\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "pivotExcelDownload": {
          "!type": "fn(options: +Object, infoArr: +Object)",
          "!doc": "Pivot의 데이터를 엑셀 파일로 저장한다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 Pivot의 엑셀 다운로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:Y>|[default: excel.xls] 다운로드하려는 파일의 이름으로 필수 입력 값이다.|\n|options.sheetName|<String:N>|[default: sheet] excel의 sheet의 이름|\n|options.startRowIndex|<Number:N>|[default: 0] excel파일에서 Pivot의 데이터가 시작되는 행의 번호(헤더 포함)|\n|options.startColumnIndex|<Number:N>|[default: 0] excel파일에서 Pivot의 데이터가 시작되는 열의 번호(헤더 포함)|\n|options.axisLColor|<String:N>|[default: #FFFFFF] excel파일에서 좌측 상단 axis 영역의 색|\n|options.axisLFontName|<String:N>|[default: 없음] excel파일에서 좌측 상단 axis 영역의 font name|\n|options.axisLFontSize|<String:N>|[default: 10] excel파일에서 좌측 상단 axis 영역의 font size|\n|options.axisLFontColor|<String:N>|[default: 없음] excel파일에서 좌측 상단 axis 영역의 font색|\n|options.axisLFontWeight|<String:N>|[defalut: 없음] excel파일에서 좌측 상단 axis 영역의 Bold 지정( ex) \"bold\" );|\n|options.axisLTextAlign|<String:N>|[default: 없음] excel파일에서 좌측 상단 axis 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.axisRColor|<String:N>|[default: #FFFFFF] excel파일에서 우측 상단 axis 영역의 색|\n|options.axisRFontName|<String:N>|[default: 없음] excel파일에서 우측 상단 axis 영역의 font name|\n|options.axisRFontSize|<String:N>|[default: 10] excel파일에서 우측 상단 axis 영역의 font size|\n|options.axisRFontColor|<String:N>|[default: 없음] excel파일에서 우측 상단 axis 영역의 font색|\n|options.axisRFontWeight|<String:N>|[default: 없음] excel파일에서 우측 상단 axis 영역의 Bold 지정( ex) \"bold\" );|\n|options.axisRTextAlign|<String:N>|[default: 없음] excel파일에서 우측 상단 axis 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.axisBColor|<String:N>|[default: #FFFFFF] excel파일에서 하단 상단 axis 영역의 색|\n|options.axisBFontName|<String:N>|[default: 없음] excel파일에서 하단 상단 axis 영역의 font name|\n|options.axisBFontSize|<String:N>|[default: 10] excel파일에서 하단 상단 axis 영역의 font size|\n|options.axisBFontColor|<String:N>|[default: 없음] excel파일에서 하단 상단 axis 영역의 font색|\n|options.axisBFontWeight|<String:N>|[default: 없음] excel파일에서 하단 상단 axis 영역의 Bold 지정( ex) \"bold\" );|\n|options.axisBTextAlign|<String:N>|[default: 없음] excel파일에서 하단 상단 axis 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.headerXColor|<String:N>|[default: #FFFFFF] excel파일에서 상단 header 영역의 색|\n|options.headerXFontName|<String:N>|[default: 없음] excel파일에서 상단 header 영역의 font name|\n|options.headerXFontSize|<String:N>|[default: 10] excel파일에서 상단 header 영역의 font size|\n|options.headerXFontColor|<String:N>|[defalut: 없음] excel파일에서 상단 header 영역의 font색|\n|options.headerXFontWeight|<String:N>|[default: 없음] excel파일에서 상단 header 영역의 Bold 지정( ex) \"bold\" );|\n|options.headerXTextAlign|<String:N>|[default: 없음] excel파일에서 상단 header 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.headerXWidth|<String:N>|[default: 없음] excel파일에서 상단 header 컬럼의 width 값|\n|options.headerYColor|<String:N>|[default: #FFFFFF] excel파일에서 좌측축 영역의 색|\n|options.headerYFontName|<String:N>|[default: 없음] excel파일에서 좌측축 영역의 font name|\n|options.headerYFontSize|<String:N>|[default: 10] excel파일에서 좌측축 영역의 font size|\n|options.headerYFontColor|<String:N>|[default: 없음] excel파일에서 좌측축 영역의 font색|\n|options.headerYFontWeight|<String:N>|[default: 없음] excel파일에서 좌측축 영역의 Bold 지정 ( ex) \"bold\" )|\n|options.headerYTextAlign|<String:N>|[default: 없음] excel파일에서 좌측축 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.headerYWidth|<String:N>|[default: 없음] excel파일에서 좌측축 컬럼의 width 값|\n|options.totalXColor|<String:N>|[default: #FFFFFF] excel파일에서 상단 header의 합계 영역의 색|\n|options.totalXFontName|<String:N>|[default: 없음] excel파일에서 상단 header의 합계 영역의 font name|\n|options.totalXFontSize|<String:N>|[default: 10] excel파일에서 상단 header의 합계 영역의 font size|\n|options.totalXFontColor|<String:N>|[default: 없음] excel파일에서 상단 header의 합계 영역의 font색|\n|options.totalXFontWeight|<String:N>|[default: 없음] excel파일에서 상단 header의 합계 영역의 Bold 지정 ( ex) \"bold\" )|\n|options.totalXTextAlign|<String:N>|[default: 없음] excel파일에서 상단 header의 합계 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.totalXWidth|<String:N>|[default: 없음] excel파일에서 상단 header의 합계 컬럼의 width 값|\n|options.totalYColor|<String:N>|[default: #FFFFFF] excel파일에서 좌측축의 합계 영역의 색|\n|options.totalYFontName|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역의 font name|\n|options.totalYFontSize|<String:N>|[default: 10] excel파일에서 좌측축의 합계 영역의 font size|\n|options.totalYFontColor|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역의 font색|\n|options.totalYFontWeight|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역의 Bold 지정 ( ex) \"bold\" )|\n|options.totalYTextAlign|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.totalYFormat|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역의 format (ex) #,###)|\n|options.totalYWidth|<String:N>|[default: 없음] excel파일에서 좌측축의 합계 영역 컬럼의 width값|\n|options.bodyColor|<String:N>|[default: #FFFFFF] excel파일에서 body영역의 색|\n|options.bodyFontName|<String:N>|[default: 없음] excel파일에서 body영역의 font name|\n|options.bodyFontSize|<String:N>|[default: 10] excel파일에서 body영역의 font size|\n|options.bodyFontColor|<String:N>|[default: 없음] excel파일에서 body영역의 font색|\n|options.bodyFontWeight|<String:N>|[default: 없음] excel파일에서 body영역의 Bold 지정 ( ex) \"bold\" )|\n|options.bodyTextAlign|<String:N>|[default: 없음] excel파일에서 body영역의 정렬값 (\"center\", \"right\", \"left\")|\n|options.bodyFormat|<String:N>|[default: 없음] excel파일에서 body영역의 format (ex) #,##0.00)|\n|options.bodyWidth|<String:N>|[default: 없음] excel파일에서 body영역 컬럼의 width 값|\n|options.bodyDefaultValue|<String:N>|[default: 없음] excel파일에서 body영역 컬럼값이 비어있는 경우 대체할 수 있는 값설정|\n|options.sumColor|<String:N>|[default: #FFFFFF] excel파일에서 body 영역의 합계부분의 색|\n|options.sumFontName|<String:N>|[default: 없음] excel파일에서 body 영역의 합계부분의 font name|\n|options.sumFontSize|<String:N>|[default: 10] excel파일에서 body 영역의 합계부분의 font size|\n|options.sumFontColor|<String:N>|[default: 없음] excel파일에서 body 영역의 합계부분의 font색|\n|options.sumFontWeight|<String:N>|[default: 없음] excel파일에서 body 영역의 합계부분의 Bold 지정 ( ex) \"bold\" )|\n|options.sumTextAlign|<String:N>|[default: 없음] excel파일에서 body 영역의 합계부분의 정렬값 (\"center\", \"right\", \"left\")|\n|options.sumFormat|<String:N>|[default: 없음] excel파일에서 body 영역의 합계부분의 format (ex) #,###)|\n|options.sumWidth|<String:N>|[default: 없음] excel파일에서 body 영역 컬럼의 width 값|\n|options.showProcess|<Boolean:N>|[default: true] 다운로드 시 프로세스 창을 보여줄지 여부|\n|options.bodyWordwrap|<Boolean:N>|[default: false] 다운로드시 바디의 줄 바꿈 기능|\n|options.useHeaderX|<String:N>|[default: true] 다운로드시 상단 Header를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력)|\n|options.useHeaderY|<String:N>|[default: true] 다운로드시 좌측 Header를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력)|\n|options.headerYMerge|<String:N>|[default: false] 좌측축영역에 데이터가 같은 경우 colSpan 할지 여부|\n|options.useTotal|<String:N>|[default: true] 다운로드시 합계를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력), pivot 속성중 grandTotalDisplayType이 설정되어 있는경우 grandTotalDisplayType속성이 적용된다.|\n|options.separator|<String:N>|[default: ,] 다운로드시 서버로 데이터 전송할때, 데이터를 구분짓는 구분자, default는 comma(,)|\n|options.freezePane|<String:N>|[default: \"\"] 틀고정을 위한 좌표값 및 좌표값의 오픈셋 ( ex) freezePane=\"3,4\" X축 3, Y축 4에서 틀고정, freezePane=\"0,1,0,5\" X축 0, Y축 1에서 X축으로 0, Y축으로 5로 틀공정  )|\n|options.autoSizeColumn|<String:N>|[default: false] 너비자동맞춤 설정 유무|\n|options.displayGridlines|<String:N>|[default: false] 엑셀 전체 셀의 눈금선 제거 유무|\n|options.useDataFormat|<String:N>|[default: 없음] \"true\"인 경우, dataType에 따라 Excel 파일의 표시 형식을 출력.  dataType=\"text\"인 셀은 Excel의 표시 형식에 '텍스트' 출력. dataType=\"number\" 혹은 \"bigDecimal\" 셀은 bodyFormat에 따라 데이터를 출력. (예: bodyFormat=\"#,##0.00\")|\n|options.optionParam|<String:N>|[default: 없음] DRM연계시 연계모듈에 전달할 데이터 (서버에서 (String)request.getAttribute(\"optionParam\") 로 참조가능 )|\n|options.printSet|<Object:N>|JSON형태로 저장된 Excel Print관련 설정|\n|options.printSet.fitToPage|<String:N>|[default: false] 엑셀 프린터 출력시 쪽맞춤 사용 유무|\n|options.printSet.landScape|<String:N>|[default: false] 엑셀 프린터 출력시 가로 방향 출력 유무|\n|options.printSet.fitWidth|<String:N>|[default: 1] 엑셀 프린터 출력시 용지너비|\n|options.printSet.fitHeight|<String:N>|[default: 1] 엑셀 프린터 출력시 용지높이|\n|options.printSet.scale|<String:N>|[default: 100] 엑셀 프린터 출력시 확대/축소 배율, scale을 사용할 경우 fitToPage는 false로 설정 해야 한다.|\n|options.printSet.pageSize|<String:N>|[default: A4] 엑셀 프린터 출력시 인쇄용지 설정 ( ex) \"A3\", \"A4\", \"A5\", \"B4\" )|\n\n\n```infoArr``` - ```Object:N``` - Pivot에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열\n\n|property|type|description|\n|:-|:-|:-|\n|infoArr.rowIndex|<Number:N>|내용을 표시할 행번호|\n|infoArr.colIndex|<Number:N>|내용을 표시할 열번호|\n|infoArr.rowSpan|<Number:N>|병합할 행의 수|\n|infoArr.colSpan|<Number:N>|병합할 열의 수|\n|infoArr.text|<String:N>|표시할 내용|\n|infoArr.textAlign|<String:N>|표시할 내용의 정렬 방법 (left, center, right)|\n|infoArr.fontSize|<String:N>|font size 설정 ( ex) \"20px\" )|\n|infoArr.fontName|<String:N>|font name 설정|\n|infoArr.color|<String:N>|font color 설정 ( ex) \"red\" )|\n|infoArr.fontWeight|<String:N>|font weight 설정 ( ex) \"bold\" )|\n|infoArr.drawBorder|<String:N>|cell의 border 지정 ( ex) true )|\n|infoArr.wordWrap|<String:N>|cell의 줄 바꿈 기능 ( ex) \"true\" )|\n|infoArr.bgColor|<String:N>|cell의 배경 color 설정 ( ex) \"red\" )|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//별도의 옵션 없이 excel을 download 할 경우\nvar excelOpt = {};  //excel download 옵션\nexcelOpt.fileName = \"excelData.xls\";    //또는 xlsx 확장자 사용\n\npivotTable.pivotExcelDownload( excelOpt );\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getTotalRow": {
          "!type": "fn()",
          "!doc": "행의 개수를 반환한다.\n\n**Return:**\n\n```Number``` - 행의 개수\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setFixedColumn": {
          "!type": "fn(fixedColNum: number)",
          "!doc": "세로 틀고정을 설정한다.\n\n**Parameters:**\n\n```fixedColNum``` - ```Number:Y``` - 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//앞에서 2개 컬럼 틀고정\npivot1.setFixedColumn(1);\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setPivotInit": {
          "!type": "fn(valsStr: string)",
          "!doc": "pivot의 vals 영역을 새로 설정한 후 해당 설정에 맞게 pivot을 다시 그립니다. 여러 영역을 한꺼번에 변경할 경우에는 setOption API를 대신 사용합니다.\n\n**Parameters:**\n\n```valsStr``` - ```String:N``` - vals영역에 넣을 필드들을 구분자 ,를 이용하여 나열한다. 순서가 바뀌면 그려지는 모양 또한 바뀐다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n pivotTable.setPivotInit( );\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setFixedRow": {
          "!type": "fn(fixedRow: number)",
          "!doc": "가로 틀고정을 설정한다.\n\n**Parameters:**\n\n```fixedRow``` - ```Number:Y``` - 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//앞에서 2개 행 틀고정\npivot1.setFixedRow(1);\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "pivotCSVDownload": {
          "!type": "fn(options: +Object)",
          "!doc": "데이터를 CSV 파일로 저장한다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - JSON형태로 저장된 Pivot의 csv 다운로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|[default: csvfile.csv] 엑셀파일 선택 대화상자가 나타날 때 기본으로 지정 될 파일 이름|\n|options.delim|<String:N>|[default: ';'] CSV 파일에서 데이터를 구분할 구분자|\n|options.useHeaderX|<String:N>|[default: false] Axis 영역을 포함한 headerX 저장 여부 (true: 저장, false: 저장 하지 않음)|\n|options.useHeaderY|<String:N>|[default: false] Axis 영역을 포함한 headerY 저장 여부 (true: 저장, false: 저장 하지 않음)|\n|options.useTotal|<String:N>|[default: true] 다운로드시 합계를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력), pivot 속성중 grandTotalDisplayType이 설정되어 있는경우 grandTotalDisplayType속성이 적용된다.|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//저장 할 컬럼 정의\nvar colArr = [];\ncolArr[0] = \"name\";\ncolArr[1] = \"corp\";\n\n//저장 옵션\nvar options = {\n  fileName:           \"saveCSV.csv\",\n  delim:              \";\"\n};\npivotTable.pivotCSVDownload(options);\n\n//별도의 옵션이 없을 경우 빈 객체를 파라메터로 넘겨줘야 한다.\npivotTable.pivotCSVDownload({});\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "group": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "그룹 하위 component에 disabled 속성을 적용.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//그룹 하위의 컴포넌트에 disabled 속성 활성화.\ngroup1.setDisabled(true);\n\n//그룹 하위의 컴포넌트에 disabled 속성 비활성화.\ngroup1.setDisabled(false);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "invoke": {
          "!type": "fn(funcName: string, param: +Object, options: +Object)",
          "!doc": "Group 하위의 모든 컴포넌트에 대해 API 또는 사용자 정의 함수를 호출.\n\n**Parameters:**\n\n```funcName``` - ```String:Y``` - 호출하려는 API 명. 혹은 사용자 정의 함수를 사용할 때는 \"assert\"로 정의.\n\n```param``` - ```Object:N``` - 호출하려는 API에 넘겨질 파라메터 또는 사용자 정의 함수.\n\n```options``` - ```JSON:N``` - 함수 호출에서 제외되는 컴포넌트를 설정하는 값의 객체.\n\n|property|type|description|\n|:-|:-|:-|\n|options.excludePlugin|<String:N>|함수 호출에서 제외되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.excludeId|<String:N>|함수 호출에서 제외되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.includePlugin|<String:N>|함수 호출에서 포함되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.includeId|<String:N>|함수 호출에서 포함되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n group1.invoke(\"setValue\", \"WebSquare\");\n // 그룹의 하위의 모든 컴포넌트에 componentId.setValue(\"WebSquare\"); 한 것과 동일. \n // 만약 하위의 컴포넌트에 setValue 함수를 가지지 않는 컴포넌트(예:grid)가 있다면 에러.\n\n function createValue(obj){\n     var pluginName = obj.getPluginName();  // 컴포넌트의 종류.\n     var id = obj.getID();                  // 컴포넌트의 id.\n                        ...\n }\n var options = { excludePlugin : \"grid calendar\", excludeId : \"radio1\" };\n group1.invoke(\"setValue\", createValue, options);\n // 그룹의 하위의 grid와 calendar, id가 radio1인 컴포넌트를 제외하고, 아래를 수행한 것과 동일.\n // componentId.setValue(사용자 정의 함수(createValue)를 호출하여 반환된 리턴 값); \n\n var options = { includePlugin : \"grid calendar\", includeId : \"radio1\" };\n group1.invoke(\"setValue\", createValue, options);\n // 그룹의 하위의 grid와 calendar, id가 radio1인 컴포넌트에 대해서만 아래를 수행한 것과 동일.\n // componentId.setValue(사용자 정의 함수(createValue)를 호출하여 반환된 리턴 값);\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "init": {
          "!type": "fn(options: +Object)",
          "!doc": "Group 하위에 존재하는 입력 가능한 컴포넌트의 value를 초기화함. (기본 값: '') \n\n초기화가 가능한 컴포넌트: Calendar, Checkbox, GridView, Input, InputCalendar, MultiSelect, Radio, SelectBox, TextArea\n\n**Parameters:**\n\n```options``` - ```Object:N``` - 초기화 동작에서 제외되는 컴포넌트를 설정하는 값의 객체.\n\n|property|type|description|\n|:-|:-|:-|\n|options.excludePlugin|<String:N>|초기화 기능에서 제외되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.excludeId|<String:N>|초기화 기능에서 제외되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.fireEvent|<Boolean:N>|초기화로 인한 값 변동에 따라 이벤트 발생 여부. (기본값: false. 이벤트 발생을 방지.)|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//group1컴포넌트 하위의 사용자 입력용 컴포넌트에 대하여 초기화.\ngroup1.init(); \n\n//group1컴포넌트 하위에 있는 gridView, radio 컴포넌트와 id가 input1, calendar1인 컴포넌트를 제외한 사용자 입력용 컴포넌트에 대해 초기화하며, 값 변경에 따른 이벤트를 발생시킨다.\nvar options = { excludePlugin : \"gridView radio\", excludeId : \"input1 calendar1\", fireEvent : true };\ngroup1.init(options);\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n group1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: string)",
          "!doc": "Group에 속한 하위 컴포넌트에 readOnly 속성을 적용.\n\n**Parameters:**\n\n```readOnly``` - ```String:Y``` - readOnly 설정 값 (true | false)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "spinner": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "컴포넌트로 포커스를 이동.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "focusPreTabOrder": {
          "!type": "fn()",
          "!doc": "자신이 nextTabID로 설정되어 있는 경우, 자신을 nextTabID로 지정한 컴포넌트로 포커스를 이동한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\nspinner1.focusPreTabOrder();\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = spinner1.getNextTabID();\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nspinner1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, heigth: number)",
          "!doc": "컴포넌트의 크기를 설정합니다.\n\n**Parameters:**\n\n```width``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 width값\n\n```heigth``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 height값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "spinner의 값을 얻어옵니다..\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "focusNextTabOrder": {
          "!type": "fn()",
          "!doc": "nextTabID가 설정되어 있는 경우, nextTabID에 해당하는 컴포넌트로 포커스를 이동한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\nspinner1.focusNextTabOrder();\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "value로 spinner의 값을 설정합니다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - spinner에 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "image": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nimage1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setSrc": {
          "!type": "fn(url: string)",
          "!doc": "src 속성값을 설정한다.\n\n**Parameters:**\n\n```url``` - ```String:Y``` - 이미지의 URL\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nimage1.setSrc(\"/img/book1.png\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAlt": {
          "!type": "fn(alt: string)",
          "!doc": "alt속성값을 설정한다.\n\n**Parameters:**\n\n```alt``` - ```String:Y``` - 설정할 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSrc": {
          "!type": "fn()",
          "!doc": "src 속성에 정의 된 URL의 full경로를 반환한다.\n\n**Return:**\n\n```String``` - src 속성에 정의 된 URL의 full경로\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 img 컴포넌트를 정의한 경우\n<xf:image id=\"image1\" src=\"/img/book1.jpg\" style=\"position: relative;\"><\/xf:image>\n\nvar returnValue = image1.getSrc();\n//return 예시 ) \"http://localhost:8080/img/book1.jpg\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n image1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getAlt": {
          "!type": "fn()",
          "!doc": "alt속성값을 반환한다.\n\n**Return:**\n\n```String``` - alt속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setLongdesc": {
          "!type": "fn(longdesc: string)",
          "!doc": "longdesc속성값을 설정한다.\n\n**Parameters:**\n\n```longdesc``` - ```String:Y``` - longdesc속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getLongdesc": {
          "!type": "fn()",
          "!doc": "longdesc속성값을 반환한다.\n\n**Return:**\n\n```String``` - longdesc속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "accordion": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getOpenPanelListInfo": {
          "!type": "fn()",
          "!doc": "열려있는 패널들의 속성 정보를 반환.\n\n**Return:**\n\n```Array``` - 열려있는 패널들의 속성 object\n\n**Since:**\n\n5.0_4.4655B.20220627.201913\n\n**Sample:**\n\n```javascript\nvar returnArr = accordion1.getOpenPanelListInfo();\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "setPanelTitle": {
          "!type": "fn(id: string, title: string)",
          "!doc": "패널의 Title을 설정.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - Title을 설정하려는 패널의 ID\n\n```title``` - ```String:Y``` - panel 설정할 Title의 텍스트\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "openPanel": {
          "!type": "fn(id: string)",
          "!doc": "ID에 해당하는 Panel을 열어줌.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 열고자 하는 panel의 id\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPanelInfo": {
          "!type": "fn()",
          "!doc": "패널의 속성 정보를 반환.\n\n**Return:**\n\n```Array``` - 패널의 속성 object\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "closePanel": {
          "!type": "fn(id: string)",
          "!doc": "패널을 닫음.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 닫고자 하는 패널의 ID.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getOpenPanelInfo": {
          "!type": "fn(index: number)",
          "!doc": "열린 패널 중에 index에 해당하는 패널 속성. parameter를 입력하지 않으면 제일 첫번째로 열린 패널 정보 반환\n\n**Parameters:**\n\n```index``` - ```Number:N``` - panel의 index(0부터 시작)\n\n**Return:**\n\n```JSON``` - index에 해당하는 패널의 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//열려있는 패널들 중 세번째 패널의 정보를 반환 (index는 0부터 시작)\nvar returnArr = accordion1.getOpenPanelInfo(2);\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "setColor": {
          "!type": "fn(options: +Object)",
          "!doc": "panelColor: 패널 title 배경색 변경, borderColor : 아코디언 border색 변경\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 패널의 title 배경색과 아코디언의 border의 색상 변경\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar options = {\n    \"panelColor\" : \"yellow\",\n    \"borderColor\" : \"blue\"\n};\naccordion1.setColor( options );\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setDisabledPanel": {
          "!type": "fn(id: string, flag: bool)",
          "!doc": "개별 패널을 잠금 시킴, 만약 패널이 열려 있었다면 닫히고 잠금 된다. panel과 그 panel의 하위 컴포넌트들의 disable 처리 까지는 되어 있지 않다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 잠금 시키려는 패널의 ID\n\n```flag``` - ```Boolean:N``` - 잠금 시킬지 잠금 해제 시킬지 설정\n\n**Since:**\n\n5.0_4.4655B.20220627.201913\n\n**Sample:**\n\n```javascript\n//id=\"panels1\"인 패널을 잠금\naccordion1.setDisabledPanel(\"panels1\", true);\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "datePicker": {
        "getValue": {
          "!type": "fn()",
          "!doc": "현재 선택된 값을 반환한다.\n\n**Return:**\n\n```String``` - 선택된 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//calendarValueType속성이 설정하지 않은 경우(yearMonthDate 형태)\nvar tmpRs = datePicker1.getValue(); //yyyyMMdd으로 8자리 문자열 반환\n//return 예시) \"20020415\"\n\n//calendarValueType속성이 \"yearMonthDateTime\" 인 경우\nvar tmpRs = datePicker1.getValue(); //yyyyMMddHHmm으로 12자리 문자열 반환\n//return 예시) \"200204151758\"\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ndatePicker1.getDataListInfo();\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 regDate key와 input1 컴포넌트의 value를 binding 하는 경우\ndatePicker1.setRef(\"data:dataMap1.regDate\");\n\n//InstanceData의 res/userData/regDate 과 연동 할 경우.\ndatePicker1.setRef(\"res/userData/regDate\");\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트에 인자로 넘겨진 value와 같은 값을 가진 항목을 선택한다.\n\ncalendarValueType속성의 설정값에 따른 format이 적용된 value이어야 한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//calendarValueType속성을 \"yearMonthDateTime\"로 설정한 경우\ndatePicker1.setValue(\"201201012001\");\n//display 예시 ) 2012년 1월 1일 오후 8시 1분이 선택된다.\n```\n\n"
        }
      },
      "fusionchart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setActionURI": {
          "!type": "fn(uri: string)",
          "!doc": "exportJSChart 호출 시 대상이 되는 URI를 설정합니다.\n\n**Parameters:**\n\n```uri``` - ```String:Y``` -\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSVGString1": {
          "!type": "fn()",
          "!doc": "다운로드 type이 이미지(jpg,png)인 경우에는 이 함수를 사용한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "FusionChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(flag); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn(fileType: string, options: +Object)",
          "!doc": "JavaScript로 렌더링된 fusionchart를 jpg, png, pdf형식으로 export하는 함수입니다.\n\n**Parameters:**\n\n```fileType``` - ```String:Y``` - Export된 결과물의 파일 종류 (jpg, png, pdf)\n\n```options``` - ```Object:Y``` - Export된 결과물의 파일 이름\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {};\noptions.fileName = \"test\";\nfusionchart1.exportJSChart(\"jpg\", options);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setPlotColor": {
          "!type": "fn(colorArr: +Object, colorOption: +Object)",
          "!doc": "차트의 dataplot 색상을 지정합니다.\n\n**Parameters:**\n\n```colorArr``` - ```Array:Y``` - \n\n```colorOption``` - ```Array:Y``` -\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n var colorArr = [\"ff0000\",\"00ff00\",\"0000ff\"];\n chart1.setPlotColor(colorArr);\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getActionURI": {
          "!type": "fn()",
          "!doc": "exportJSChart 호출시 대상이 되는 URI를 반환합니다.\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setChartColumnRef": {
          "!type": "fn(ref: string, labelNode: string, seriesColumns: string)",
          "!doc": "FusionChart의 DataCollection 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesColumns``` - ```String:Y``` - seriesColumns\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnRef('data:dataList1','Month',\"[['Year2','Year3','Year1']]\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "addVTrendLine": {
          "!type": "fn(options: +Object)",
          "!doc": "FusionChart의 VTrendLine를 추가합니다. (Scatter/Bubble에서만 지원)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {\n    startValue: \"65\",\n    endValue : \"90\",\n    alpha: \"15\",\n    color: \"FFFF00\"\n};\nchart1.addVTrendLine(options);\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "modifySeriesName": {
          "!type": "fn(options: +Object)",
          "!doc": "fusionChart에 seriseName을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 옵션( seriesType,colId,newName,oldName )\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n SeriesType이 advanced 일때\n var options = {};\n options.seriesType = \"advanced\";\n options.colId = \"series1\";\n options.newName = \"summer\";\n chart1.modifySeriesName(options);\n \n SeriesType이 simple 일때\n options.seriesType = \"simple\";\n options.oldName = \"spring\";\n options.newName = \"summer\";\n chart2.modifySeriesName(options);\n\n```\n\n"
        },
        "addTrendLine": {
          "!type": "fn(options: +Object)",
          "!doc": "FusionChart의 TrendLine를 추가합니다. 브라우저에 적용하려면 함수 'draw'를 호출합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션의 JSON 형식의 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 트렌드라인 주요 속성\nvar trnOptions = {};\ntrnOptions.startValue = 20000;   // [필수] 시작 값.\ntrnOptions.endValue = 25000;     // 종료 값.\ntrnOptions.displayValue = \"기준\"; // 트렌드라인에 좌측 또는 우측에 표시할 레이블.\ntrnOptions.color = \"#FFD700\";    // 색.\ntrnOptions.alpha = 40;           // [0-100] 투명도. 속성 'displayValue'도 함께 적용.\ntrnOptions.showOnTop = 1;        // [default:0, 1] 데이터 플롯 위로 표시할 지의 여부.\ntrnOptions.valueOnRight = 1;     // [default:0, 1] 속성 'displayValue'의 값을 우측에 표시할지의 여부.\ntrnOptions.thickness = 4;        // 선 굵기로 px 단위로 적용. 속성 'isTrendZone'이 적용된 경우 무시.\n//trnOptions.isTrendZone = 1;    // [default:0, 1] 속성 'endValue'가 지정된 경우 트렌드 라인을 박스형태로 표시할지의 여부.\n\n// Fusionchart 'cht_exam1'의 트렌드라인을 추가합니다.\ncht_exam1.addTrendLine(trnOptions);\n\n// 속성 'displayValue'의 추가 속성\nlet attOptions = {};\nattOptions.trendValueAlpha = 100;           // [0-100] 속성 'displayValue'의 투명도.\nattOptions.trendValueFontSize = 13;         // 속성 'displayValue'의 글자 크기.\nattOptions.trendValueFontBold = 1;          // 속성 'displayValue'의 글자 굵게 적용 여부.\nattOptions.trendValueFont = \"\";             // 속성 'displayValue'의 글자체.\nattOptions.trendValueFontItalic = 1;        // 속성 'displayValue'의 글자 기울기 적용 여부.\nattOptions.trendValueBgColor = \"#000000\";   // 속성 'displayValue'의 배경색.\nattOptions.trendValueBgAlpha = 80;          // [0-100] 속성 'displayValue'의 배경색 투명도.\nattOptions.trendValueBorderAlpha = 100;     // [0-100] 속성 'displayValue'의 테두리 투명도.\nattOptions.trendValueBorderColor = \"#33333\";// [0-100] 속성 'displayValue'의 테두리 색.\nattOptions.trendValueBorderPadding = 4;     // [0-100] 속성 'displayValue'의 테두리 여백.\nattOptions.trendValueBorderRadius = 3;      // [px 단위] 속성 'displayValue'의 테두리의 모서리 반경.\nattOptions.trendValueBorderThickness = 0;   // [px 단위] 속성 'displayValue'의 테두리의 굵기.\n\n// Fusionchart 'cht_exam1'의 속성을 설정합니다.\ncht_exam1.setChartAttribute(attOptions);\n\n// Fusionchart 'cht_exam1'를 브라우저에 그립니다.\ncht_exam1.draw();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 FusionChart의 차트 데이타를 변경합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이타\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "FusionChart의 객체를 반환합니다. 반환받은 FusionChart 객체를 이용해서 FusionChart에서 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionChart 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.fc().setXMLUrl(\"mychartdata.xml\");\nchart1.fc().print();\nchart1.fc().signature();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "applyStyle": {
          "!type": "fn(styleType: string, styleName: string, options: +Object, objectNameArr: +Object)",
          "!doc": "FusionChart의 스타일을 적용합니다. \n\n단, 3.7 이하 버전에서만 지원. 3.11 버전 이상에서는 setChartAttribute 사용.\n\n**Parameters:**\n\n```styleType``` - ```String:Y``` - 스타일 타입(font, bevel, glow, animation, shadow)\n\n```styleName``` - ```String:Y``` - 스타일 이\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n```objectNameArr``` - ```Array:Y``` - 스타일을 적용할 chart object\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {\n    color:\"FF0000\",\n    font:\"15\", \n    bold:\"1\"\n};\nchart1.applyStyle(\"font\", \"captionFont\", options, [\"Caption\",\"XAXISNAME\"]);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setChartColumnSimpleRef": {
          "!type": "fn(ref: string, labelNode: string, seriesNode: string, valueNode: string)",
          "!doc": "seriesType이 simple인 차트의 FusionChart의 DataCollection 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesNode``` - ```String:Y``` - seriesNode\n\n```valueNode``` - ```String:Y``` - valueNode\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnSimpleRef(null,'Month', 'Year1','Year1');\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "FusionChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 적용할 옵션 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n    lineColor:\"d99103\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "changeType": {
          "!type": "fn(chartType: string, chartColumnRef: +Object)",
          "!doc": "FusionChart의 chartType을 변경합니다.\n\n단, 3.11 이상의 버전에서만 지원.\n\n**Parameters:**\n\n```chartType``` - ```String:Y``` - \n\n```chartColumnRef``` - ```Object:N``` - chart에 적용할 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|chartColumnRef.ref|<String:N>|DataCollection id|\n|chartColumnRef.labelNode|<String:N>|labelNode|\n|chartColumnRef.seriesColumns|<String:N>|seriesColumns|\n|chartColumnRef.seriesNode|<String:N>|seriesNode|\n|chartColumnRef.valueNode|<String:N>|valueNode|\n|chartColumnRef.colorNode|<String:N>|colorNode|\n\n**Since:**\n\n5.0_2.5115B.20231219.160643\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "configure": {
          "!type": "fn(options: +Object)",
          "!doc": "FusionChart에서 표시되는 다양한 메세지를 변경 합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 설정할 configure 옵션 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.configure({\"ChartNoDataText\" :\"데이타가 없습니다.\"});\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "FusionChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "FusionChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "FusionChart의 차트데이터를 JSON String 형태로 반환합니다.\n\n**Return:**\n\n```Object:Y``` - 차트 데이타\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "multiselect": {
        "deleteSelectedItems": {
          "!type": "fn()",
          "!doc": "선택되어 있는 항목을 삭제합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 예 : 첫번째, 네번째 항목이 선택되어 있는 경우\n      var returnValue1 = multiselect1.deleteSelectedItems(); \n      첫번째, 네번째 항목이 삭제된다.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn(separator: string)",
          "!doc": "현재 선택된 항목의 label을 반환.\n\n항목이 여러 개인 경우, separator를 구분자로 하여 반환.\n\nseparator를 설정하지 않은 경우 space를 구분자로 사용.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택된 항목들의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째, 네번째 항목이 선택되어 있는 경우.\n// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.\nvar returnValue = multiselect1.getText(',');\n// (반환 값) '빨강,파랑'\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 인덱스를 반환. 여러 항목이 선택된 경우, separator를 사용하여 반환함.\n\nseparator를 설정하지 않을 경우, 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 간 구분자\n\n**Return:**\n\n```String``` - 선택된 항목의 인덱스가 담긴 문자열.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // 첫번째, 네번째 항목이 선택되어 있는 경우\n      var returnValue1 = multiselect1.getSelectedIndex(\",\");  // returnValue1은 '0,3'\n      var returnValue2 = multiselect1.getSelectedIndex(); // returnValue2는 '0 3'\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getAllValue": {
          "!type": "fn()",
          "!doc": "모든 항목의 value를 반환. 선택된 항목들은 공백으로 구분된 문자열로 반환.\n\n**Return:**\n\n```String``` - 모든 항목들의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//(예제)\n// 첫번째, 네번째 항목이 선택되어 있는 경우. \n// (아이템 이름(라벨)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.)\nvar returnValue = multiselect1.getAllValue();\n// (반환 값) '#ff0000 #000000 #00ff00 #0000ff ...'\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "컴포넌트가 가진 항목 개수를 반환.\n\n**Return:**\n\n```Number``` - 항목 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n var returnValue = multiselect1.getItemCount();\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "addItem": {
          "!type": "fn(value: string, label: string, index: number, refresh: bool)",
          "!doc": "선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 항목의 value\n\n```label``` - ```String:Y``` - 항목의 label\n\n```index``` - ```Number:N``` - 항목의 index\n\n```refresh``` - ```Boolean:N``` - 항목이 dataList(또는 instance)와 연동된 경우, dataList(instance)를 자동으로 갱신할지에 대한 여부. 값이 명시되지 않은 경우(undefined) dataListAutoRefresh 속성값을 따름.\n\n**Return:**\n\n```Number``` - 추가된 항목의 index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 하나의 항목만 가진 multiSelect의 경우\n<xf:select id=\"multiselect1\" style=\"position: relative;width: 148px;height: 21px;\" appearance=\"minimal\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[S]]><\/xf:label>\n            <xf:value><![CDATA[서울]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n\n// index를 지정하지 않고 항목 추가\nmultiselect1.addItem( 'N', '뉴욕' );  //\"서울\" 항목 하위로(제일 마지막에) 추가된다. 항목의 순서는 \"서울\",\"뉴욕\" 가 된다.\n// (반환 값) 1\n\n//index를 0으로 지정하여 항목 추가\nmultiselect1.addItem( 'R', '런던', 0 );   //0번째에 항목이 추가되어 \"서울\" 항목 위에 추가된다. 항목의 순서는 \"런던\",\"서울\",\"뉴욕\" 가 된다.\n// (반환 값) 0\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. \n\nDataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함. 명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "컴포넌트의 propertyName에 해당하는 style의 값을 설정.\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 바꾸고 싶은 style 값의 이름\n\n```value``` - ```String:Y``` - 설정할 style의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// width 변경\ncomponentId.setStyle(\"width\", 100); \n// 픽셀 단위를 기본으로 하며, componentId.setStyle(\"width\", \"100px\"); 과 동일.\n// %단위의 표현은 componentId.setStyle(\"width\", \"100%\"); 로 명시.\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행. MultiSelect는 필수입력 여부만 확인.\n```javascript\n(관련 속성)\n mandatory=true\n```\n\n\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 모든 항목이 선택 해제되어 있는 경우,\nvar returnValue = multiselect1.validate();\n// (반환 값) false\n// 한 항목이라도 선택되어 있는 경우, true가 반환됨.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn(separator: string)",
          "!doc": "컴포넌트의 선택된 항목들의 value를 반환.\n\n항목이 여러 개인 경우, separator를 구분자로 하여 반환.\n\nseparator를 설정하지 않은 경우 space를 구분자로 사용.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택된 항목들의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째, 네번째 항목이 선택되어 있는 경우.\n// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.\nvar returnValue = multiselect1.getValue(',');\n// (반환 값) '#ff0000,#0000ff'\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength \n minByteLength\n maxByteLength\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 multiselect 컴포넌트에 mandatory 속성을 정의했을 경우\n<xf:select appearance=\"minimal\" id=\"multiselect1\" style=\"position: absolute;width:272px;height:64px;left:889px;top:659px;\" mandatory=\"true\">\n    <xf:choices>\n        <xf:itemset nodeset=\"data:dataList3\">\n            <xf:label ref=\"label\"><\/xf:label>\n            <xf:value ref=\"value\"><\/xf:value>\n        <\/xf:itemset>\n    <\/xf:choices>\n<\/xf:select>\n\nvar returnObj = multiselect.validateObject();\n// (반환 값 - multiselect 값이 없을 경우)returnObj 객체 반환\n\nreturnObj.callerId = \"multiselect\" returnObj.type = \"mandatory\" returnObj.value = \"\"  \n// (반환 값 - multiselect 값이 있을 경우) 비어있는 객체가 반환 \n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. \n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "deleteItem": {
          "!type": "fn(index: string)",
          "!doc": "주어진 index에 해당하는 항목을 삭제.\n\n**Parameters:**\n\n```index``` - ```String:Y``` - 삭제할 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n var returnValue = multiselect1.deleteItem(0);\n // returnValue.label은 '빨강'이다.\n // returnValue.value는 '#ff0000'이다.\n // returnValue.xml은 [XML Object]이다.\n // WebSquare.xml.serialize( returnVal.xml )로 XML String을 확인한다.\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트에 인자로 넘겨진 value에 해당하는 항목을 선택하고 model에 반영.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하고자 하는 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째, 네번째 항목이 선택되어 있는 경우.\n// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.\nmultiselect1.setValue(\"#000000\");\n// 첫번째와 네번째 항목이 선택 해제되고, 검정색 항목만 선택됨.\n// 여러 항목을 선택하려면, 공백(space)을 구분자로 사용.\nvar colorArr = [];\n    colorArr[0] = \"#ff0000\" ; //빨강\n    colorArr[1] = \"#0000ff\" ; //파랑\n    colorArr[2] = \"#00ff00\" ; //초록\nmultiselect1.setValue(colorArr.join(\" \")); \n// (결과) 빨강, 파랑, 초록색이 선택됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getIdxValue": {
          "!type": "fn(index: number)",
          "!doc": "해당 index의 항목의 value를 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 해당 항목의 인덱스\n\n**Return:**\n\n```String``` - 해당 index의 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// 첫번째, 네번째 항목이 선택되어 있는 경우. \n// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.\nvar returnValue = multiselect1.getIdxValue(0);\n// (반환 값) '#ff0000'\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(idx: number)",
          "!doc": "주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 선택하려는 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째, 네번째 항목이 선택되어 있는 경우, 아래를 수행하면 두번째 항목도 추가로 선택됨.\n      multiselect1.setSelectedIndex(1);\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setText": {
          "!type": "fn(label: string)",
          "!doc": "인자로 넘겨진 label에 해당하는 항목을 선택.\n\n여러 항목을 선택할 경우 label을 공백으로 구분하여 인자로 넘겨야 함.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 선택하고자 하는 항목의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째, 네번째 항목이 선택되어 있는 경우.\n// 아이템 이름(label)은 색상이며, 아이템 값은 '#000000 ~ #ffffff'.\nmultiselect1.setText(\"검정\");\n// 첫번째와 네번째 항목이 선택 해제되고, 검정색 항목만 선택됨.\n// 여러 항목을 선택할 경우, 공백(space)을 구분자로 한 문자열을 사용.\nvar colorArr = [];\n    colorArr[0] = \"빨강\" ; \n    colorArr[1] = \"파랑\" ; \n    colorArr[2] = \"초록\" ; \nmultiselect1.setValue(colorArr.join(\" \")); \n// (결과) 빨강, 파랑, 초록색이 선택됨.\n```\n\n"
        }
      },
      "multiupload": {
        "setParamJSON": {
          "!type": "fn(param: +Object)",
          "!doc": "업로드하는 각 파일 별로 파라미터를 설정. \n\n(예) Tiger.jpg 및 Lion.jpg 등 각 파일 별로 다른 파라미터를 설정하여 업로드 가능.\n\n해당 메소드는 mode=html5_transparent일 때만 동작.\n\n**Parameters:**\n\n```param``` - ```Object:Y``` - parameter들이 들어있는 Object\n\n**Since:**\n\n5.0_4.4233B.20201110.144429\n\n**Sample:**\n\n```javascript\n(사용 방법)\n 1. getFileNames 혹은 geFileInfos를 사용하여 파일의 이름을 반환.\n 2. 파일 이름을 사용하여 파라미터 정보를 JSON 형태 생성. \n 3. setParamJSON()을 호출하여 파라미터 정보를 인자로 전달.\n ----------------------------------------------------------------------\n    var paramJSON = {}\n    var fileNames = multiupload1.getFileNames();\n    for(var fileName of fileNames) {\n        // paramJSON의 key로 파일 이름을 사용해야만 정상 동작함\n        paramJSON[fileName] = {\"param1\":\"파라미터1\", \"param2\":\"파라미터2\", ...};\n    }\n    multiupload1.setParamJSON(paramJSON);\n```\n\n"
        },
        "disableUpload": {
          "!type": "fn(disable: bool)",
          "!doc": "업로드 버튼  disable 시킵니다.\n\n**Parameters:**\n\n```disable``` - ```Boolean:Y``` - 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.disableUpload(true);\n 업로드 버튼을 비활성화한다.\n```\n\n"
        },
        "disableCancel": {
          "!type": "fn(disable: bool)",
          "!doc": "취소 버튼  disable 시킵니다.\n\n**Parameters:**\n\n```disable``` - ```Boolean:Y``` - 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.disableCancel(true);\n 취소 버튼을 비활성화한다.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setSubDir": {
          "!type": "fn(subDir: string)",
          "!doc": "multiupload의 subDir 경로를 설정합니다.\n\n**Parameters:**\n\n```subDir``` - ```String:Y``` -\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFileInfos": {
          "!type": "fn()",
          "!doc": "현재 멀티업로드 그리드에 있는 파일정보를 배열로 반환합니다.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n 멀티업로드 그리드에 파일리스트 예: Tiger.jpg, Lion.jpg\n var returnArr = multiupload1.getFileInfos();\n [{name:\"Tiger.jpg\",size:1024,displaySize:\"1Kb\"},{name:\"Lion.jpg\",size:2048,displaySize:\"2Kb\"}]\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "browserDisable": {
          "!type": "fn(disable: bool)",
          "!doc": "transparent 모드에서 파일 열기 기능을 disable 시킵니다. (transparent mode 전용)\n\n**Parameters:**\n\n```disable``` - ```Boolean:Y``` - disable 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.browserDisable(true);\n 멀티업로드를 클릭시, 파일 업로드 기능을 비활성화한다.\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setMaxFileCount": {
          "!type": "fn(value: number)",
          "!doc": "멀티 업로드 컴포넌트의 전송 가능 파일 개수를 value로 설정합니다.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - 최대 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setMaxFileCount(5);\n 한번에 전송 가능한 파일의 개수를 5개로 설정합니다.\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRefSuccessText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 완료 text를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 변경할 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setRefSuccessText('DONE');\n 멀티업로드 그리드의 status에 표시되는 완료 텍스트를 변경한다.\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setMessageDuplicateText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 중복 메시지 text 를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 변경할 중복 메시지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setMessageDuplicateText('파일 중복 오류');\n```\n\n"
        },
        "setTitleInput": {
          "!type": "fn(title: string)",
          "!doc": "multiupload 가 화면에서 div > span > input 으로 그려지는데 이 때, input의 title 속성을 설정합니다.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_2.3805B.20190924.181133\n\n**Sample:**\n\n```javascript\n multiupload.setTitleInput(\"inputTitle\");\n```\n\n"
        },
        "isUploading": {
          "!type": "fn()",
          "!doc": "업로드 중인지 여부를 반환합니다.\n\n**Return:**\n\n```Boolean``` - 업로드 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n var returnValue = multiupload1.isUploading();\n 업로드 중이면 returnValue는 true이다.\n```\n\n"
        },
        "changeMsaName": {
          "!type": "fn(msaName: string)",
          "!doc": "multiupload 객체를 multiupload 할 msaName을 변경합니다.\n\n**Parameters:**\n\n```msaName``` - ```String:Y``` - msaName\n\n**Since:**\n\n5.0_5.5130B.20240117.162839\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "dropFiles": {
          "!type": "fn(e: +Object)",
          "!doc": "multiupload 컴포넌트의 drag&drop 업로드 기능을 구현하기 위한 함수. (5.0_1.2701A.20170714.211228 버전에서 추가.)\n\n**Parameters:**\n\n```e``` - ```DragEvent:Y``` - dragEvent 객체 (이벤트 객체)\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n fileDropZone.addEventListener(\"drop\", multiupload.dropFiles, false);\n```\n\n"
        },
        "removeAllFiles": {
          "!type": "fn()",
          "!doc": "현재 멀티업로드 그리드에 있는 파일명을 모두 삭제합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 멀티업로드 그리드에 파일리스트 예: Tiger.jpg, Lion.jpg\n multiupload1.removeAllFiles();\n 멀티업로드 그리드에 있는 파일 리스트가 삭제된다.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setMessageMaxCountText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 최대파일 세부 메시지 text를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 변경할 메세지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setMessageMaxCountText('전송 가능한 파일 수');\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setParam": {
          "!type": "fn(index: number, name: string, value: string)",
          "!doc": "업로드 param 지정을 지정합니다.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 파라미터의 인덱스\n\n```name``` - ```String:Y``` - 파라미터 이름\n\n```value``` - ```String:Y``` - 파라미터 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setRefCancelText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 취소중 text 를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 제목\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setRefProgressText('CANCEL');\n 멀티업로드 그리드의 status에 표시되는 취소중 텍스트를 변경한다.\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "removeFile": {
          "!type": "fn(name: string)",
          "!doc": "업로드 하기 위해 선택된 파일 중에서 업로드에서 제외하려는 파일을 리스트에서 삭제합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - 삭제하려는 파일명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 선택된 파일리스트 예: Tiger.jpg, Lion.jpg\n multiupload1.removeFile(\"Tiger.jpg\");\n Tiger.jpg 파일이 리스트에서 삭제된다.\n```\n\n"
        },
        "getFileCount": {
          "!type": "fn()",
          "!doc": "현재 전송할 파일의 수를 반환합니다.\n\n**Return:**\n\n```Number``` - 전송할 파일의 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 멀티업로드에 전송할 파일 예: Tiger.jpg, Lion.jpg\n var returnValue = multiupload1.getFileCount();\n returnValue는 2이다.\n```\n\n"
        },
        "setRefProgressText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 진행중 text를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 변경할 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setRefProgressText('PROCESSING');\n 멀티업로드 그리드의 status에 표시되는 진행중 텍스트를 변경한다.\n```\n\n"
        },
        "setMaxFileSize": {
          "!type": "fn(value: number)",
          "!doc": "멀티 업로드 컴포넌트의 전송 가능 파일 사이즈를 value로 설정합니다.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - 최대 파일 사이즈(Kb)\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\n multiupload1.setMaxFileSize(1*1024);\n 한번에 전송 가능한 파일의 사이를 1MB로 설정합니다.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "changeAction": {
          "!type": "fn(action: string)",
          "!doc": "multiupload 객체가 입력받은 값을 multiupload할 때 URL을 설정합니다.\n\n**Parameters:**\n\n```action``` - ```String:Y``` - multiupload시에 전송될 URL\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setMessageMaxSizeText": {
          "!type": "fn(label: string)",
          "!doc": "멀티 업로드 컴포넌트의 최대 사이즈 메시지 text 를 바꿉니다.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 변경할 메시지\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.setMessageMaxSizeText('전송 가능 최대 크기 (byte)');\n```\n\n"
        },
        "setSelectCallback": {
          "!type": "fn(functionName: string)",
          "!doc": "selectCallback 함수를 설정합니다.\n\n**Parameters:**\n\n```functionName``` - ```String:Y``` - selectCallback으로 지정할 함수 이름\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n console.log( typeof newSelectCallback ); // function\n multiupload1.setSelectCallback(\"newSelectCallback\");\n```\n\n"
        },
        "startUpload": {
          "!type": "fn()",
          "!doc": "멀티 업로드 컴포넌트의 업로드를 시작합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n multiupload1.startUpload();\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getFileNames": {
          "!type": "fn()",
          "!doc": "현재 멀티업로드 그리드에 있는 파일명을 배열로 반환합니다.\n\n**Return:**\n\n```Array``` - 그리드에 있는 파일명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 멀티업로드 그리드에 파일리스트 예: Tiger.jpg, Lion.jpg\n var returnArr = multiupload1.getFileNames();\n returnArr.length는 2이다.\n returnArr[0]은 Tiger.jpg, returnArr[1]은 Lion.jpg이다.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "input": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getDataType": {
          "!type": "fn()",
          "!doc": "dataType 속성값을 반환. [default: text]\n\n**Return:**\n\n```String``` - input의 dataType\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input이 정의 된 경우\n<xf:input id=\"input1\" dataType=\"number\" style=\"position: relative;width: 140px;height: 21px;\"><\/xf:input>\n\nvar returnValue = input1.getDataType();\n//return 예시 ) \"number\"\n```\n\n"
        },
        "commit": {
          "!type": "fn()",
          "!doc": "input이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 \n\n모든키의 실시간 적용은 지원하지 않으며, Enter키와 tab키 동작일 경우만 사용가능\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n<xf:input onkeydown=\"scwin.input1_onkeydown\" ref=\"data:dataMap1.key1\"><\/xf:input>\n```javascript\n scwin.input1_onkeydown = function(e) { \n    if((e.charCode || e.keyCode) === 13) { \n        input1.commit(); // input에 현재 입력된 값을 dataMap1.key1에 반영한다. 이를 생략할 경우 key1값을 꺼냈을 때 input에 입력되기 이전의 값을 얻게 된다. \n        dataMap1.get(\"key1\");\n    }\n }\n```\n\n"
        },
        "getFormattedValue": {
          "!type": "fn()",
          "!doc": "formatted된 input의 값을 반환한다.\n\n**Return:**\n\n```String``` - formatted된 input의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//input1컴포넌트의 dataType이 number이고 displayFormat을 \"#,###\"으로 적용하고 1000000을 입력 한 경우\nvar returnValue = input1.getFormattedValue();\n//return 예시 )\"1,000,000\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ninput1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setAllowChar": {
          "!type": "fn(allowChar: string)",
          "!doc": "allowChar 속성값을 변경한다.\n\n**Parameters:**\n\n```allowChar``` - ```String:Y``` - 변경할 allowChar 속성 값\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\ninput1.setAllowChar(\"5-9\");\n```\n\n"
        },
        "getDisplayFormatter": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.\n\n**Return:**\n\n```String``` - displayFormatter에 설정 된 함수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//input1 컴포넌트의 displayFormatter=\"eduObj.fn_numFormat\" 설정 시\nvar returnValue = input1.getDisplayFormatter();\nreturn 예시 ) \"eduObj.fn_numFormat\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getMandatory": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 반환\n```javascript\n(관련 속성)\n mandatory\n```\n\n\n\n**Return:**\n\n```Boolean``` - mandatory 설정 값\n\n**Since:**\n\n5.0_4.4847B.20230315.175349\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getDisplayFormat": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트에 설정 된 displayFormat을 반환한다.\n\n**Return:**\n\n```String``` - 현재 설정 된 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//dataType이 number이고 displayFormat을 #,###으로 적용 한 경우\nvar returnValue = input1.getDisplayFormat();\n//return 예시 ) \"#,###\"\n \n//dataType이 date이고 dateMask를 yyyy-MM이고 ioFormat을 yyyyMM로 적용 한 경우\nvar returnValue = input1.getDisplayFormat();\n//return 예시 ) \"yyyy-MM\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setIoFormat": {
          "!type": "fn(ioFormat: string, displayFormat: string)",
          "!doc": "input의 ioFormat 속성을 설정한다. dataType이 date인 경우에만 동작한다.\n\n**Parameters:**\n\n```ioFormat``` - ```String:Y``` - 새로 설정할 ioFormat\n\n```displayFormat``` - ```String:N``` - 새로 설정할 displayFormat (dateMask)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" dataType=\"date\" ioFormat=\"yyyyMMdd\"><\/xf:input>\ninput1.setIoFormat(\"ddMMyyyy\", \"dd/mm/yyyy\"); // ioFormat및  displayFormat을 새로 설정한다.\n// input에 값이 설정되어 있을 경우, ioFormat이 기존과 달라지게 되면 input값이 ioFormat에 맞게 자동으로 변경된다. 값이 변할경우 onchange이벤트 발생.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "setMaxLength": {
          "!type": "fn(maxLength: number)",
          "!doc": "maxLength를 설정.\n\n**Parameters:**\n\n```maxLength``` - ```Number:Y``` - 설정할 maxLength 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ninput1.setMaxLength(7); // 최대값을 \"7\"로 지정.\ninput1.setMaxLength(\"\"); // maxLength 제한을 해제.\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트의 readonly 적용.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setDefaultValue": {
          "!type": "fn(initValue: string)",
          "!doc": "컴포넌트의 initValue를 설정한다.\n\n주요 활용은 본 컴포넌트 상위의 group 컴포넌트의 init API를 사용 할 때 컴포넌트의 value를 ''(empty string) 대신 개발자가 설정한 초기값, 즉 initValue의 값으로 설정 할 때 쓰인다.\n\n**Parameters:**\n\n```initValue``` - ```String:Y``` - 새로 설정 할 initValue\n\n**Since:**\n\n2.0_1.3742B.20131231.102003\n\n**Sample:**\n\n```javascript\n//아래와 같이 group과 input 컴포넌트를 정의.\n<xf:group id=\"group1\" style=\"position:relative;\">\n    <xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n<\/xf:group>\n\n//input 컴포넌트의 초기값 설정.\ninput1.setDefaultValue(\"WebSquare\");\n\n//group의 init API 호출\ngroup1.init();\n//이후 input1의 value가 ''이 아닌 'WebSquare'로 설정 됨.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setMandatory": {
          "!type": "fn(status: bool)",
          "!doc": "컴포넌트의 유효성 관련 속성값을 설정 및 미설정\n```javascript\n(관련 속성)\n mandatory\n```\n\n\n\n**Parameters:**\n\n```status``` - ```Boolean:Y``` - mandatory 설정값\n\n**Since:**\n\n5.0_4.4847B.20230315.175349\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setMaxByteLength": {
          "!type": "fn(maxByteLength: number)",
          "!doc": "maxByteLength를 동적으로 설정합니다.\n\n**Parameters:**\n\n```maxByteLength``` - ```Number:Y``` - 설정할 maxByteLength 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ninput1.setMaxByteLength(7);\n```\n\n"
        },
        "focusPreTabOrder": {
          "!type": "fn()",
          "!doc": "자신이 nextTabID로 설정되어 있는 경우, 자신을 nextTabID로 지정한 컴포넌트로 포커스를 이동한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\ninput1.focusPreTabOrder();\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = input1.getNextTabID();\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ninput1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 name key와 input1 컴포넌트의 value를 binding 하는 경우\ninput1.setRef(\"data:dataMap1.name\");\n\n//InstanceData의 res/userData/name 과 연동 할 경우.\ninput1.setRef(\"res/userData/name\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setDisplayFormatter": {
          "!type": "fn(formatter: string)",
          "!doc": "컴포넌트의 displayFormatter 속성을 설정한다.\n\n**Parameters:**\n\n```formatter``` - ```String:Y``` - 새로 설정 할 format용 함수명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input이 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n//전역스크립트에 아래와 같이 input의 format Function을 정의 한다.(value의 값을 대문자로 치환) \nvar commObj = {}; \ncommObj.fn_setUpper = function(value){\n    value = value.toUpperCase();\n    return value;\n};\n\n//input1컴포넌트의 displayFormatter를 설정.\ninput1.setDisplayFormatter(\"commObj.fn_setUpper\");\n\n//표현 예시 ) 사용자가 'hong gil dong'을 입력시 'HONG GIL DONG'로 표현 된다.\n```\n\n"
        },
        "setPlaceholder": {
          "!type": "fn(placeholderStr: string)",
          "!doc": "placeholder 속성값을 변경한다.\n\n**Parameters:**\n\n```placeholderStr``` - ```String:Y``` - 변경할 placeholder의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\ninput1.setPlaceholder(\"이름을 입력하세요\");\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 검증 속성)\n mandatory\n minlength\n maxlength\n minByteLength\n maxByteLength\n```\n\n\n\n**Return:**\n\n```Boolean``` - 유효성 검사 결과 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// mandatory 속성을 지정.\n<xf:input id=\"input1\" mandatory=\"true\"><\/xf:input>\n\nvar returnValue = input1.validate();\n// (반환 값) - false (input의 값이 없을 경우) \n// (반환 값) - true (input의 값이 있을 경우) \n\n// displaymessage=\"true\" 속성을 지정하고 유효성 검사에서 false가 반환될 경우,\n// 엔진에서 내부에서 설정한 \"필수 입력 항목입니다\"가 표시됨.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "컴포넌트의 displayFormat 속성을 설정한다.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" dataType=\"number\"><\/xf:input>\n\n//input1 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.\ninput1.setDisplayFormat(\"#,###.#0\");\n\n//사용자가 1000000 을 입력 할 경우 1,000,000.00 로 표현.\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "컴포넌트의 value를 반환한다.\n\n**Return:**\n\n```String``` - 컴포넌트의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//사용자가 input1 컴포넌트에 \"WebSquare\"를 입력 한 경우\ninput1.getValue();\n//return 예시 ) \"WebSquare\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength \n minByteLength\n maxByteLength\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트에 mandatory 속성을 정의했을 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" mandatory=\"true\"><\/xf:input>\n\nvar returnObj = input1.validateObject();\n// (반환 값 - input의 값이 없을 경우 )returnObj 객체 반환\n\nreturnObj.callerId = \"input1\" returnObj.type = \"mandatory\" returnObj.value = \"\"   \n// (반환 값 - input의 값이 있을 경우)비어있는 객체가 반환 \n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨.\n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "focusNextTabOrder": {
          "!type": "fn()",
          "!doc": "nextTabID가 설정되어 있는 경우, nextTabID에 해당하는 컴포넌트로 포커스를 이동한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\ninput1.focusNextTabOrder();\n```\n\n"
        },
        "getDisplayValue": {
          "!type": "fn()",
          "!doc": "현재 보여지는(format이 적용 된) 값을 반환한다.\n\n**Return:**\n\n```String``` - foramt이 적용 된 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//input1컴포넌트의 dataType이 number이고 displayFormat을 \"#,###\"으로 적용하고 1000000을 입력 한 경우\nvar returnValue = input1.getDisplayValue();\n//return 예시 )\"1,000,000\"\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트의 value를 설정한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - input의 value 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\ninput1.setValue(\"WebSquare\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwRealtimeChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDataStreamInfo": {
          "!type": "fn(dataStreamUrl: +Object)",
          "!doc": "fwRealtimeChart의 실시간 기능에 필요한 dataStreamUrl을 설정.\n\n**Parameters:**\n\n```dataStreamUrl``` - ```Object:Y``` - 실시간 기능에 필요한 정보 (dataStreamURL, refreshInterval, dataStamp, showRTMenuItem)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nfwRealtimeChart1.setDataStreamInfo({dataStreamURL:\"example.com/test.jsp\",\"refreshInterval\":\"3\",\"seriesArray\":\"[{'seriesname':'A'},{'seriesname':'B'},{'seriesname':'C'}]\"});\n\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "isUpdateActive": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart에 실시간 기능사용시 현재 fwRealtimeChart가 update중인지 확인함.\n\n**Return:**\n\n```Boolean:Y``` - refresh 실행시 : true , refresh 미실행시 : false\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.isUpdateActive();\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "stopUpdate": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart에 실시간 기능사용시 update를 중지함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwRealtimeChart1.stopUpdate();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "clearChart": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart에 실시간 기능사용시 dataPlot를 초기화함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwRealtimeChart1.clearChart();\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwRealtimeChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "restartUpdate": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart에 실시간 기능사용시 중지된 update를 다시 시작함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwRealtimeChart1.restartUpdate();\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwRealtimeChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwGaugeChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwRealtimeChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "wframe": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getWindow": {
          "!type": "fn()",
          "!doc": "WFrame의 Scope 객체를 반환. WFrame 화면 안의 객체를 접근하려면 이 함수를 호출함. (Scope 지원 기능.)\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n // (예제)\n // 부모 화면에서 wframe1 내부의 \"input1\" 컴포넌트에 접근\n // 해당 컴포넌트의 값을 \"WebSquare5\"로 설정.\n\n wframe1.getWindow().input1.setValue(\"WebSquare5\");\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getObj": {
          "!type": "fn(id: string)",
          "!doc": "scope=true 설정을 사용할 경우, WFrame 내부의 화면 페이지에서 주어진 ID에 해당하는 객체를 반환.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 해당 WFrame의 Scope 에 속한 컴포넌트의 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // (예제)\n // 부모 화면에서 wframe1 내부의 \"input1\" 컴포넌트에 접근\n // 해당 컴포넌트의 값을 \"WebSquare5\"로 설정.\n \n wframe1.getObj(\"input1\").setValue(\"WebSquare5\");\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getParentFrame": {
          "!type": "fn()",
          "!doc": "WFrame 중첩 구조에서 자신의 부모 WFrame 객체를 찾아 반환하는 함수.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // (예제)\n // wframe1이 wframe2에 포함된 상황에서 \n // wframe1의 부모(wframe2)에 접근하여 스타일을 변경. \n \nwframe1.getParentFrame().setStyle(\"width\", \"500px\");\n\n // (시행 결과) wframe2dml 폭이 500px로 변경됨.\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setSrc": {
          "!type": "fn(src: string)",
          "!doc": "(SP5 async) src 속성을 설정하고, 해당 값으로 명시된 페이지를 렌더링.\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await wframe.setSrc(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```src``` - ```String:Y``` - 새로 설정할 WFrame의 src 값\n\n**Return:**\n\n```Promise``` - (SP5)setSrc 성공 여부 (true/false)를 포함하는 Promise 객체 반환\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // SP5에서 setSrc가 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.setSrcTest또한 async function이 되어야 한다.\n scwin.setSrcTest = async function() {\n     // 실제 전달할 데이터 정의. 새로 열릴 탭에 데이터를 전달 (dataObject를 통해 전달 가능) \n     var rowJSON = { \n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false},\n        \"Region\": \"Seoul\",  \n        \"Carrier\": true \n     }; \n \n     // 새로 열릴 화면에 데이터를 전달 (dataObject를 통해 전달 가능)\n     var obj = { \n        \"dataObject\": {\n            \"type\" : \"json\",\n            \"name\" : \"wframeParam\",  \n            \"data\" : rowJSON \n         }\n     };\n     // SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 setSrc호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await wframe1.setSrc(\"popup_sub.xml\", obj); \n     common.doSomething(); // 만약 위의 setSrc 호출 시 await 키워드를 생략할 경우 setSrc가 완료되기 전에 이 함수가 호출된다. \n }\n\n \n // WFrame 화면에서 전달 받은 데이터를 확인하는 예제 \n // var paramData = $p.getParameter(\"wframeParam\");\n // var data = JSON.stringify(paramData);\n // alert(data);\n \n\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSrc": {
          "!type": "fn()",
          "!doc": "src 속성 값을 반환. (현재 설정된 화면 페이지(XML)의 경로)\n\n**Return:**\n\n```String``` - src 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = wframe1.getSrc();\n// (반환 값 예시) \"/common/searchBox01.xml\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setMode": {
          "!type": "fn(mode: string)",
          "!doc": "WFrame의 mode 속성을 동적으로 설정.\n\n**Parameters:**\n\n```mode``` - ```String:Y``` - WFrame의 mode 속성으로 설정할 값. (\"async\" 혹은 \"sync\")\n\n|property|type|description|\n|:-|:-|:-|\n|\"async\"|Script를 비동기로 실행.|null|\n|\"sync\"|Script를 동기로 실행.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getObjList": {
          "!type": "fn()",
          "!doc": "scope=true 설정을 사용할 경우, WFrame 내부에 포함된 객체의 ID 목록을 배열 형태로 반환.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // (예제)\n // 부모 화면에서 wframe1 내부에 포함된 객체의 ID 목록을 확인 \n\n var list = wframe1.getObjList();\n alert(list);\n\n // (반환 값 예시) scwin,$p,input1,trigger1,wq_uuid_3\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "aliasDataList": {
        "setScope": {
          "!type": "fn(scope: string)",
          "!doc": "Scope를 동적으로 변경. 즉 현재 참조하는 dataList를 동적으로 바꾸는 함수. \n\n실행 후, aliasDataList와 바인딩된 컴포넌트들은 자동으로 값이 초기화됨.\n\n**Parameters:**\n\n```scope``` - ```String:Y``` - 참조할 dataList 경로\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 참조할 dataList를 동적으로 변경.\naliasDataList1.setScope(\"/dataList1\");\n```\n\n"
        },
        "getObj": {
          "!type": "fn()",
          "!doc": "현재 aliasDataList가 참조하고 있는 dataList 객체를 반환.\n\n**Return:**\n\n```Object``` - 현재 Scope로 참조하고 있는 dataList 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Scope에 지정된 객체를 반환\nvar parentDataList = aliasDataList1.getObj();\n```\n\n"
        }
      },
      "progressbar": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "animate": {
          "!type": "fn(number: number, number: number, options: number, callback: +Object)",
          "!doc": "상태 바에 적용할 애니메니션 효과를 설정.\n\n**Parameters:**\n\n```number``` - ```Number:Y``` - 상태 바가 전체를 기준으로 시작하는 위치의 %값\n\n```number``` - ```Number:Y``` - 상태 바가 전체를 기준으로 멈추는 위치의 %값\n\n```options``` - ```Number:Y``` - 설정된 애니메이션이 동작하는 시간\n\n```callback``` - ```Function:Y``` - 콜백 함수\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n progressbar1.animate(0,30,3000,function(){console.log(\"finished\")});\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "get": {
          "!type": "fn()",
          "!doc": "상태 바의 현재 위치 값을 반환.\n\n**Return:**\n\n```Number``` - 현재 상태 바의 위치.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n var retVal = progressbar1.get();\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "set": {
          "!type": "fn(number: number)",
          "!doc": "상태 바의 값을 설정.\n\n**Parameters:**\n\n```number``` - ```Number:Y``` - 인자가 입력되지 않는 경우, step 값을 사용.\n\n**Return:**\n\n```Number``` - 현재 상태 바의 위치 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n progressbar1.set(50);\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "stop": {
          "!type": "fn()",
          "!doc": "상태 바의 애니메이션 효과를 중단.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n progressbar1.stop();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwFunnelChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "fwFunnelChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(false); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn()",
          "!doc": "javascript로 렌더링된 fwFunnelChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nfwFunnelChart1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setPlotColor": {
          "!type": "fn()",
          "!doc": "차트의 dataplot 색상을 지정합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var colorArr = [\"ff0000\",\"00ff00\",\"0000ff\"];\n chart1.setPlotColor(colorArr);\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setChartColumnRef": {
          "!type": "fn(ref: string, labelNode: string, seriesColumns: string)",
          "!doc": "fwPyramidChart의 DataCollection 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesColumns``` - ```String:Y``` - seriesColumns\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnRef('data:dataList1','Month',\"[['Year2','Year3','Year1']]\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwFunnelChart의 차트 데이터를 변경합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이타\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwFunnelChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setChartColumnSimpleRef": {
          "!type": "fn(ref: string, labelNode: string, seriesNode: string, valueNode: string)",
          "!doc": "seriesType이 simple인 차트의 fwFunnelChart의 dataList 바인딩 속성을 셋팅합니다.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - attribute DataCollection id\n\n```labelNode``` - ```String:Y``` - labelNode\n\n```seriesNode``` - ```String:Y``` - seriesNode\n\n```valueNode``` - ```String:Y``` - valueNode\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.setChartColumnSimpleRef(null,'Month', 'Year1','Year1');\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwFunnelChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwFunnelChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwFunnelChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "pivotTable": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwBulletChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "FusionChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_2.5115B.20231219.160643\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(flag); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn(type: string)",
          "!doc": "fwBulletChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 출력타입\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwBulletChart.exportJSChart(\"jpg\");\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nfwBulletChart1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwBulletChart의 차트 데이터를 설정함.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwBulletChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(dataList: string, targetNode: string, valueNode: string)",
          "!doc": "fwBulletChart에 dataList를 바인딩합니다.\n\n**Parameters:**\n\n```dataList``` - ```String:Y``` - id\n\n```targetNode``` - ```String:Y``` - column id\n\n```valueNode``` - ```String:Y``` - column id\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwBulletChart.setRef(\"data:dataList1\",\"targetNode\",\"valueNode\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwBulletChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwBulletChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwFunnelChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwBulletChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "fwBulletChart에  target,value 값을 객체로 반환합니다.\n\n**Return:**\n\n```Object:Y``` - target,value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n fwBulletChart1.getValue();\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: +Object)",
          "!doc": "fwBulletChart에 value값을 설정합니다.\n\n**Parameters:**\n\n```value``` - ```Object:Y``` - fwBulletChart에 설정할 value, target 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n fwBulletChart1.setValue({target:\"100\",value:\"20\"}); \n\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwBulletChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "scheduleCalendar": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addSchedule": {
          "!type": "fn(schedule: +Object)",
          "!doc": "일정을 추가. \n\ndataList와 연동 시에는 dataList의 컬럼 ID에 맞는 object를 생성해서 파라미터로 전달 가능.\n\n**Parameters:**\n\n```schedule``` - ```Object:Y``` - 추가할 일정 정보\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// dataList(columnID : \"colTitle\", \"colEnd\", \"colId\", \"colStart\")와 연동된 경우, 아래를 실행.\nscheduleCalendar1.addSchedule({\"colTitle\": \"추가 타이틀 2222\",\"colEnd\": \"20171222\",\"colId\": \"ADD_id_223\",\"colStart\": \"20171222\"});\n\n//dataList와 연동되어 있지 않는 경우, 아래를 실행. \nscheduleCalendar1.addSchedule({\"title\": \"추가 타이틀 2222\",\"end\": \"20171222\",\"id\": \"ADD_id_223\",\"start\": \"20171222\"});\n\n```\n\n"
        },
        "gotoCalendar": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜로 이동.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 이동할 날짜\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\nschedule1.gotoCalendar(\"20171013\");\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nscheduleCalendar1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "removeschedule": {
          "!type": "fn(id: string)",
          "!doc": "일정을 삭제. \n\ndataCollection에 id 컬럼이 없는 경우, id 값은 title 값으로 대체됨.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 일정 ID\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "changeView": {
          "!type": "fn(view: string)",
          "!doc": "scheduleCalendar의 view를 변경.\n\n**Parameters:**\n\n```view``` - ```String:Y``` - 새로 사용할 View의 종류\n\n|property|type|description|\n|:-|:-|:-|\n|month| |null|\n|basicWeek|null|null|\n|basicDay|null|null|\n|agendaWeek|null|null|\n|agendaDay|null|null|\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// (예제)\nsheculeCalendar1.changeView(\"basicWeek\");\n```\n\n"
        },
        "getView": {
          "!type": "fn()",
          "!doc": "ScheduleCalendar의 현재 view 정보를 조회.\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\nsheculeCalendar1.getView();\n// { name: \"\", title: \"\", intervalStart: \"\", intervalEnd: \"\" }\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setHeaderBtn": {
          "!type": "fn(Options: +Object)",
          "!doc": "칼렌더 좌우 상단에 버튼 및 타이틀 설정.\n\n**Parameters:**\n\n```Options``` - ```Object:Y``` - header 버튼 설정 정보\n\n|property|type|description|\n|:-|:-|:-|\n|option.headerLeftBtn|<Boolean:N>|좌측 상단 버튼 설정 여부 (true/false)|\n|options.headerRightBtn|<Boolean:N>|좌측 상단 버튼 설정 여부 (true/false)|\n|options.headerTitle|<Boolean:N>|칼렌더 헤더 타이틀 설정 여부 (true/false)|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n scheduleCalendar1.setHeaderBtn({headerLeftBtn:false,headerRightBtn:false,headerTitle:false});\n\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getScheduleInfo": {
          "!type": "fn(id: string)",
          "!doc": "일정 정보를 반환.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 일정 ID\n\n**Return:**\n\n```Object:Y``` - event 일정 (id, title, start, end, dataList rowIndex 정보를 포함한 객체)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getScheduleIndex": {
          "!type": "fn(id: string)",
          "!doc": "일정 ID에 해당하는 dataList rowIndex를 반환\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 일정 ID\n\n**Return:**\n\n```Object:Y``` - rowIndex id에 해당하는 dataList rowIndex\n\n**Since:**\n\n5.0_4.4812B.20230203.171911\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setDayNameStyle": {
          "!type": "fn(options: +Object)",
          "!doc": "칼렌더의 요일 컬럼에 적용할 스타일을 지정.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 스타일 정보\n\n|property|type|description|\n|:-|:-|:-|\n|options.header|<String:Y>|헤더 스타일|\n|options.body|<String:Y>|바디 스타일|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n            var options = {\n                sun : {\n                    header : {\n                        \"color\":\"#ff0000\"\n                    },\n                    body : {\n                        background : { \"background-color\":\"#ff0000\",\"opacity\":\"0.2\" },\n                        num: { \"color\" : \"#0000ff\" }\n                    }\n                }\n            };\n            scheduleCalendar1.setDayNameStyle(options);\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwGaugeChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDataStreamInfo": {
          "!type": "fn(dataStreamUrl: +Object)",
          "!doc": "fwGaugeChart의 실시간 기능에 필요한 dataStreamUrl을 설정.\n\n**Parameters:**\n\n```dataStreamUrl``` - ```Object:Y``` - 실시간 기능에 필요한 정보 (dataStreamURL, refreshInterval, dataStamp, showRTMenuItem)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n fwGaugeChart1.setDataStreamInfo({dataStreamURL:\"example.com/test.jsp\",\"refreshInterval\":\"3\"});\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "FusionChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_2.5115B.20231219.160643\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(flag); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn()",
          "!doc": "fwGaugeChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nfwGaugeChart1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "isUpdateActive": {
          "!type": "fn()",
          "!doc": "fwGaugeChart에 실시간 기능사용시 현재 fwGaugeChart가 update중인지 확인함.\n\n**Return:**\n\n```Boolean:Y``` - refresh 실행시 : true , refresh 미실행시 : false\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.isUpdateActive();\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "stopUpdate": {
          "!type": "fn()",
          "!doc": "fwGaugeChart에 실시간 기능사용시 update를 중지함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.stopUpdate();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwGaugeChart의 차트 데이터를 설정합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwGaugeChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "clearChart": {
          "!type": "fn()",
          "!doc": "fwGaugeChart에 실시간 기능사용시 설정된값을 초기화함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.clearChart();\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(dataList: string, valueNode: string)",
          "!doc": "fwGaugeChart에 binding할 dataList를 설정.\n\n**Parameters:**\n\n```dataList``` - ```String:Y``` - fwGaugeChart에 설정할 dataList ID\n\n```valueNode``` - ```String:Y``` - 사용할 value 노드\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n fwGaugeChart1.setRef(\"data:dataList2\",\"valueNode\");\n\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwGaugeChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nchart1.setChartAttribute(options);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "restartUpdate": {
          "!type": "fn()",
          "!doc": "fwGaugeChart에 실시간 기능사용시 중지된 update를 다시 시작함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.restartUpdate();\n```\n\n"
        },
        "changeType": {
          "!type": "fn(chartType: string)",
          "!doc": "fwGaugeChart의 chartType을 변경합니다.\n\n**Parameters:**\n\n```chartType``` - ```String:Y``` -\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGaugeChart1.changeType(\"bulb\");\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwGaugeChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwGaugeChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwGaugeChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "fwGaugeChart에 value값을 반환합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: +Object)",
          "!doc": "fwGaugeChart에 값을 설정합니다.\n\n**Parameters:**\n\n```value``` - ```Object:Y``` - fwGaugeChart에 설정할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwGaugeChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "inputCalendar": {
        "select": {
          "!type": "fn()",
          "!doc": "input에 입력 된 값을 select한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ninputCalendar1.select();\n//display 예시 ) input의 날짜 문자열을 drag하여 선택한 상태가 된다.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setInputReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "인자로 넘겨받은 boolean값에 따라 inputbox만을 readOnly할 수 있다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - 속성을 활성화 시키려면 true, 비활성화 시키려면 false\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n 예: inputCalendar1.setInputReadOnly(true); 함수의 입력값이 true일 경우, input부분만 readOnly 상태가 된다.\n 함수 입력 값이 false인 경우, ReadOnly속성은 적용되지 않는다.\n```\n\n"
        },
        "getFormattedValue": {
          "!type": "fn(formatStr: string)",
          "!doc": "formatStr의 패턴이 적용된 value를 반환하며 foramtStr의 값이 없는 경우  displayFormat속성에 적용된 패턴을 사용하여 value를 반환한다.\n\n**Parameters:**\n\n```formatStr``` - ```String:N``` - format을 적용할 문자열\n\n**Return:**\n\n```String``` - format이 적용된 value\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//formatStr 파라메터를 넘기지 않는 경우\nvar returnValue1 = inputCalendar1.getFormattedValue();\n//return 예시 ) \"2002-04-15\"\n\n//formatStr 파라메터를 넘기는 경우\nvar returnValue2 = inputCalendar1.getFormattedValue(\"dd-MM yyyy\");\n//return 예시 ) \"15-04 2002\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "입련란으로 포커스를 이동. 브라우저의 포커스 동작 방식에 영향을 받음.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ninputCalendar1.focus();\n//input에 value가 있는 경우 마지막 문자 다음에 포커스가 위치한다.\n```\n\n"
        },
        "setDisableBeforeDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "입력 받은 날짜 이전의 날짜들은 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성화 처리 기준 날짜\n\n**Since:**\n\n5.0_4.5107B.20231207.195312\n\n**Sample:**\n\n```javascript\n//ioFormat과 동일하게 입력\n//ioFormat이 yyyyMMdd인 경우\ninputCalendar.setDisableBeforeDate(\"20170410\");\n\n//ioFormat이 ddMMyyyy인 경우\ninputCalendar.setDisableBeforeDate(\"10042017\");\n//display 예시 ) 2017년 4월 10일 이전 날짜는 비활성화 되어 선택 불가능.\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "setEnabledDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜를 활성화한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 활성화할 날짜\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ncalendar1.setEnabledDate(\"20160627 20180627\");\n//display 예시 ) 2016년 06월 27일, 2018년 06월 27일에 해당하는 날짜는 활성화 한다.\ncalendar1.setEnabledDate(\"*\"); // setDisabledDate API로 비활성화한 날짜를 제외한 전체 날짜를 활성화한다.\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ninputCalendar1.getDataListInfo();\n```\n\n"
        },
        "setDisableAfterDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "입력 받은 날짜 이후의 날짜들을 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성화 처리의 기준 날짜.\n\n**Since:**\n\n5.0_4.5107B.20231207.195312\n\n**Sample:**\n\n```javascript\n//ioFormat과 동일하게 입력\n//ioFormat이 yyyyMMdd인 경우\ninputCalendar.setDisableAfterDate(\"20170410\");\n\n//ioFormat이 ddMMyyyy인 경우\ninputCalendar.setDisableAfterDate(\"10042017\");\n//display 예시 ) 2017년 4월 10일 이후 날짜는 비활성화되어 선택 불가능.\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "inputCalendar의 title 속성을 가져온다.\n\n**Return:**\n\n```String``` - inputCalendar의 title 속성값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar title = inputCalendar1.getTitle();\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setHolidayRef": {
          "!type": "fn(setHolidayRef: string)",
          "!doc": "holidayRef 속성을 설정하는 기능으로 DataCollection과 연동시 data:라는 prefix를 꼭 붙여야한다.\n\n명시하지 않는 경우 InstanceData의 XPath로 인식한다.\n\n**Parameters:**\n\n```setHolidayRef``` - ```String:Y``` - 적용할 setHolidayRef 경로.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//dataList1의 col1과 inputCalendar 컴포넌트의 공휴일 표시하려는 경우\ninputCalendar.setHolidayRef(\"data:dataList1.col1\");\n\n//InstanceData의 test/holiday와 연동 할 경우.\ninputCalendar.setHolidayRef(\"test/holiday\");\n```\n\n"
        },
        "disableValidate": {
          "!type": "fn()",
          "!doc": "disableBeforeDate, disableAfterDate 또는 disableDate 속성/API등으로 캘린더의 날짜중 일부를 '비활성화' 처리 했을 경우, \n\n파라미터로 전달 받은 날짜 값이 '비활성화' 된 상태 인지 아닌지를 판단해서 결과 값으로 반환한다.\n\n**Return:**\n\n```Boolean``` - 입력 값이 비활성화된 날짜인 경우 true, 그렇지 않으면 false를 반환한다.\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n 예1: disableBeforeDate = \"20170911\" disableAfterDate = \"20170927\"\n var returnValue = inputCalendar1.disableValidate(\"20170901\");\n returnValue는 \"true\"를 반환한다. \n 예2: disableDate = \"20230830 20230831\"\n var returnValue = inputCalendar1.disableValidate(\"20230830\");\n returnValue는 \"true\"를 반환한다.\n```\n\n"
        },
        "getDefaultDate": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트에 설정된 defaultDate를 반환. \n\n(defaultDate: 달력 아이콘을 클릭하면 표시되는 날짜. defalutDate 미설정시, 현재 시스템 날짜가 표시됨.)\n\n**Return:**\n\n```String``` - 현재 설정된 defaultDate\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ninputCalendar1.getDefaultDate();\n// (반환 예시 1) defaultDate = \"20101225\"인 경우, 20101225가 반환됨. \n// (반환 예시 2) defaultDate가 빈 값인 경우, 빈 문자열이 반환됨.\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "enableAllMonth": {
          "!type": "fn()",
          "!doc": "disableAfterMonth 및 disableBeforeMonth에 의해 비활성화된 날짜 선택을 가능하도록 활성화.\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ninputCalendar.enableAllMonth();\n// (출력 예) 비활성화된 월들이 다시 활성화되어 선택 가능.\n```\n\n"
        },
        "setSkin": {
          "!type": "fn(skin: string)",
          "!doc": "calendar의 skin을 설정한다.\n\n**Parameters:**\n\n```skin``` - ```String:Y``` - [class1, class2, class3, class4, class5]사용할 skin명\n\n**Since:**\n\n2.0_1.3742B.20131231.102003\n\n**Sample:**\n\n```javascript\n\ninputCalendar1.setSkin(\"class2\");\n```\n\n"
        },
        "getDisplayFormat": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트에 설정된 displayFormat을 반환합니다.\n\n**Return:**\n\n```String``` - 현재 설정된 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//별도의 displayFormat속성을 정의하지 않은 경우\nvar returnValue = inputCalendar1.getDisplayFormat();\n//return 예시 ) \"yyyy-MM-dd\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setButtonTitle": {
          "!type": "fn()",
          "!doc": "buttonTitle 값을 설정한다. buttonTitle은 달력이미지에 설정된 title 속성값이다.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setIoFormat": {
          "!type": "fn(ioFormat: string, displayFormat: string)",
          "!doc": "inputCalendar의 ioFormat 및 displayFormat속성을 설정한다. 기존의 setFormat API가 대체되었습니다.\n\n**Parameters:**\n\n```ioFormat``` - ```String:Y``` - 새로 설정할 ioFormat\n\n```displayFormat``` - ```String:N``` - 새로 설정할 displayFormat\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//input에 사용자가 입력하는 date의 순서가 일 월 년도 순일 경우\ninputCalendar1.setIoFormat(\"ddMMyyyy\", \"dd-MM yyyy\");\n//2002년 04월 15일을 입력 할 경우 사용자는 input에 15042002로 입력해야 한다.\n//display 예시 ) 15-04 2002\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트의 readonly 적용.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "enableAllDate": {
          "!type": "fn()",
          "!doc": "disableAfterDate 및 disableBeforeDate에 의해 비활성화된 날짜 선택을 가능하도록 활성화.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\ninputCalendar.enableAllDate();\n// (출력 예) 비활성화된 날짜들이 다시 활성화되어 선택 가능.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setHoliday": {
          "!type": "fn(dateStr: string, removeHoliday: bool)",
          "!doc": "특정 날짜에 holiday를 지정한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - holiday를 지정할 날짜\n\n```removeHoliday``` - ```Boolean:N``` - 기존 holiday 삭제 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ninputCalendar1.setHoliday(\"20160627\"); 또는 전체 연도에 적용시에는\ninputCalendar1.setHoliday(\"*0815\");로 설정한다. \n//display 예시 ) 2016년 06월 27일에 해당하는 날짜의 글자색이 빨간색으로 적용된다.\n```\n\n"
        },
        "setCalendarValueType": {
          "!type": "fn(calendarValueType: string, options: +Object)",
          "!doc": "calendarValueType과 displayFormat 및 ioFormat속성을 동적으로 변경한다.\n\n**Parameters:**\n\n```calendarValueType``` - ```String:Y``` - [yearMonth, yearMonthDate, yearMonthDateHour, yearMonthDateTime, yearMonthDateTimeSec]새로 설정할 calendarValueType.\n\n```options``` - ```JSON:N``` - 설정할 ioFormat 및 displayFormat. 지정하지 않을 경우 해당 calendarValueType 기본값이 설정됨\n\n|property|type|description|\n|:-|:-|:-|\n|options.ioFormat|<String>|새로 설정할 ioFormat. 없을 경우 해당 calendarValueType의 기본값이 설정됨.|\n|options.displayFormat|<String>|새로 설정할 displayFormat. 없을 경우 해당 calendarValueType의 기본값이 설정됨.|\n\n**Since:**\n\n5.0_1.1464A.20141205.222600\n\n**Sample:**\n\n```javascript\n//별도의 옵션이 없이 calendarValueType만 변경 한 경우\ninputCalendar1.setCalendarValueType(\"yearMonth\");   //calendarValueType이 yearMonth로 변경되고, ioFormat은 yyyyMM, displayFormat은 yyyy-MM로 자동변경.\n\n\n//displayFormat에 요일을 추가 할 경우\ninputCalendar1.setCalendarValueType(\"yearMonthDate\", {\"displayFormat\" : \"yyyy-MM-dd(EEE)\"});\n//input의 display 예시 ) 2002-04-15(월)\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setEnabledMonth": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 월을 활성화한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 활성화할 월\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ncalendar1.setEnabledDate(\"202401 202312\");\n//display 예시 ) 2024년 01월, 2023년 12월 해당하는 월은 활성화 한다.\n```\n\n"
        },
        "setMinYear": {
          "!type": "fn(minYear: number)",
          "!doc": "calendar의 minYear를 동적으로 설정한다.\n\n**Parameters:**\n\n```minYear``` - ```Number:Y``` - minYear값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ninputCalendar1.setMinYear(2000);\n```\n\n"
        },
        "getButtonTitle": {
          "!type": "fn()",
          "!doc": "설정된 buttonTitle 값을 가져온다. buttonTitle은 달력이미지에 설정된 title 속성값이다.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "blur": {
          "!type": "fn()",
          "!doc": "input에 포커스를 제거(blur)한다\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n inputCalendar1.blur();\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setDisabledMonth": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜를 비활성한다. disabaledMonth가 있을 경우 추가한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성화할 월\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ninputCalendar1.setDisabledMonth(\"202401 202311\");\n//display 예시 ) 2024년 01월, 2023년 12월 해당하는 월은 비활성화 한다.\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = inputCalendar1.getNextTabID();\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ninputCalendar1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 birthday key와 input1 컴포넌트의 value를 binding 하는 경우\ninput1.setRef(\"data:dataMap1.birthday\");\n\n//InstanceData의 res/userData/birthday와 연동 할 경우.\ninput1.setRef(\"res/userData/birthday\");\n```\n\n"
        },
        "setPlaceholder": {
          "!type": "fn(placeholderStr: string)",
          "!doc": "placeholder 속성값을 변경한다.\n\n**Parameters:**\n\n```placeholderStr``` - ```String:Y``` - 변경할 placeholder의 값\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\ninputCalendar1.setPlaceholder(\"이름을 입력하세요\");\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 검증 속성)\n mandatory\n dateValidCheck\n```\n\n\n\n**Return:**\n\n```Boolean``` - 입력 값이 유효한 값일 경우 true, 그렇지 않으면 false를 반환한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// mandatory = \"true\"\n\nvar returnValue = inputCalendar1.validate();\n (반환 값) - false (input의 값이 없을 경우) \n (반환 값) - true (input의 값이 있을 경우) \n\n// displaymessage=\"true\" 속성을 지정할 경우, 유효성 검사에서 false가 반환될 경우 엔진에서 내부에서 설정된 메세지가 표시됨.\n// (메세지 예시) 필수 입력 항목입니다.\n```\n\n"
        },
        "removeHoliday": {
          "!type": "fn()",
          "!doc": "holiday 설정을 초기화한다.\n\n**Since:**\n\n5.0_4.4590B.20220210.150718\n\n**Sample:**\n\n```javascript\ninputCalendar1.removeHoliday();\n```\n\n"
        },
        "setDisableAfterMonth": {
          "!type": "fn(monthStr: string)",
          "!doc": "입력 받은 월 이후의 월들을 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```monthStr``` - ```String:Y``` - 비활성화 처리의 기준 월.\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\n//ioFormat과 동일하게 입력\n//ioFormat이 yyyyMMdd인 경우\ninputCalendar.setDisableAfterDate(\"202402\");\n\n//ioFormat이 ddMMyyyy인 경우\ninputCalendar.setDisableAfterDate(\"022024\");\n//display 예시 ) 2024년 2월 이후 월는 비활성화되어 선택 불가능.\n```\n\n"
        },
        "setDisabledDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜를 비활성한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성할 날짜\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ninputCalendar1.setDisabledDate(\"20160627 20180627\"); 또는 전체 날짜를 비활성화 할 경우\ninputCalendar1.setDisabledDate(\"*\");로 설정한다. (단, setEnabledDate API로 활성화한 날짜는 비활성화되지 않는다.)\n```\n\n"
        },
        "setDefaultDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "defaultDate 속성을 설정. calendarValueType에 따라 날짜를 설정해야 함.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 설정하려는 날짜\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// calendarValueType = \"yearMonthDate\"인 경우, 아래와 같이 설정 가능.\ninputCalendar1.setDefaultDate(\"20020415\"); \n//  (반환 예시) 초기에 달력 아이콘을 클릭하면 2002년 04월 15일이 표시됨.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setMaxYear": {
          "!type": "fn(maxYear: string)",
          "!doc": "calendar의 maxYear를 동적으로 설정한다.\n\n**Parameters:**\n\n```maxYear``` - ```String:Y``` - maxYear값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ninputCalendar1.setMaxYear(2050);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "컴포넌트의 displayFormat속성을 설정한다.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//input의 입력 값이 \"2002-04-15\" 일 경우\ninputCalendar1.setDisplayFormat(\"yyyy.MM.dd\");\n//input display 예시 ) 2002.04.15\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "input에 입력 된 value를 구분자 없이 반환한다. ex) 2007/11/08 -> 20071108\n\n**Return:**\n\n```String``` - 구분자 없는 날짜 문자열.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택된 날짜가 2011년 1월 1일 인 경우\n\n//별도의 설정이 없는 기본 달력 또는 calendarValueType속성이 yearMonthDate인 경우, yyyyMMdd 형태.\nvar returnValue = calendar1.getValue();\n//return 예시 ) \"20110101\" \n\n//calendarValueType속성이 yearMonth인 경우, yyyyMM 형태.\n//return 예시 ) \"201101\"\n\ncalendarValueType속성이 yearMonthDateHour인 경우, yyyyMMddHH 형태.\n//return 예시 ) \"2011010100\"\n\ncalendarValueType속성이 yearMonthDateTime인 경우, yyyyMMddHHmm 형태.\n//return 예시 ) \"201101010000\"\n\ncalendarValueType속성이 yearMonthDateTimeSec인 경우, yyyyMMddHHmmss 형태.\n//return 예시 ) \"20110101000000\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 관련 속성)\n mandatory\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 inputCalendar 컴포넌트에 mandatory 속성을 정의했을 경우\n<w2:inputCalendar renderType=\"component\" id=\"inputCalendar1\" style=\"position: absolute;width:212px;height:61px;left:786px;top:272px;\" mandatory=\"true\"><\/w2:inputCalendar>\n\nvar returnObj = inputCalendar1.validateObject();\n// (반환 값 - inputCalendar의 값이 없을 경우 )returnObj 객체 반환\n\nreturnObj.callerId = \"inputCalendar1\" returnObj.type = \"mandatory\" returnObj.value = \"\"  \n// (반환 값 - inputCalendar의 값이 있을 경우)비어있는 객체가 반환 \n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. \n// (메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "getDisplayValue": {
          "!type": "fn()",
          "!doc": "displayFormat이 적용된 날짜를 반환한다.\n\n**Return:**\n\n```String``` - foramt이 적용 된 값\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n//inputCalendar1컴포넌트의 displayFormat을 \"yyyy-MM-dd\"으로 적용하고 20171123을 입력 한 경우\nvar returnValue = inputCalendar1.getDisplayValue();\n//return 예시 )\"2017-11-23\"\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트의 value를 설정한다. calendar 역시 value로 선택되어진다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - value값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//별도의 속성을 설정하지 않은 경우(displayFormat, delimiter속성 등)\ninputCalendar1.setValue(\"20020415\");\n//calendar는 2002년 4월 15일로 이동하며, input에는 2002-04-15로 표현된다.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getIoFormat": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트에 설정된 ioFormat속성값을 반환한다.\n\n**Return:**\n\n```String``` - 현재 설정된 ioFormat속성값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//별도의 ioFormat속성을 지정하지 않은 경우\nvar returnValue = inputCalendar1.getIoFormat();\nreturn 예시 ) \"yyyyMMdd\"\n```\n\n"
        },
        "setDisableBeforeMonth": {
          "!type": "fn(monthStr: string)",
          "!doc": "입력 받은 날짜 이전의 월들은 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```monthStr``` - ```String:Y``` - 비활성화 처리 기준 날짜\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\n//ioFormat과 동일하게 입력\n//ioFormat이 yyyyMMdd인 경우\ninputCalendar.setDisableBeforeDate(\"202312\");\n\n//ioFormat이 ddMMyyyy인 경우\ninputCalendar.setDisableBeforeDate(\"112023\");\n//display 예시 ) 2023년 12월 이전 월는 비활성화 되어 선택 불가능.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setValueCancel": {
          "!type": "fn()",
          "!doc": "inputCalendar에 값이 입력 중인 상태일 때, 입력 중인 값을 무시하고 이전 값으로 되돌리는 함수.\n\ndateValidSetCustom=true인 경우 유효.\n\ninvalidMessageFunc에서 alert 대신 Popup을 띄우고 해당 팝업의 onpageunload에서 이 함수를 호출할 경우, Popup이 닫히면 이전 값으로 복구됨.\n\n**Since:**\n\n5.0_4.4412B.20210507.104349\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        }
      },
      "linkedDataList": {
        "getFilteredRowIndex": {
          "!type": "fn(realRowIndex: number)",
          "!doc": "필터링된 상태의 행 인덱스를 반환.\n\n**Parameters:**\n\n```realRowIndex``` - ```Number:Y``` - 필터링되지 않은 상태의 행 인덱스.\n\n**Return:**\n\n```Number``` - 필터링된 된 상태의 행 인덱스\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnValue = linkedDataList1.getCellData(0, \"a\"); // 첫 번째 row, \"a\" column에 해당하는 cell의 데이터를 반환\n```\n\n"
        },
        "getModifiedJSON": {
          "!type": "fn()",
          "!doc": "변경(삽입, 갱신, 삭제) 행들의 데이터를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - 변경(삽입, 갱신, 삭제) 행들의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnJSON = linkedDataList1.getModifiedJSON(); // returnJSON 은 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 JSON객체\n```\n\n"
        },
        "getDeletedData": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행들을 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getDeletedData(); // returnArr는 삭제 상태(3,4, D,V)의 행들의 데이터 배열.\n```\n\n"
        },
        "getRowData": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 배열로 반환합니다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```Object``` - rowIndex에 해당하는 행의 데이터의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar dataArr = linkedDataList.getRowData( 0 );\n// dataArr[0] 은 20120101\n// dataArr[1] 은 23456\n// 위와 같이 원래 값을 반환.\n```\n\n"
        },
        "getFusionChartData": {
          "!type": "fn(chartType: string, labelColumn: string, seriesColumns: string)",
          "!doc": "linkedDataList를 fusionChart의 json데이터로 반환합니다\n\n**Parameters:**\n\n```chartType``` - ```String:Y``` - fusionChart의 차트타입\n\n```labelColumn``` - ```String:Y``` - fusionChart의 lable 데이터로 사용할 DataCollection의 column의 ID값\n\n```seriesColumns``` - ```String:Y``` - fusionChart의 series 데이터로 사용할 DataCollection column 정보로 배열형식의 문자열\n\n**Return:**\n\n```Object``` - fusionChart_Data 변환된 fusionChart data(json)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar chartData = linkedDataList1.getFusionChartData(\"column2D\",\"Month\",\"[['Year1','Year2']]\");\nchartObject.setJSONData(chartData);\n```\n\n"
        },
        "getOption": {
          "!type": "fn(attr: string)",
          "!doc": "linkedDataList 객체의 옵션을 조회하는 API\n\n**Parameters:**\n\n```attr``` - ```String:Y``` - 조회하는 옵션의 이름\n\n**Return:**\n\n```String``` - 조회한 객체의 옵션이 존재할 경우 옵션의 value를 반환합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var key = \"id\"\n $p.data.linkedDataList.getOption(id);\n //만약 최상위 객체의 key값의 option이 존재하지 않을 경우 null을 반환합니.\n```\n\n"
        },
        "getAllFilteredXML": {
          "!type": "fn(options: +Object)",
          "!doc": "linkedDataList에 filteredRow의 순서의 모든 filteredData를 XML로 반환합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` -\n\n**Return:**\n\n```Xml Element``` - linkedDataList의 data\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnDistinctDataArray": {
          "!type": "fn(colIndex: number)",
          "!doc": "해당 colIndex에 존재하는 중복된 항목을 제거한 data를 배열을 정렬하여 보여줍니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 중복된 항목을 제거한 data를 검색 col의 Index\n\n**Return:**\n\n```Object``` - data를 저장한 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedXML": {
          "!type": "fn()",
          "!doc": "변경(삽입, 갱신, 삭제) 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - 변경(삽입, 갱신, 삭제) 행들의 데이터 XML\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnXML = linkedDataList1.getModifiedXML(); // returnXML 은 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 데이터 XML.\n```\n\n"
        },
        "clearFilter": {
          "!type": "fn()",
          "!doc": "linkedDataList에 설정되어 있는 filter상태를 초기화합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUpdatedData": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 갱신 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getUpdatedData(); // returnArr는 갱신 상태(1, U)의 행들의 데이터 배열.\n```\n\n"
        },
        "getSortCondition": {
          "!type": "fn()",
          "!doc": "linkedDataList의 sortCondition을 반환하는 함수\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUnmatchedData": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 data를 가지고 있는 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnArr = linkedDataList1.getUnmatchedData( 'c', '영화', true, 0, lastRowIndex ); // returnArr는 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 가 아닌 행의 데이터 배열.\n```\n\n"
        },
        "getAllFilteredJSON": {
          "!type": "fn()",
          "!doc": "linkedDataList에 filteredRow 순서의 모든 filteredData를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - linkedDataList의 JSON객체 data\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getMatchedData": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID 값이 dataValue와 같은 행들의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안의 data를 가지고 있는 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnArr = linkedDataList1.getMatchedData( 'c', '영화', true, 0, lastRowIndex ); // returnArr는 DataList 전체에서 c컬럼의 값이 \"영화\" 인 행의 데이터 배열.\n```\n\n"
        },
        "getRowXML": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "filteredRowIndex에 해당하는 행의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```XML Element``` - 행의 XML 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getRowXML(0));\n baseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\n returnXMLStr은 다음과 같다.\n<vector status=\"0\" statusValue=\"R\" id=\"0\">\n    <a value = \"20120101\"/>\n    <b value = \"23456\"/>\n    <c value = \"Inswave\"/>\n    <d value = \"WebSquare\"/>\n    <e value = \"sample\"/>\n<\/vector>\n```\n\n"
        },
        "getRowCount": {
          "!type": "fn()",
          "!doc": "linkedDataList의 데이터 row의 건수를 반환합니다.\n\n**Return:**\n\n```Number``` - linkedDataList의 데이터 row의 건수\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnValue = linkedDataList.getRowCount(); // linkedDataList data의 row수가 20인 경우, returnValue는 20이다.\n```\n\n"
        },
        "getTotalCol": {
          "!type": "fn()",
          "!doc": "컬럼의 개수를 반환 한다.\n\n**Return:**\n\n```Number``` - 컬럼의 개수\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedIndex": {
          "!type": "fn()",
          "!doc": "추가나 삭제 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 추가나 삭제 상태인 행의 번호의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getModifiedIndex(); // returnArr는 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 배열.\n```\n\n"
        },
        "clearSortFilter": {
          "!type": "fn()",
          "!doc": "linkedDataList에 설정된 sort상태의 filter를 초기상태로 합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "linkedDataList 객체의 id를 반환합니다.\n\n**Return:**\n\n```String``` - linkedDataList 객체의 id를 반환합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedData": {
          "!type": "fn()",
          "!doc": "변경(삽입, 갱신, 삭제) 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 변경(삽입, 갱신, 삭제) 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getModifiedData(); // returnArr는 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 데이터 배열.\n```\n\n"
        },
        "sort": {
          "!type": "fn(bodyColumnID: string, sortType: number)",
          "!doc": "linkedDataList의 bodyColumnID에 해당하는 열을 정렬해줍니다.\n\n**Parameters:**\n\n```bodyColumnID``` - ```String:Y``` - 정렬시킬 열의 아이디\n\n```sortType``` - ```Number:Y``` - 정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nlinkedDataList1.sort('date', 0); // date컬럼의 값을 기준으로 오름차순으로 정렬한다.\nsort함수를 사용시, dataType에 상관없이 text로 간주하여 정렬이 된다.\nnumber 타입의 컬럼을 정렬해야 하는 경우에는 multisort 사용을 권장한다.\n```\n\n"
        },
        "getMatchedIndex": {
          "!type": "fn(colID: string, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 index를 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```String:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 index를 가지고 있는 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnArr = linkedDataList1.getMatchedIndex( 'c', '영화', true, 0, lastRowIndex );    // returnArr는 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 인 행 Index의 배열.\n```\n\n"
        },
        "removeColumnFilterAll": {
          "!type": "fn()",
          "!doc": "모든 열에 적용된 filter를 삭제합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nlinkedDataList1.removeColumnFilterAll(); // 전체 필터링을 해제한다.\n```\n\n"
        },
        "getDataLength": {
          "!type": "fn()",
          "!doc": "현재 화면에 보이는 행의 수를 반환합니다. getRowCount()와 동일.\n\n**Return:**\n\n```number``` - 행의 수\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getParentRowIndex": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 부모를 찾으려는 행의 번호\n\n**Return:**\n\n```Number``` - 부모 Row의 Index를 반환한다\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getLinkedRealRowIndex": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "linkedDataList를 독립적인 0번째부터 시작하는 data set으로 가정했을때의 realRowIndex, 즉 linkedDataList 세계에서의 realRowIndex. drilldown에서 주로 사용\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` -\n\n**Return:**\n\n```Number``` - linkedDataList 내부의 realRowIndex\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // dataList의 row가 [0,1,2,3,4,5,6,7,8,9], linkedDataList의 row는[1,3,5,7,9]이고 linkedDataList와 바인딩된 gridView는 [1,5,9]번 row가 출력되는 상황 가정\n linkedDataList1.getLinkedRealRowIndex(1); // 2\n linkedDataList1.getRealRowIndex(1); // 5\n linkedDataList1.getLinkedRealRowIndex(2); // 4\n linkedDataList1.getRealRowIndex(2); // 9\n```\n\n"
        },
        "setCondition": {
          "!type": "fn(type: string, condition: string)",
          "!doc": "linkedDataList의 필터링 혹은 정렬 조건을 설정.\n\n**Parameters:**\n\n```type``` - ```string:Y``` - 동작 종류 선택 - 필터링 (\"filter\") 혹은 정렬 (\"sort\")\n\n```condition``` - ```string:Y``` - 필터링 조건 혹은 정렬 조건 (하단 샘플 참조.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // 필터링 예제\n \n linkedDataList1.setCondition(\"filter\",\"filterCondition\");   \n \n // 필터 조건 설정 예 (1)  \n // val(컴포넌트ID) - val()에 정의된 컴포넌트의 현재 value를 참조.    \n // (예) filterCondition = \"column01 == val( 'selectbox1' )\"     \n // \n // 필터 조건 설정 예 (2)  \n // ref(data:DataCollection객체id.Column id) - ref()에 정의된 DataCollection객체의 현재 value를 참조. \n // (예) filterCondition = \"column01 == ref( data:dataList1.col1)\"   \n //     \n // 필터 조건 설정 예 (3)  \n // Default : Column id가 지정한 value와 동일한 데이터만 참조 \n // (예) filtierCondition = \"GENDER == 'W'\"\n    \n // 정렬  예제\n    \n linkedDataList1.setCondition(\"sort\",\"sortCondition\");  \n    \n // 오름차순 정렬\n // ASC( 컬럼명 ) - 해당 컬럼을 기준으로 오름차순 정렬.   \n // (예) sortCondition = ASC('col0')\"\n    \n // 내림차순 정렬 \n //  DESC( 컬럼명 ) -  해당 컬럼을 기준으로 내림차순 정렬.\n // (예) sortCondition = DESC('col1, col2')\n```\n\n"
        },
        "clearSort": {
          "!type": "fn()",
          "!doc": "linkedDataList의 모든 정렬을 취소해줍니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nlinkedDataList1.clearSort(); // 정렬을 취소한다.\n```\n\n"
        },
        "getUpdatedJSON": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행들의 데이터를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - 갱신 상태인 행들의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnJsonStr = JSON.stringify(linkedDataList1.getUpdatedJSON()); // returnJsonStr 은 갱신 상태(1, U)의 행들의 데이터 JSON객체 문자열.\n```\n\n"
        },
        "getInsertedIndex": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삽입 상태인 행의 번호의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getInsertedIndex(); // returnArr는 삽입 상태(2, C)의 행들의 배열.\n```\n\n"
        },
        "getAllJSON": {
          "!type": "fn()",
          "!doc": "linkedDataList의 모든 data를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - linkedDataList의 JSON객체 data\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList\nvar returnJSONStr = JSON.stringify(linkedDataList1.getAllJSON());\n baseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\n returnXMLStr은 예는 다음과 같다.\n [{\"a\":\"20120101\",\"b\":\"23456\",\"c\":\"Inswave\",\"d\":\"WebSquare\",\"e\":\"sample\"},\n  {\"a\":\"20120102\",\"b\":\"34567\",\"c\":\"Inswave\",\"d\":\"WebSquare\",\"e\":\"sample2\"}\n  ... (중략) ]\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 null을 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 linkedDataList1이 있는 경우\n linkedDataList1.getScope(); // wframe11 객체를 반환한다.\n```\n\n"
        },
        "getUnmatchedXML": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 Xml로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Xml element``` - 범위안에 일치하는 index를 가지고 있는 Xml\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getUnmatchedXML( 'c', '영화', true, 0, lastRowIndex )); // returnXMLStr 은 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 가 아닌 행의 데이터 XML 문자열.\n```\n\n"
        },
        "getDeletedXML": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```XML Element``` - 삭제 상태인 행들의 데이터 XML\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getDeletedXML()); // returnXMLStr 은 삭제 상태(3,4, D,V)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 전역 window객체를 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe객체의 scope객체 또는 전역window객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 linkedDataList1이 있는 경우\n var scope = linkedDataList1.getScopeWindow();\n scope.wframe11 === linkedDataList1.getScope(); // true\n```\n\n"
        },
        "getColData": {
          "!type": "fn(colID: number)",
          "!doc": "colIndex에 해당하는 열의 데이터(filter나 sort처리되지 않은)를 배열로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - colIndex에 해당하는 열의 데이터의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr =  linkedDataList.getColData('a'); // returnArr는 'a' 컬럼의 데이터 배열.\n```\n\n"
        },
        "getUpdatedIndex": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 갱신 상태인 행의 번호의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getUpdatedIndex(); // returnArr는 갱신 상태(1, U)의 행들의 배열.\n```\n\n"
        },
        "getDataRow": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 컬럼의 아이디를 키로 하는 해쉬 형태로 반환합니다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```Object``` - filteredRowIndex에 해당하는 행의 데이터의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList1에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n//첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar dataHash = linkedDataList1.getDataRow(0);   \nfor(var i in dataHash){\n    alert(  i +  ' : ' + dataHash[i] );\n}                   \n 출력되는 데이터는 다음과 같다. \n a : 20120101\n b : 23456\n c : Inswave\n d : WebSquare\n e : sample\n```\n\n"
        },
        "getRangeData": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안의 data를 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar dataArr = linkedDataList1.getRangeData(0, 1);   \ndataArr.length 는 5이다. \ndataArr[0] 은 20120101 \ndataArr[1] 은 23456 \n...\n```\n\n"
        },
        "multisort": {
          "!type": "fn(options: +Object)",
          "!doc": "option에 따라서 여러개의 열을 동시에 정렬해줍니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 정렬에 대한 옵션을 JSON형식으로 가지고 있는 object\n\n|property|type|description|\n|:-|:-|:-|\n|options.sortIndex|<String:Y>|정렬해 줄 열의 아이디 혹은 번호. 여러 열을 나열시에 빈칸(space)을 구분자로 한다.|\n|options.sortOrder|<String:Y>|정렬방법 (1:오름차순 -1:내림차순). 여러 열에 대한 각각의 정렬방법을 나열시에 빈칸(space)을 구분자로 한다.|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {};\noptions.sortIndex = \"category member\";\noptions.sortOrder = \"1 1\";\ngrid1.multisort( options );\n category컬럼의 카테고리를 먼저 오름차순으로 정렬 한 후, 동일 분류에 대하여 member컬럼의 회원 수를 오름차순으로 정렬한다.\n multisort의 경우, dataType을 고려한 정렬이 가능하다.\n```\n\n"
        },
        "getAllNoFilteredData": {
          "!type": "fn()",
          "!doc": "linkedDataList의 filter상태가 되지 않은 상태의 모든 데이터를 가져옵니다.\n\n**Return:**\n\n```Object``` - linkedDataList의 data 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUnmatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.\n\n**Parameters:**\n\n```matchCol``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```targetCol``` - ```Number:Y``` - 데이터를 가져올 열번호\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - targetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount() ;\nvar returnArr = linkedDataList1.getUnmatchedColumnData( 'c', '영화', 'd', true, 0,  lastRowIndex); // returnArr는 c컬럼의 값이 '영화'가 아닌 컬럼의 행 index에 해당하는 d컬럼의 데이터 배열.\n```\n\n"
        },
        "getFilteredColData": {
          "!type": "fn(colIndex: number)",
          "!doc": "FilteredRow에 해당하는 Col의 데이터를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```number:Y``` -\n\n**Return:**\n\n```Object``` - colIndex에 해당하는 열의 filter데이터의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr =  linkedDataList.getFilteredColData('a'); // returnArr는 'a' 컬럼의 filter데이터 배열.\n```\n\n"
        },
        "getAllData": {
          "!type": "fn()",
          "!doc": "linkedDataList의 모든 data를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - linkedDataList의 data 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 전체 행이 20 Row인 경우.\nvar returnArr = linkedDataList1.getAllData();\nreturnArr.length 는 100이다.\nreturnArr[0] 은 첫번째 행의 a컬럼의 값. \nreturnArr[1] 은 첫번째 행의 b컬럼의 값.\n... \nreturnArr[5] 는 두번째 행의 a컬럼의 값.\n...\n```\n\n"
        },
        "getInsertedXML": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```XML Element``` - 삽입 상태인 행들의 데이터 XML\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getInsertedXML()); // returnXMLStr 은 삽입 상태(2, C)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getFilterCondition": {
          "!type": "fn()",
          "!doc": "linkedDataList의 filterCondition을 반환하는 함수\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getObjectType": {
          "!type": "fn()",
          "!doc": "dataCollection의 Type을 반환합니다.\n\n**Return:**\n\n```String``` - dataCollection의 타입을 반환합니다.[dataMap, dataList, linkedDataList]\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar dataCollectionType = linkedDataList1.getObjectType(); // dataCollectionType linkedDataList1의 type인 linkedDataList를 반환합니다.\n```\n\n"
        },
        "getParentRealRowIndex": {
          "!type": "fn(linkedRealRowIndex: number)",
          "!doc": "linkedRealRowIndex(linkedDataList 세계에서의 realRowIndex)를 통해 실제 realRowIndex(부모 dataList에 해당하는 rowIndex)를 반환한다.\n\n**Parameters:**\n\n```linkedRealRowIndex``` - ```Number:Y``` -\n\n**Return:**\n\n```Number``` - 부모 dataList의 rowIndex 즉 realRowIndex\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // dataList의 row가 [0,1,2,3,4,5,6,7,8,9], linkedDataList의 row는[1,3,5,7,9]이고 linkedDataList와 바인딩된 gridView는 [1,5,9]번 row가 출력되는 상황 가정\n linkedDataList1.getParentRealRowIndex(0); // 1\n linkedDataList1.getParentRealRowIndex(1); // 3\n linkedDataList1.getParentRealRowIndex(2); // 5\n linkedDataList1.getParentRealRowIndex(3); // 7\n linkedDataList1.getParentRealRowIndex(4); // 9\n```\n\n"
        },
        "getRowStatusValue": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "filteredRowIndex에 해당하는 행의 상태를 숫자로 반환합니다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 상태를 반환할 행 번호\n\n**Return:**\n\n```Number``` - 행의 상태를 나타내는 숫자 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnValue = linkedDataList1.getRowStatusValue(0); // 첫 번째 행의 rowStatus 값(숫자)를 반환한다.\n```\n\n"
        },
        "removeColumnFilter": {
          "!type": "fn(colID: number)",
          "!doc": "colID에 해당하는 열에 적용된 filter를 삭제합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - filter를 삭제할 열 번호 혹은 컬럼 아이디\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nlinkedDataList1.removeColumnFilter( 'c' ); // c컬럼에 적용된 필터링을 해제한다.\n여러 컬럼에 setColumnFilter를 사용한 경우, 해제되지 않는 filter의 operationType에 유의하여야 한다.\n```\n\n"
        },
        "getTotalRow": {
          "!type": "fn()",
          "!doc": "행의 개수를 반환 한다.\n\n**Return:**\n\n```Number``` - 행의 개수\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInsertedJSON": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행들의 데이터를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - 삽입 상태인 행들의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnJsonStr = JSON.stringify(linkedDataList1.getInsertedJSON()); // returnJsonStr 은 삽입 상태(2, C)의 행들의 데이터 JSON객 문자열.\n```\n\n"
        },
        "getMatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.\n\n**Parameters:**\n\n```matchCol``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```targetCol``` - ```Number:Y``` - 데이터를 가져올 열번호\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - targetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount() ;\nvar returnArr = linkedDataList1.getMatchedColumnData( 'c', '영화', 'd', true, 0,  lastRowIndex); // returnArr는 c컬럼의 값이 '영화'인 컬럼의 행 index에 해당하는 d컬럼의 데이터 배열.\n```\n\n"
        },
        "getDeletedJSON": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행들의 데이터를 JSON객체로 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제 상태인 행들의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnJsonStr = JSON.stringify(linkedDataList1.getDeletedJSON()); // returnJsonStr 은 삭제 상태(3,4, D,V)의 행들의 데이터 JSON객체 문자열.\n```\n\n"
        },
        "getOriginalCellData": {
          "!type": "fn(filteredRowIndex: number, colID: string)",
          "!doc": "filteredRowIndex와 colID에 해당하는 셀의 데이터를 반환합니다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 셀의 초기 행 번호\n\n```colID``` - ```String:Y``` - 셀의 초기 컬럼 번호 혹은 컬럼의 아이디\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnValue = linkedDataList.getOriginalCellData(0, \"a\"); // 초기의 첫 번째 row, \"a\" column에 해당하는 cell의 displayFormat이 적용되지 않은 실제 데이터를 반환\n```\n\n"
        },
        "getRowJSON": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "filteredRowIndex에 해당하는 행의 data를 JSON객체로 반환합니다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```Object``` - 해당 행의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n//첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnJSONStr = JSON.stringify(linkedDataList1.getRowJSON(0));\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnJSONStr은 다음과 같다.\n{\"a\":\"20120101\",\"b\":\"23456\",\"c\":\"Inswave\",\"d\":\"WebSquare\",\"e\":\"sample\",\"rowStatus\":\"U\"}\n```\n\n"
        },
        "setOption": {
          "!type": "fn(key: string, value: string)",
          "!doc": "linkedDataList 객체의 옵션을 설정하는 API\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 조회하는 옵션의 이름\n\n```value``` - ```String:Y``` - 조회한 옵션에 설정할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var key = \"id\";\n var value = \"linkedDataList1\";\n $p.data.linkedDataList1.setOption(key, value);\n //만약 최상위 객체의 key값의 option이 존재하지 않을 경우 되지 않습니다.\n```\n\n"
        },
        "setColumnFilter": {
          "!type": "fn(filterOptions: +Object)",
          "!doc": "colIndex에 해당하는 열에 filter를 적용합니다.\n\n**Parameters:**\n\n```filterOptions``` - ```Object:Y``` - filter를 적용할 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|filterOptions.type|<String:Y>|필터 타입(\"func\", \"regExp\")|\n|filterOptions.colIndex|<String:Y>|적용할 그리드 컬럼 index 또는 컬럼 id|\n|filterOptions.key|<String:Y>|필터 적용 키|\n|filterOptions.condition|<String:Y>|이전 필터 데이터와 머지 조건(AND 혹은 OR)|\n|filterOptions.exactMatch|<Boolean:N>|row filter에서 like검색이 아닌 equal검색을 시킬지에 대한 여부 (default:false)|\n|filterOptions.param|<Object:Y>|사용자 Parameter(사용자 function으로 호출시 넘어감)|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n예제1) row 필터\n//key로 넘어온 문자열에 대해 indexOf를 이용하여 필터링 하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList.\nlinkedDataList1.setColumnFilter( {type:'row', colIndex:'a', key:\"영화\", condition:'and'});\na컬럼이 \"영화\"문자가 포함된 행들만 필터링 되어 보인다. \n예제2) func 필터   \n//cellData를 필터링 하여 true/false를 리턴하는 function을 사용자가 구현하여 처리하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList.\nlinkedDataList1.setColumnFilter( {type:'func', colIndex:'a', key:function(cellData, param) { if(cellData.indexOf(\"영화\") > -1) { return true; }else{ return false} }, condition:'and',param:{}});\na컬럼이 \"영화\"문자가 포함된 행들만 필터링 되어 보인다. \n예제3) regExp 필터 \n//정규표현식을 이용하여 필터링하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList.\nlinkedDataList1.setColumnFilter( {type:'regExp', colIndex:'a', key:/20120101|20120102|20120103/gi, condition:'and'});\na컬럼이 20120101 또는 20120102 또는 20120103을 포함하는 문자열으로 필터링한다. 사용자 정규표현식을 key로 넘겨서 처리할 수 있으며, key는 String이 아닌 regExp로 셋팅하여야 한다.\n```\n\n"
        },
        "getRowIndexByStatus": {
          "!type": "fn(statusStr: string)",
          "!doc": "statusStr과 상태가 일치하는 행의 번호를 배열로 반환합니다.\n\n**Parameters:**\n\n```statusStr``` - ```String:Y``` - 상태가 일치하는 행을 찾기 위한 문자열\n\n**Return:**\n\n```Object``` - statusStr과 상태가 일치하는 행의 번호의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getRowIndexByStatus('CUD'); // returnArr 는 linkedDataList에서 삽입, 갱신, 삭제 상태인 행들의 rowIndex 배열.\n```\n\n"
        },
        "getDeletedIndex": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제 상태인 행의 번호의 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getDeletedIndex(); // returnArr는 삭제 상태(3,4, D,V)의 행들의 배열.\n```\n\n"
        },
        "getUnmatchedIndex": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 index를 배열로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 index를 가지고 있는 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnArr = linkedDataList1.getUnmatchedIndex( 'c', '영화', false, 0, lastRowIndex ); // returnArr는 linkedDataList 전체에서 c컬럼의 값이 \"영화\"를 포함하고 있지 않는 행 Index의 배열.\n```\n\n"
        },
        "getAllXML": {
          "!type": "fn()",
          "!doc": "linkedDataList의 모든 data를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - linkedDataList의 data\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getAllXML());\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnXMLStr은 예는 다음과 같다.\n<gridData>\n    <vector status=\"0\" statusValue=\"R\" id=\"0\">\n        <a value = \"20120101\"/>\n        <b value = \"23456\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample\"/>\n    <\/vector>\n    <vector status=\"0\" statusValue=\"R\" id=\"1\">\n        <a value = \"20120102\"/>\n        <b value = \"34567\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample2\"/>\n    <\/vector>\n    ... (중략)\n<\/gridData>\n```\n\n"
        },
        "getMatchedJSON": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 JSON객체로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안의 data를 가지고 있는 JSON객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnJSONStr = JSON.stringify(linkedDataList1.getMatchedJSON( 'c', '영화', true, 0, lastRowIndex ));\n// returnJSONStr 은 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 인 행의 데이터 JSON객체 문자열.\n```\n\n"
        },
        "getMatchedXML": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Xml element``` - 범위안의 data를 가지고 있는 XML\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getMatchedXML( 'c', '영화', true, 0, lastRowIndex )); // returnXMLStr 은 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 인 행의 데이터 XML 문자열.\n```\n\n"
        },
        "getRangeJSON": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 data를 JSON객체로 반환합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 번호\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 번호\n\n**Return:**\n\n```Object``` - rowIndex에 해당하는 행의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n//첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnJSONStr = JSON.stringify(linkedDataList1.getRangeJSON(0, 1));\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnJSONStr은 다음과 같다.\n [{\"a\":\"20120101\",\"b\":\"23456\",\"c\":\"Inswave\",\"d\":\"WebSquare\",\"e\":\"sample\"},\n  {\"a\":\"20120102\",\"b\":\"34567\",\"c\":\"Inswave\",\"d\":\"WebSquare\",\"e\":\"sample2\"}]\n```\n\n"
        },
        "getRealRowIndex": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "filteredRowIndex에 대한 실제 데이터의 filteredRowIndex를 리턴한다.\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 현재 표시되고 있는 셀의 행 번호\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nlinkedDataList1.getRealRowIndex(3); // 3번째 row에 대한 실제 filteredRowIndex를 리턴한다.\n```\n\n"
        },
        "getUpdatedXML": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - 갱신 상태인 행들의 데이터 XML\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getUpdatedXML()); // returnXMLStr 은 갱신 상태(1, U)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getRowStatus": {
          "!type": "fn(filteredRowIndex: number)",
          "!doc": "filteredRowIndex에 해당하는 행의 상태를 반환합니다. (초기상태:R, 갱신:U, 삽입:C, 삭제:D, 삽입 후 삭제:V)\n\n**Parameters:**\n\n```filteredRowIndex``` - ```Number:Y``` - 상태를 반환할 행 번호\n\n**Return:**\n\n```String``` - 행의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnValue = linkedDataList1.getRowStatus(0); // 첫 번째 행의 rowStatus 값(문자)를 반환한다.\n```\n\n"
        },
        "getUnmatchedJSON": {
          "!type": "fn(colID: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 JSON객체로 반환합니다.\n\n**Parameters:**\n\n```colID``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colID해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 index를 가지고 있는 JSON객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = linkedDataList1.getRowCount();\nvar returnJSONStr = JSON.stringify(linkedDataList1.getUnmatchedJSON( 'c', '영화', true, 0, lastRowIndex )); // returnJSONStr 은 linkedDataList 전체에서 c컬럼의 값이 \"영화\" 가 아닌 행의 데이터 JSON객체 문자열.\n```\n\n"
        },
        "getRangeXML": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 data를 xml로 반환합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 번호\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 번호\n\n**Return:**\n\n```Xml Element``` - rowIndex에 해당하는 행의 xml데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 linkedDataList에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnXMLStr = WebSquare.xml.indent(linkedDataList1.getRangeXML(0, 1));\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnXMLStr은 다음과 같다.\n<gridData>\n    <vector status=\"0\" statusValue=\"R\" id=\"0\">\n        <a value = \"20120101\"/>\n        <b value = \"23456\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample\"/>\n    <\/vector>\n<\/gridData>\n```\n\n"
        },
        "getInsertedData": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삽입 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\nvar returnArr = linkedDataList1.getInsertedData(); // returnArr는 삽입 상태(2, C)의 행들의 데이터 배열.\n```\n\n"
        },
        "getAllFilteredData": {
          "!type": "fn()",
          "!doc": "linkedDataList에서 filterRowIndex 순서의 모든 fliteredData를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - linkedDataList의 data 배열 (1차원 배열)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        }
      },
      "generator": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "insertChildAsync": {
          "!type": "fn(index: number)",
          "!doc": "insertChild를 비동기로 수행하는 함수. generator 내부에 비동기로 생성되는 컴포넌트를 사용할 경우 insertChild 대신 이 API를 호출해야 한다.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 반복부를 추가할 위치\n\n**Return:**\n\n```Promise``` - 반복부가 생성된 순서를 포함하는 Promise 객체 반환\n\n**Since:**\n\n5.0_5.4885B.20230414.161349\n\n**Sample:**\n\n```javascript\n// 아래와 같이 Generator를 정의. (udc_input, textbox, fusionchart를 포함한 Group이 반복부에 속함.)\n<w2:generator id=\"generator1\" style=\"position: relative;\">\n    <xf:group id=\"group1\" style=\"position: relative;padding:10px;\" class=\"\">\n        <xf:input id=\"input1\"\n            style=\"position: relative;width: 144px;height: 21px;margin-right:10px;\">\n        <\/xf:input>\n        <xf:trigger type=\"button\" id=\"trigger1\"\n            style=\"position: relative;width: 80px;height: 23px;\">\n            <xf:label><![CDATA[getValue]]><\/xf:label>\n        <\/xf:trigger>\n    <\/xf:group>\n<\/w2:generator>\n\n// 0번째 index에 반복부를 추가.(첫 번째 위치에 추가.)\nvar idx = await generator1.insertChildAsync(0);\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "removeChild": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 반복부를 삭제하며 index가 없을 경우 마지막 반복부를 삭제.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 삭제할 반복부의 인덱스\n\n**Return:**\n\n```Number``` - 삭제된 반복부의 생성 번호(인덱스 아님)가 담긴 배열.\n\n**Since:**\n\n2.0_1.3395B.20130917.152503\n\n**Sample:**\n\n```javascript\n// 아래와 같이 Generator를 정의.\n// 반복부의 Trigger1 컴포넌트를 클릭할 때 클릭된 반복부를 삭제하는 로직. \n<w2:generator id=\"generator1\" style=\"position: relative;\">\n    <xf:group id=\"group1\" style=\"position: relative;padding:10px;\" class=\"\">\n        <xf:input id=\"input1\"\n            style=\"position: relative;width: 144px;height: 21px;margin-right:10px;\">\n        <\/xf:input>\n        <xf:trigger type=\"button\" id=\"trigger1\"\n            style=\"position: relative;width: 80px;height: 23px;\">\n            <xf:label><![CDATA[delete]]><\/xf:label>\n            <script ev:event=\"onclick(e)\" type=\"javascript\"><![CDATA[\n                var tmpIdx = this.getGeneratedIndex();  //현재 반복된 index 꺼내오기. (동적으로 trigger가 생성 됨으로 this로 접근해야함.)\n                generator1.removeChild( tmpIdx );       //tmpIdx를 기반으로 반복구 삭제\n            ]]><\/script>\n        <\/xf:trigger>\n    <\/xf:group>\n<\/w2:generator>\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "removeAll": {
          "!type": "fn()",
          "!doc": "모든 반복부를 삭제.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "컴포넌트의 propertyName에 해당하는 style의 값을 설정.\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 바꾸고 싶은 style 값의 이름\n\n```value``` - ```String:Y``` - 설정할 style의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 예: 컴포넌트 스타일 width를 변경하고자 하는 경우.\ncomponentId.setStyle(\"width\", 100); \n픽셀 단위를 기본으로 하며, 아래와 동일.\ncomponentId.setStyle(\"width\", \"100px\");\n// % 단위를 사용하려면 아래를 사용. \ncomponentId.setStyle(\"width\", \"100%\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "getChild": {
          "!type": "fn(index: number, id: string)",
          "!doc": "컴포넌트의 ID와 해당 컴포넌트가 속해 있는 반복부의 index를 기반으로 컴포넌트 객체를 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 반환 받을 컴포넌트가 속해 있는 반복부의 인덱스. (보이는 순서대로)\n\n```id``` - ```String:Y``` - 반환받을 컴포넌트의 초기 설정 ID.\n\n**Return:**\n\n```Object``` - 반복부에서 찾은 웹스퀘어 컴포넌트\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 Generator를 정의. (Input과 Trigger를 포함한 Group이 반복부에 속함.)\n<w2:generator id=\"generator1\" style=\"position: relative;\">\n    <xf:group id=\"group1\" style=\"position: relative;padding:10px;\" class=\"\">\n        <xf:input id=\"input1\"\n            style=\"position: relative;width: 144px;height: 21px;margin-right:10px;\">\n        <\/xf:input>\n        <xf:trigger type=\"button\" id=\"trigger1\"\n            style=\"position: relative;width: 80px;height: 23px;\">\n            <xf:label><![CDATA[getValue]]><\/xf:label>\n        <\/xf:trigger>\n    <\/xf:group>\n<\/w2:generator>\n\n\n// 4개의 배열 데이터를 기반으로 반복부를 생성하고 \n// input컴포넌트의 value를 변경하는 예\n\nvar tmpArr = [\"손예진\",\"이광수\",\"이선희\",\"류승룡\"]; //배열 데이터\n\n// 상단에 정의 된 배열의 개수만큼 반복부 추가\nfor(var i=0;i < tmpArr.length;i++){\n    // 반복부 추가\n    generator1.insertChild(i);\n    // 추가 된 반복부에서 input1 컴포넌트 객체 꺼내오기\n    var tmpChild = generator1.getChild( i , \"input1\" );\n    // input의 value를 배열데이터의 i번째 값으로 설정\n    tmpChild.setValue(tmpArr[i]);\n}\n\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "insertChild": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 위치에 반복부를 추가. index가 생략된 경우 마지막에 추가됨.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 반복부를 추가할 위치\n\n**Return:**\n\n```Number``` - 반복부가 생성된 순서. 인덱스와는 별개.\n\n**Since:**\n\n2.0_1.3395B.20130917.152503\n\n**Sample:**\n\n```javascript\n// 아래와 같이 Generator를 정의. (Input과 Trigger를 포함한 Group이 반복부에 속함.)\n<w2:generator id=\"generator1\" style=\"position: relative;\">\n    <xf:group id=\"group1\" style=\"position: relative;padding:10px;\" class=\"\">\n        <xf:input id=\"input1\"\n            style=\"position: relative;width: 144px;height: 21px;margin-right:10px;\">\n        <\/xf:input>\n        <xf:trigger type=\"button\" id=\"trigger1\"\n            style=\"position: relative;width: 80px;height: 23px;\">\n            <xf:label><![CDATA[getValue]]><\/xf:label>\n        <\/xf:trigger>\n    <\/xf:group>\n<\/w2:generator>\n\n// 0번째 index에 반복부를 추가.(첫 번째 위치에 추가.)\ngenerator1.insertChild(0);\n\n// 마지막에 반복부를 추가.(두 번째 위치에 추가)\ngenerator1.insertChild();\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getLength": {
          "!type": "fn()",
          "!doc": "반복부 개수를 반환.\n\n**Return:**\n\n```Number``` - 반복부의 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData API로 설정한 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 속성으로 정의한 값을 반환.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 임의의 데이터의 키\n\n**Return:**\n\n```String``` - key에 해당하는 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 generator 컴포넌트의 사용자 속성(eduTest)이 적용된 경우.\n<w2:generator id=\"generator1\" style=\"position: absolute ;left: 567px;top: 62px;width: 203px;height: 62px;\"><\/w2:generator>\n\ngenerator1.getUserData(\"eduTest\");\n// (반환 예) \"Hello\"\n\n//setUserData를 통해 set한 경우\ngenerator1.setUserData(\"eduTest\",\"WebSquare\");\n\ngenerator1.getUserData(\"WebSquare\");\n// (반환 예) \"Hello\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "컴포넌트에 사용자 데이터를 설정. \n\n컴포넌트에 설정 가능한 key가 아닌 경우, 설정이 불가능하며 log에 관련 내용이 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 임의의 데이터의 키\n\n```value``` - ```String:Y``` - 임의의 데이터의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 'data'라는 key로 'WebSquare'라는 값을 설정 할 경우\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n//아래와 같이 컴포넌트에 설정이 가능한 key가 아닌 경우, 설정이 불가능.\ncomponentId.setUserData(\"title\", \"WebSquare\");\n\n// (로그 예시) !!!WARNING - [title] can't define as UserData\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "secret": {
        "getValue": {
          "!type": "fn()",
          "!doc": "컴포넌트의 value를 반환한다.\n\n**Return:**\n\n```String``` - 컴포넌트의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//사용자가 secret1 컴포넌트에 \"WebSquare\"를 입력 한 경우\nvar tmpRs = secret1.getValue();\r\n//return 예시 ) \"WebSquare\"\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getDataType": {
          "!type": "fn()",
          "!doc": "dataType 속성값을 반환. [default: text]\n\n**Return:**\n\n```String``` - secret의 dataType\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 secret이 정의 된 경우\n<xf:secret id=\"secret1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:secret>\r\n\r\nvar returnValue = secret1.getDataType();\r\n// (반환 예) \"text\"\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트의 value를 설정한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - secret의 value 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nsecret1.setValue(\"WebSquare\");\n```\n\n"
        },
        "commit": {
          "!type": "fn()",
          "!doc": "secret이 ref와 연동된 경우 secret창에 보이는 값을 ref에 반영하는 함수 \r\n\n모든키의 실시간 적용은 지원하지 않으며, Enter키와 tab키 동작일 경우만 사용가능\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n<xf:secret onkeydown=\"scwin.secret1_onkeydown\" ref=\"data:dataMap1.key1\"><\/xf:secret>\r\n```javascript\n scwin.secret1_onkeydown = function(e) { \r\n    if((e.charCode || e.keyCode) === 13) { \r\n        secret1.commit(); // secret에 현재 입력된 값을 dataMap1.key1에 반영한다. 이를 생략할 경우 key1값을 꺼냈을 때 secret에 입력되기 이전의 값을 얻게 된다. \r\n        dataMap1.get(\"key1\");\r\n    }\r\n }\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "컴포넌트를 화면에 보이도록 설정한다.\r\n\n엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - [default:block ,inline ,none ,\"\"]display의 속성 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//display 속성이 \"block\"이 된다.\ncomponentId.show();  \r\n\r\n//class에 적용된 display 속성 값을 다시 복구.\r\ncomponentId.show(\"\");\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "컴포넌트의 property별 style을 설정한다.\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - style 속성 이름\n\n```value``` - ```String:Y``` - 적용 할 style의 값\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//컴포넌트의 width를 200px로 설정 할 경우\ncomponentId.setStyle(\"width\", \"200px\");\r\n\r\n//배경색을 olive로 변경 할 경우\r\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트 이름\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//secret 컴포넌트에 onclick이벤트를 발생시킨다.\nsecret.trigger(\"onclick\");\r\n\r\n//secret onviewchange이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출한다.\r\nsecret.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\r\n```javascript\n(관련 속성)\r\n displaymessage=true\r\n(유효성 관련 속성) \r\n mandatory\r\n minlength\r\n maxlength\r\n minByteLength\r\n maxByteLength\n```\n\n\n\n**Return:**\n\n```Boolean``` - 유효성 검사 결과 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// mandatory 속성을 지정.\n<xf:secret id=\"secret1\" mandatory=\"true\"><\/xf:secret>\r\n\r\nvar returnValue = secret1.validate();\r\n// (반환 값) - false (input의 값이 없을 경우) \r\n// (반환 값) - true (input의 값이 있을 경우) \r\n\r\n// displaymessage=\"true\" 속성을 지정하고 유효성 검사에서 false가 반환될 경우,\r\n// 엔진에서 내부에서 설정한\"필수 입력 항목입니다\"가 표시됨.\n```\n\n"
        }
      },
      "switch": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "invoke": {
          "!type": "fn(funcName: string, param: +Object, options: +Object)",
          "!doc": "컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출하는 함수.\n\n예) switch 이하의 모든 컴포넌트에 setValue를 실행할 수 있음.\n\n**Parameters:**\n\n```funcName``` - ```String:Y``` - 호출하려는 함수의 이름\n\n```param``` - ```Object:N``` - 호출하려는 함수에 넘겨질 인자 혹은 그 인자를 반환하는 함수 객체\n\n```options``` - ```Object:N``` - 함수 호출에서 제외되는 컴포넌트를 설정하는 값의 객체.\n\n|property|type|description|\n|:-|:-|:-|\n|options.excludePlugin|<String:N>|함수 호출에서 제외되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n|options.excludeId|<String:N>|함수 호출에서 제외되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 사용.|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n switch1.invoke(\"setValue\", \"WebSquare\");\n switch 하위의 모든 컴포넌트에 componentId.setValue(\"WebSquare\"); 한것과 같다. \n 만약 하위의 컴포넌트에 setValue 함수를 가지지 않는 컴포넌트(예:grid)가 있다면 에러.\n\n function createValue(obj){\n     var pluginName = obj.getPluginName();  // 컴포넌트의 종류.\n     var id = obj.getID();                  // 컴포넌트의 id.\n       ...\n }\n var options = { excludePlugin : \"grid calendar\", excludeId : \"radio1\" };\n switch1.invoke(\"setValue\", createValue, options);\n switch 하위의 grid와 calendar, id가 radio1인 컴포넌트를 제외하고 componentId.setValue(사용자 정의 함수(createValue)를 호출하여 반환된 리턴 값); 한것과 같다.\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "moveToRight": {
          "!type": "fn()",
          "!doc": "다음 index의 case를 선택합니다. setselectedIndex(현재값+1)과 같습니다.\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우, switch의 두번째 case(case2)가 선택되어 있을 때.\n     switch1.moveToRight();\n     세번째 case(case3)이 선택된다. 오른쪽으로 이동.\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "init": {
          "!type": "fn(options: +Object)",
          "!doc": "지정한 컴포넌트를 제외한 모든 하위 컴포넌트를 초기화하는 함수. (calendar, checkbox, grid, input, inputCalendar, multiselect, radio, selectbox, textarea)\n\n**Parameters:**\n\n```options``` - ```Object:N``` - 초기화 동작에서 제외되는 컴포넌트를 지정하는 객체(excludePlugin, excludeId을 속성으로 지정)\n\n|property|type|description|\n|:-|:-|:-|\n|options.excludePlugin|<String:N>|초기화 기능에서 제외되는 컴포넌트의 명칭. 복수를 정의할 경우, 공백을 구분자로 사용.|\n|options.excludeId|<String:N>|초기화 기능에서 제외되는 컴포넌트 ID. 복수를 정의할 경우, 공백을 구분자로 사용.|\n|options.fireEvent|<Boolean:N>|초기화로 인한 값 변동에 따라 이벤트 발생 여부. true: 이벤트 발생 허용. false (기본 값): 이벤트 발생 방지.|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n // switch 컴포넌트 하위에 있는 초기화가 가능한 컴포넌트에 대하여 초기화.\n switch1.init(); \n\n //switch 컴포넌트 하위의 grid, radio, id가 input1인 input, id가 calendar1인 calendar 컴포넌트를 제외한 컴포넌트 가운데 초기화가 가능한 컴포넌트에 대해 초기화하고 값 변경에 따른 이벤트를 발생시킨다. \n var options = { excludePlugin : \"grid radio\", excludeId : \"input1 calendar1\", fireEvent : true };\n switch1.init(options);\n\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "현재 설정되어있는 index를 반환합니다.\n\n**Return:**\n\n```Number``` - 현재 설정되어있는 index\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우, switch의 두번째 case(case2)가 선택되어 있을 때.\n     var returnValue = switch1.getSelectedIndex();\n     returnValue는 1이다.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setSelectedID": {
          "!type": "fn(id: string)",
          "!doc": "case를 id로 선택합니다\n\n**Parameters:**\n\n```id``` - ```String:Y``` - case의 id\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우,\n     switch1.setSelectedID(\"case1\");\n     첫번째 case(case1)이 선택된다.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "moveToIndex": {
          "!type": "fn(idx: number)",
          "!doc": "인자로 받은 index의 case를 선택하여 화면을 이동합니다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 선택하고자 하는 index\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우, switch의 두번째 case(case2)가 선택되어 있을 때.\n     switch1.moveToIndex(2);\n     세번째 case(case3)이 선택된다. 오른쪽으로 이동.\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "insert": {
          "!type": "fn(caseElement: +Object, options: +Object)",
          "!doc": "case를 동적으로 추가다.\n\n**Parameters:**\n\n```caseElement``` - ```XML:Y``` - 동적으로 추가할 case의 dom element 객체 또는 dom element로 parsing이 가능한 string. (string으로 인자 전달 시 root노드에 xmlns:w2=\"http://www.inswave.com/websquare\" xmlns:xf=\"http://www.w3.org/2002/xforms\"를 추가해야 한다.)\n\n```options``` - ```JSON:N``` - 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.selected|<Boolean:N>|동적으로 추가한 case가 화면에 바로 보이도록 함.|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getSelectedID": {
          "!type": "fn()",
          "!doc": "현재 선택된 case의 id를 반환합니다.\n\n**Return:**\n\n```String``` - 선택된 case의 id\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우, switch의 두번째 case(case2)가 선택되어 있을 때.\n     var returnValue = switch1.getSelectedID();\n     returnValue는 case1이다.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "moveToLeft": {
          "!type": "fn()",
          "!doc": "이전 index의 case를 선택합니다. setselectedIndex(현재값-1)과 같습니다.\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우, switch의 두번째 case(case2)가 선택되어 있을 때.\n     switch1.moveToLeft();\n     첫번째 case(case1)이 선택된다. 왼쪽으로 이동.\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(idx: number, draw: bool)",
          "!doc": "switch 객체의 index 를 인자로 받아 이에 맞는 case 를 사용자에게 보여줍니다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 선택하고자 하는 index\n\n```draw``` - ```boolean:N``` - 선택된 영역의 style 처리 여부(default:true)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n 예: (id가 case1, case2, case3) case가 3개 있는 switch의 경우,\n     switch1.setSelectedIndex(0);\n     switch의 첫번째 case(case1)이 보여진다. case2, case3은 보이지 않는다.\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_4.4933B.20230623.180418\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "button": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getLabel": {
          "!type": "fn()",
          "!doc": "label을 반환. getValue와 동일한 기능을 제공.\n\n**Return:**\n\n```String``` - label값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n//아래와 같이 button1의 label의 값을 click으로 정의한 경우\n<w2:button type=\"button\" id=\"button1\" style=\"position:relative;width:80px;height:23px;\" label=\"click\">\n<\/w2:button>\n\nvar returnValue = button1.getLabel();\n//return 예시 ) \"click\"\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setBackgroundImage": {
          "!type": "fn(imgUrl: string)",
          "!doc": "type=button인 경우 배경 이미지를 설정.\n\n해당값은 CSS의 background-image 속성값으로 설정됨.\n\n**Parameters:**\n\n```imgUrl``` - ```String:Y``` - 이미지 URL\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 설정 예제\n button1.setBackgroundImage('/img/btn_book1.jpg');\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n button1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "표시되어 있는 label을 반환. getLabel과 동일한 기능을 제공.\n\n**Return:**\n\n```String``` - label값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 아래와 같이 button1의 label의 값을 click으로 정의한 경우\n<w2:button type=\"button\" id=\"button1\" style=\"position:relative;width:80px;height:23px;\" label=\"click\">\n<\/w2:button>\n\nvar returnValue = button1.getValue();\n// (반환 예) \"click\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getType": {
          "!type": "fn()",
          "!doc": "컴포넌트의 현재 설정된 Type을 반환.\n\n**Return:**\n\n```String``` - 현재 설정되어 있는 type 속성 값\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// type=\"button\"인 경우 아래를 실행 하면 button이 반환됨.\n button1.getType();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(lable: string)",
          "!doc": "value 값을 변경. setLabel와 동일한 기능을 제공.\n\n**Parameters:**\n\n```lable``` - ```String:Y``` - 출력 할 text\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\nbutton1.setValue('search');\n// (출력 예) \"search\"가 button에 표시됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabel": {
          "!type": "fn(lable: string)",
          "!doc": "label 값을 변경한다. setValue와 동일한 기능을 제공.\n\n**Parameters:**\n\n```lable``` - ```String:Y``` - 출력 할 text\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\nbutton1.setLabel('search');\n// (출력 예) button의 표시되는 텍스트는 search이다.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_5.5126B.20240108.155329\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "tabControl": {
        "activateTab": {
          "!type": "fn(idx: number)",
          "!doc": "지정한 index의 탭이 비활성화 상태인 경우(alwaysDraw=false) 활성화 상태로 변경. \n\n탭 내부 컨텐츠에 대해 API를 적용할 경우, 해당 탭을 활성화시켜야 API가 동작.\n\n관련 API: isLoaded (탭 활성화 상태를 확인.)\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` -\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addTab": {
          "!type": "fn(id: string, tabOpt: +Object, contOpt: +Object)",
          "!doc": "(SP5 async) tab을 추가하는 기능으로 tab과 content의 세부 생성 옵션을 설정할 수 있다.\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await tabControl.addTab(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - tab의 ID\n\n```tabOpt``` - ```JSON:Y``` - tab의 생성 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|label|<String:N>|tab에 표현 될 text.|\n|title|<String:N>|tab에 마우스 over 시 tooltip형태로 표현되는 값.|\n|openAction|<String:N>|컨텐츠 로딩 옵션. [select, exist, new, last] <\/br> select : 기존 탭을 선택. <\/br> exist : tabID에 해당하는 탭에 src를 바꿔 로딩하고 해당 탭을 선택. <\/br> new: 새로운 탭. <\/br> last: 기존 tab을 마지막 tab으로 이동후 선택.|\n|closable|<boolean:N>|[default:false, true]tab의 close 버튼 표시 유무|\n|disabled|<boolean:N>|[default:false, true]disabled 유무|\n|tabWidth|<Number:N>|tab의 width|\n|tabHeight|<Number:N>|tab의 height|\n|class|<String:N>|tab에 적용할 class|\n|style|<String:N>|tab에 적용할 Style|\n|activeTabClass|<String:N>|활성 tab에 적용할 class|\n|disabledTabClass|<String:N>|비활성 tab에 적용할 class|\n|selectedImage|<String:N>|선택된 tab에 적용할 Image URL|\n|defaultImage|<String:N>|기본 tab에 적용할 Image URL|\n|hoverImage|<String:N>|tab Hover시 적용할 Image URL|\n|tabType|<String:N>|Tab 표현 유형(\"image\", \"text\")|\n|selectedClass|<String:N>|선택된 tab에 적용할 class|\n|defaultClass|<String:N>|기본 tab에 적용할 class|\n|hoverClass|<String:N>|tab hover시 적용할 class|\n|addTabIndex|<String:N>|추가되는 tab의 tabIndex|\n|useATagBtn|<boolean:N>|closable이 true인 경우, 추가되는 tab의 close버튼을 a Tag로 할지 여부|\n\n\n```contOpt``` - ```JSON:Y``` - content의 생성 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|src|<String:Y>|contents의 URL|\n|wframe|<boolean:N>|[default:false, true]contents의 생성 mode. default는 false 즉 iframe 이며, true를 줄 경우 wframe으로 그린다.|\n|frameMode|<String:N>|content영역을 iframe으로 구성할지, wframe으로 구성할지 여부. wframePreload는 alwaysDraw=false시 화면 xml을 로딩하고 객체 생성까지 완료한다.|\n|scope|<boolean:N>|frameMode=\"wframe\"이고 2개 이상의 content src속성 값에 동일한 경로의 파일을 중복해서 설정할 경우, id중복문제가 나타나지 않도록 각각의 content에 scope=\"true\"로 설정한다.|\n|alwaysDraw|<boolean:N>|[default:false, true]tab 생성시 contents의 draw 유무|\n|style|<String:N>|tab contents에 적용할 style|\n|name|<String:N>|tab contents로 설정할 iframe의 name|\n|title|<String:N>|tab contents로 설정할 iframe의 title|\n|dataObject|<Object:N>|새로 열릴 탭에 전달할 데이터의 정보를 담은 JSON 객체|\n\n**Return:**\n\n```Promise``` - (SP5)생성된 tabId 정보를 포함하는 Promise 객체 반환\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // SP5에서 addTab이 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.addTabTest또한 async function이 되어야 한다.\n scwin.addTabTest = async function() {\n     // 실제 전달할 데이터 정의. 새로 열릴 탭에 데이터를 전달 (dataObject를 통해 전달 가능) \n     var rowJSON = {\n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false},   \n        \"Region\": \"Seoul\",  \n        \"Carrier\": true .\n        };  \n        \n     // 탭 생성. SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 tabId가 올바로 반환된다.\n     var newTabId = await tabControl1.addTab(\"cmcm011\",  \n        {   \n            \"label\": \"New\", \n            \"title\": \"dataObject\",\n            \"openAction\": \"exist\",\n            \"closable\": \"true\"\n        }, \n        {   \n            \"src\": \"popup_sub.xml\",\n            \"frameMode\" : \"wframePreload\",\n            \"scope\" : true, \n            \"alwaysDraw\": \"true\",\n            \"dataObject\":{\n                    \"type\" : \"json\",\n                \"name\" : \"tabParam\",\n                \"data\" : rowJSON\n            }\n        }\n     );\n     await tabControl1.setSelectedTabIndex(\"cmcm011\"); // 만약 위의 addTab 호출 시 await 키워드를 생략할 경우 addTab이 완료되기 전에 이 함수가 호출된다. \n }\n\n // 새로 생성한 탭에서 전달 받은 데이터를 확인하는 예제 \n \n // var paramData = $p.getParameter(\"paramTest\");\n // var data = JSON.stringify(paramData);\n // alert(data);\n```\n\n"
        },
        "getTabInfo": {
          "!type": "fn()",
          "!doc": "각 tab에 대한 id, label, defaultTabIndex(초기의탭위치), currentTabIndex(현재화면의탭위치), src, alwaysDraw 정보를 배열에 담아 리턴하는 함수.\n\n**Return:**\n\n```Array``` - 각 tab에 대한 정보를 담은 array\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "disableTab": {
          "!type": "fn(tabIndex: number)",
          "!doc": "tab을 disabeld 처리한다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - disabled할 tab의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 tab이 비활성화된다.\ntabControl1.disableTab(0);\n```\n\n"
        },
        "isLoaded": {
          "!type": "fn(idx: number)",
          "!doc": "tab의 index에 해당하는 화면의 출력유무를 반환한다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - tab의 index\n\n**Return:**\n\n```Object``` - tab index에 해당하는 화면의 출력유무\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// alwaysDraw=\"false\"상황에서 두번째 탭이 출력되었는지 판단 후 객체접을 한다.\nif( tabControl1.isLoaded( 1 ) ) {\n    input1.setValue( \"WebSquare5\" );\n}\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "hideTab": {
          "!type": "fn(tabIndex: number)",
          "!doc": "(SP5 async) tab을 숨김(hidden)처리 한다.\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await tabControl.hideTab(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - hide할 tab의 index\n\n**Return:**\n\n```Promise``` - (SP5)hideTab 성공 여부 (true/false)를 포함하는 Promise 객체 반환\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n // SP5에서 hideTab가 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.hideTabTest또한 async function이 되어야 한다.\n scwin.hideTabTest = async function() {\n     // SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 hideTab호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await tabControl1.hideTab(1); // 첫번째 탭을 감춘다.\n     common.doSomething(); // 만약 위의 hideTab 호출 시 await 키워드를 생략할 경우 hideTab이 완료되기 전에 이 함수가 호출된다.\n }\n\n```\n\n"
        },
        "setWindowMaxNum": {
          "!type": "fn(windowMaxNum: number)",
          "!doc": "tabControl에서 열 수 있는 최대 window 개수를 설정합니다.\n\n**Parameters:**\n\n```windowMaxNum``` - ```Number:Y``` - 새로 설정할 window의 최대 개수\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTabID": {
          "!type": "fn(tabIndex: number)",
          "!doc": "tab index에 해당하는 ID 리턴합니다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - tab의 index\n\n**Return:**\n\n```String``` - tab의 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//0번째 tab의 ID를 반환\nvar tmpRs = tabControl1.getTabID(0);\n```\n\n"
        },
        "setTabOrder": {
          "!type": "fn(tabOrderArr: +Object)",
          "!doc": "새로운 tab순서에 대한 배열을 받아 해당 순서대로 tab을 재배치시키는 함수\n\n**Parameters:**\n\n```tabOrderArr``` - ```Array:Y``` - tab순서를 담은 배열. 배열의 길이는 반드시 tab전체 길이와 일치해야 한다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // 기존 탭의 순서가 아래와 같이 있을 때 (배열의 각 항목은 탭의 id임)\n [ 'tabs1', 'tabs2', 'tabs3' ]\n\n // setTabOrder의 인자에는 변경하고자 하는 탭의 순서 배열을 넘겨준다. (단, 해당 배열의 길이는 tab전체의 길이와 같아야 하고, 각 원소는 탭의 id여야 한다.)\n tabControl1.setTabOrder(['tabs3', 'tabs1', 'tabs2'])\n\n // 탭의 순서는 다음과 같이 바뀐다.\n [ 'tabs3', 'tabs1', 'tabs2' ]\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getTabIndex": {
          "!type": "fn(tabID: string)",
          "!doc": "tab의 ID로 해당 tab의 index를 반환한다.\n\n**Parameters:**\n\n```tabID``` - ```String:Y``` - tab의 ID\n\n**Return:**\n\n```Number``` - tab의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//tab의 id가 \"tab1\"인 tab의 index를 반환\nvar tmpRs = tabControl1.getTabIndex(\"tab1\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSelectedTabIndex": {
          "!type": "fn()",
          "!doc": "현재 선택된 tab의 index를 반환한다.\n\n**Return:**\n\n```Number``` - tab의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar returnValue = tabControl1.getSelectedTabIndex();\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setHeight": {
          "!type": "fn(height: number)",
          "!doc": "tabControl의 height를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - 컴포넌트 height\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//height를 20px로 설정한다.\ntabControl1.setHeight(20);\n```\n\n"
        },
        "setSelectedTabIndex": {
          "!type": "fn(tabIndex: number)",
          "!doc": "(SP5 async) tab의 index에 해당하는 tab을 선택한다.\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await tabControl.setSelectedTabIndex(); 형태로 호출해야 올바로 동작한다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - tab의 index ( id를 넘기게 되면 idx로 처리 함)\n\n**Return:**\n\n```Promise``` - (SP5) Promise 객체 반환\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // SP5에서 setSelectedTabIndex가 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.setSelectedTabIndexTest또한 async function이 되어야 한다.\n scwin.setSelectedTabIndexTest = async function() {\n     // SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 setSelectedTabIndex호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await tabControl1.setSelectedTabIndex(1);\n     common.doSomething(); // 만약 위의 setSelectedTabIndex 호출 시 await 키워드를 생략할 경우 setSelectedTabIndex이 완료되기 전에 이 함수가 호출된다.\n }\n\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getLabelText": {
          "!type": "fn(idx: number)",
          "!doc": "tab의 label을 반환한다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - tab의 index\n\n**Return:**\n\n```String``` - tab의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//1번째 tab의 label을 반환\nvar returnValue = tabControl1.getLabelText(0);\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getWindow": {
          "!type": "fn(idx: number)",
          "!doc": "tab index 또는 id에 해당하는 window 객체를 반환한다.\n\n반환된 객체를 통해 웹스퀘어 컴포넌트 및 function, 변수 등에 접근이 가능한다.\n\nidx 인자가 없을 경우 현재 선택된 tab의 window content를 반환한다.\n\n**Parameters:**\n\n```idx``` - ```Number||String:N``` - tab의 index 또는 tab의 id\n\n**Return:**\n\n```windowObject``` - windowObject\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택 된 tab의 객체 반환\nvar tmpObj = tabControl1.getWindow();\n\n//선택 된 tab의 컨텐츠에 있는 input1 컴포넌트에 value를 설정.\ntmpObj.input1.setValue(\"WebSquare\");\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getFrame": {
          "!type": "fn(idx: number)",
          "!doc": "tab의 index(또는 id)에 해당하는 iframe 또는 wframe을 반환한다.\n\nwframe 또는 iframe안의 객체(컴포넌트,function 등)에 접근하려면 getWindow API를 사용한다.\n\n**Parameters:**\n\n```idx``` - ```Number||String:Y``` - tab의 index 또는 tab의 id\n\n**Return:**\n\n```Object``` - tab index에 해당하는 wframe 또는 iframe 객체\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//첫번째 tab의 src를 \"/tmp/tmp01.xml\"로 변경한다.\nvar tmpContFrame = tabControl1.getFrame(0);\ntmpContFrame.setSrc(\"/tmp/tmp01.xml\");\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "enableTab": {
          "!type": "fn(tabIndex: number)",
          "!doc": "tab의 disabeld를 해제한다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - enabled할 tab의 index.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 tab을 활성화한다.\ntabControl1.enableTab(0);\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getTabCount": {
          "!type": "fn(options: +Object)",
          "!doc": "현재 tab 개수 반환.\n\n**Parameters:**\n\n```options``` - ```JSONObject:Y``` - getTabCount의 반환 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|hiddenTab|<Boolean:N>|hideTab으로 숨겨진 탭을 전체 개수에 포함. (default: true)|\n\n**Return:**\n\n```Number``` - 현재 tab의 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar totTabCount = tabControl1.getTabCount();\n```\n\n"
        },
        "getSelectedTabID": {
          "!type": "fn()",
          "!doc": "현재 선택된 tab의 ID를 반환한다.\n\n**Return:**\n\n```String``` - 선택된 tab의 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nvar returnValue = tabControl1.getSelectedTabID();\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setTabHTML": {
          "!type": "fn(tabID: string, tabHTML: string)",
          "!doc": "tabHTML 값을 동적으로 변경한다. 타이틀 영역을 html string을 직접 넣어서 꾸미기 위한 API이다.\n\n**Parameters:**\n\n```tabID``` - ```String:Y``` - 대상 tab의 ID\n\n```tabHTML``` - ```String:Y``` - 설정할 tabHTML값 또는 변수명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n tabControl1.setTabHTML(scwin.tabControl1_tabHTML);\n scwin.tabControl1_tabHTML = \"<span>test<\/span>\";\n```\n\n"
        },
        "showTab": {
          "!type": "fn(tabIndex: number)",
          "!doc": "(SP5 async) hide된 tab을 보여둔다.\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await tabControl.showTab(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```tabIndex``` - ```Number:Y``` - tab의 index\n\n**Return:**\n\n```Promise``` - (SP5)showTab 성공 여부 (true/false)를 포함하는 Promise 객체 반환\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n // SP5에서 showTab가 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.showTabTest또한 async function이 되어야 한다.\n scwin.showTabTest = async function() {\n     // SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 showTab호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await tabControl1.showTab(1);\n     common.doSomething(); // 만약 위의 showTab 호출 시 await 키워드를 생략할 경우 showTab이 완료되기 전에 이 함수가 호출된다.\n }\n\n```\n\n"
        },
        "createFrame": {
          "!type": "fn()",
          "!doc": "빈 iframe을 동적으로 생성한다. 단 iframe의 총 개수가 windowMaxNum 설정과 같은 경우에는 이 함수를 직접 호출하더라도 빈 iframe을 생성하지 않는다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setWidth": {
          "!type": "fn(width: number)",
          "!doc": "tabControl의 width를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 컴포넌트의 width.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n//width를 200px로 설정한다.\ntabControl1.setWidth(200);\n```\n\n"
        },
        "setContentsHeight": {
          "!type": "fn(height: number)",
          "!doc": "컨텐츠 영역의 높이(px단위)를 설정한다\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - height(숫자만 입력한다)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//tabControl의 컨텐츠 영역의 높이를 500px로 변경한다.\ntabControl1.setContentsHeight(500);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "deleteTab": {
          "!type": "fn(idx: number)",
          "!doc": "(SP5 async) 탭의 index로 탭을 삭제한다(닫는다).\n\nSP5에서 비동기 함수로 변경되었다. 따라서 await tabControl.deleteTab(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 삭제하(닫으)려는 텝의 index\n\n**Return:**\n\n```Promise``` - (SP5) Promise 객체 반환\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // SP5에서 deleteTab가 비동기 함수가 되었으므로 이 함수의 호출을 포함하는 scwin.deleteTabTest또한 async function이 되어야 한다.\n scwin.deleteTabTest = async function() {\n     // SP5에서는 Promise 객체를 return하므로 await 키워드를 붙여야 deleteTab호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await tabControl1.deleteTab(1);\n     //tab의 id가 \"tab1\"인 tab을 제거하고자 할 때  \n     await tabControl1.deleteTab(\"tab1\");\n     common.doSomething(); // 만약 위의 deleteTab 호출 시 await 키워드를 생략할 경우 deleteTab이 완료되기 전에 이 함수가 호출된다.\n }\n\n```\n\n"
        },
        "deleteAllTabs": {
          "!type": "fn()",
          "!doc": "TabControl의 모든 탭을 한번에 삭제한다(닫는다).\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ntabControl1.deleteAllTabs();\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabelText": {
          "!type": "fn(idx: number, label: number)",
          "!doc": "tab의 label을 설정한다.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - tab의 index\n\n```label``` - ```Number:Y``` - tab의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 tab의 label을 \"임시페이지\"로 설정한다.\ntabControl1.setLabelText(0, \"임시페이지\");\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fwGanttChart": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setAccessibility": {
          "!type": "fn(flag: bool)",
          "!doc": "FusionChart에 웹접근성지원 함수입니다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 접근성 on / off\n\n**Since:**\n\n5.0_2.5115B.20231219.160643\n\n**Sample:**\n\n```javascript\n chart1.setAccessibility(true); on\n chart1.setAccessibility(flag); off\n```\n\n"
        },
        "exportJSChart": {
          "!type": "fn(type: string)",
          "!doc": "fwGanttChart를 jpg,png,pdf형식으로 export하는 함수입니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - export 타입, 디폴트값:jpg\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n fwGanttChart.exportJSChart(\"pdf\");\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nfwGanttChart1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setConnector": {
          "!type": "fn(info: +Object)",
          "!doc": "fwGanttChart에서 task 사이를 connector로 연결.\n\n**Parameters:**\n\n```info``` - ```Object:Y``` - 연결정보\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar info = {\n    \"fromtaskid\": \"2\",\n    \"totaskid\": \"1\",\n    \"thickness\": \"2\"\n};\nfwGanttChart1.setConnector(info);\n```\n\n"
        },
        "setCategories": {
          "!type": "fn(fwGanttChart: +Object)",
          "!doc": "fwGanttChart의 Catagories를 설정한다.\n\n**Parameters:**\n\n```fwGanttChart``` - ```Object:Y``` - 카테고리 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var data = {\"category\":[\n                    {\"start\":\"02/01/2015\",\"end\":\"03/31/2015\",\"label\":\"1분기\"},\n                    {\"start\":\"04/01/2015\",\"end\":\"06/30/2015\",\"label\":\"2분기\"}\n                ]\n            };\n fwGanttChart1.setCategories(data);\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSVGString": {
          "!type": "fn()",
          "!doc": "차트로부터 SVG를 string 형태로 반환한다.\n\n**Return:**\n\n```String``` - 전처리된 svg string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSONData": {
          "!type": "fn(json: +Object)",
          "!doc": "지정된 json 객체로 fwGanttChart의 차트 데이터를 변경합니다.\n\n**Parameters:**\n\n```json``` - ```Object:Y``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "fc": {
          "!type": "fn()",
          "!doc": "fwGanttChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.\n\n**Return:**\n\n```Object``` - FusionWidget 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.fc().getJSONData();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setChartAttribute": {
          "!type": "fn(options: +Object)",
          "!doc": "fwGanttChart의 attribute의 value값을 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 추가할 옵션 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    caption : \"Monthly Revenue\", \n    subCaption : \"subcaption test\", \n    xAxisName : \"Month\", \n    yAxisName:\"Revenue\"\n}\nfwGanttChart1.setChartAttribute(options);\n```\n\n"
        },
        "setTrendLine": {
          "!type": "fn(info: +Object)",
          "!doc": "fwGanttChart에 세로 선을 추가. (시작 지점,끝 지점 등으로 사용 가능.)\n\n**Parameters:**\n\n```info``` - ```Object:Y``` - trendLine속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar info = {\n    \"line\":[{\"start\":\"07/09/2015\",\"displayValue\":\"Start Point\",\"color\":\"ff0000\",\"thickness\":\"2\",\"dashed\":\"1\"}]\n};\nfwGanttChart1.setTrendLine(info);\n```\n\n"
        },
        "setTaskAttribute": {
          "!type": "fn(info: +Object)",
          "!doc": "fwGanttChart에 Task를 지정.\n\n**Parameters:**\n\n```info``` - ```Object:Y``` - Task 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar info = {\n    \"fontcolor\":\"ff0000\",\n    \"showenddate\":\"1\",\n    \"fontSize\":\"20\"\n};\nfwGanttChart1.setTaskAttribute(info);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addCategories": {
          "!type": "fn(fwGanttChart: +Object)",
          "!doc": "fwGanttChart의 Catagories를 추가한다.\n\n**Parameters:**\n\n```fwGanttChart``` - ```Object:Y``` - 카테고리 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var data = {\"category\":[\n                    {\"start\":\"02/01/2015\",\"end\":\"03/31/2015\",\"label\":\"1분기\"},\n                    {\"start\":\"04/01/2015\",\"end\":\"06/30/2015\",\"label\":\"2분기\"}\n                ]\n            };\n fwGanttChart1.addCategories(data);\n```\n\n"
        },
        "setDatatableAttribute": {
          "!type": "fn(datatable: +Object)",
          "!doc": "fwGanttChart의 datatable에서 사용하는 칼럼의 속성을 설정.\n\n관련 속성: dataColumns (datatable에서 사용할 컬럼의 ID를 지정.)\n\n**Parameters:**\n\n```datatable``` - ```Object:Y``` - 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // datatable에서 여러 개의 컬럼을 사용하는 경우\n |var obj = {\n        \"headerbgcolor\": \"#999999\",\n        \"headerfontcolor\": \"#ffffff\",   \n        \"datacolumn\" : [\n            {   \"bgcolor\": \"#eeeeee\",\n                \"headertext\": \"ActualStartDate\"\n            },\n            {\n                \"bgcolor\": \"#eeeeee\",\n                \"headertext\": \"ActualEndDate\"\n            }]\n        };\nfwGanttChart1.setProcessesAttribute(info);\n```\n\n"
        },
        "setTasksColor": {
          "!type": "fn(taskID: string, color: string)",
          "!doc": "fwGanttChart에 task에 개별로 색상을 지정함.\n\n**Parameters:**\n\n```taskID``` - ```String:Y``` - 태스크 ID\n\n```color``` - ```String:Y``` - 적용할 색상\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwGanttChart1.setTasksColor(\"7\",\"#ffff00\");\n```\n\n"
        },
        "draw": {
          "!type": "fn()",
          "!doc": "fwGanttChart를 화면에 출력합니다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nfwGaugeChart1.draw();\n```\n\n"
        },
        "getChartAttribute": {
          "!type": "fn(name: string)",
          "!doc": "fwGanttChart의 attribute값을 반환합니다.\n\n**Parameters:**\n\n```name``` - ```String:Y``` - attribute 이름\n\n**Return:**\n\n```String``` - attribute 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getChartAttribute(\"caption\");\n```\n\n"
        },
        "setMilestone": {
          "!type": "fn(info: +Object)",
          "!doc": "fwGanttChart에 milestone을 지정.\n\n**Parameters:**\n\n```info``` - ```Object:Y``` - Milestone 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar info = {\n    \"date\": \"05/01/2015\",\n    \"taskid\": \"3\",\n    \"color\": \"#f8bd19\",\n    \"shape\": \"star\",\n    \"tooltext\": \"MileStones\"\n};\nfwGanttChart1.setMilestones(info);\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setProcessesAttribute": {
          "!type": "fn(info: +Object)",
          "!doc": "fwGanttChart에 processes 속성을 설정.\n\n**Parameters:**\n\n```info``` - ```Object:Y``` - Processes 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar info = {\n    \"align\":\"right\",\n    \"hoverBandColor\":\"990000\",\n    \"isBold\":\"1\",\n    \"fontSize\":\"15\"\n};\nfwGanttChart1.setProcessesAttribute(info);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getJSONData": {
          "!type": "fn()",
          "!doc": "fwGanttChart의 차트데이터를 JSON객체를 반환합니다.\n\n**Return:**\n\n```Object``` - 차트 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nchart1.getJSONData();\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "pageFrame": {"setSrc": {
        "!type": "fn(src: string)",
        "!doc": "src 속성을 설정하고, 해당 값으로 명시된 페이지를 렌더링.\n\n비동기 함수이므로 await pageFrame.setSrc(); 형태로 호출해야 올바로 동작한다. 이 함수의 호출을 포함하는 함수들은 async function이 되어야 한다.\n\n**Parameters:**\n\n```src``` - ```String:Y``` - 새로 설정할 pageFrame의 src 값\n\n**Return:**\n\n```Promise``` - setSrc 성공 여부 (true/false)를 포함하는 Promise 객체 반환\n\n**Since:**\n\n6.0_0.1012B.20240130.162943\n\n**Sample:**\n\n```javascript\n // setSrc가 비동기 함수이므로 이 함수의 호출을 포함하는 scwin.setSrcTest또한 async function이 되어야 한다.\n scwin.setSrcTest = async function() {\n     // 실제 전달할 데이터 정의. 새로 열릴 탭에 데이터를 전달 (dataObject를 통해 전달 가능) \n     var rowJSON = { \n        \"Personal Info\" : { \"Name\": \"Lee\", \"Age\": 50, \"Married\" : false},\n        \"Region\": \"Seoul\",  \n        \"Carrier\": true \n     }; \n \n     // 새로 열릴 화면에 데이터를 전달 (dataObject를 통해 전달 가능)\n     var obj = { \n        \"dataObject\": {\n            \"type\" : \"json\",\n            \"name\" : \"pageFrameParam\",  \n            \"data\" : rowJSON \n         }\n     };\n     //Promise 객체를 return하므로 await 키워드를 붙여야 setSrc호출 이후의 동작이 정상적인 순서로 동작하게 된다.\n     await pageFrame1.setSrc(\"popup_sub.xml\", obj); \n     common.doSomething(); // 만약 위의 setSrc 호출 시 await 키워드를 생략할 경우 setSrc가 완료되기 전에 이 함수가 호출된다. \n }\n\n \n // pageFrame 화면에서 전달 받은 데이터를 확인하는 예제 \n // var paramData = $p.getParameter(\"pageFrameParam\");\n // var data = JSON.stringify(paramData);\n // alert(data);\n \n\n```\n\n"
      }},
      "dataMap": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 전역 window객체를 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe객체의 scope객체 또는 전역window객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataMap1이 있는 경우\n var scope = dataMap1.getScopeWindow();\n scope.wframe11 === dataMap1.getScope(); // true\n```\n\n"
        },
        "setJSON": {
          "!type": "fn(jsonData: +Object)",
          "!doc": "DataMap의 전체 데이터를 JSON으로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.\n\n**Parameters:**\n\n```jsonData``` - ```JSON:Y``` - JSON형태의 DataMap의 전체 데이터.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\nvar tmpData = { \"name\" : \"웹스퀘어\" };\ndataMap1.setJSON( tmpData );\n```\n\n"
        },
        "getModifiedJSON": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 JSON으로 반환합니다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```JSON``` - DataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 JSON.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modJSON = dataMap1.getModifiedJSON();\n//return 예시 - String으로 변환 시 ) { name: \"인스웨이브\" }\n```\n\n"
        },
        "getName": {
          "!type": "fn(keyID: string)",
          "!doc": "KeyInfo에 정의 된 key의 id로 name에 정의 된 값을 반환한다.\n\n**Parameters:**\n\n```keyID``` - ```String:Y``` - KeyInfo에 정의 된 Key ID.\n\n**Return:**\n\n```String``` - KeyInfo에 정의 된 Key  Name.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\nvar keyName = dataMap1.getName(\"name\");\n//return 예시 ) \"이름\"\n```\n\n"
        },
        "getIndex": {
          "!type": "fn(keyID: string)",
          "!doc": "key의 ID로 KeyInfo에 정의 된 key의 index를 반환한다.\n\n**Parameters:**\n\n```keyID``` - ```String:Y``` - KeyInfo에 정의 된 id.\n\n**Return:**\n\n```Number``` - keyID의 index.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "modifyKeyStatus": {
          "!type": "fn(key: string, isModified: bool)",
          "!doc": "key에 해당하는 상태값을 변경됨(true) 또는 변경되지않음(false) 상태로 조작한다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 상태를 변경할 key\n\n```isModified``` - ```Boolean:Y``` - 설정할 상태값. true일 경우 변경됨으로 인식하며, false일 경우 변경되지 않음으로 인식\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ndataMap1.modifyKeyStatus(\"key1\", false); // key1 상태를 변경되지않음으로 설정한다. dataMap1.getModifiedJSON 호출 시 key1은 빠지게 된다.\ndataMap1.modifyKeyStatus(\"key1\", true); // key1 상태를 변경됨으로 설정한다. dataMap1.getModifiedJSON 호출 시 key1이 포함되게 된다.\n```\n\n"
        },
        "getArray": {
          "!type": "fn()",
          "!doc": "DataMap 전체 데이터를 KeyInfo에 정의 된 순서대로 array에 담아 반환한다.\n\n**Return:**\n\n```Array``` - DataMap 전체 데이터가 담긴 1차원 Array.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n    <w2:data use=\"true\">\n        <name>웹스퀘어<\/name>\n        <addr><\/addr>\n    <\/w2:data>\n<\/w2:dataMap>\n\nvar tmpArr = dataMap1.getArray();\n//return 예시 ) [\"웹스퀘어\", \"\"]\n```\n\n"
        },
        "getOption": {
          "!type": "fn(attr: string)",
          "!doc": "속성명으로 dataMap에 정의 된 속성의 값을 반환한다.\n\n**Parameters:**\n\n```attr``` - ```String:Y``` - 속성명.\n\n**Return:**\n\n```String``` - dataMap에 정의 된 속성의 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\" baseNode=\"map\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\nvar tmpAttr = dataMap1.getOption(\"baseNode\");\n//return 예시 ) \"map\"\n```\n\n"
        },
        "getOriginal": {
          "!type": "fn(KeyID: string)",
          "!doc": "KeyInfo에 정의 된 Key ID에 할당 된 초기값을 반환한다.\n\n**Parameters:**\n\n```KeyID``` - ```String:Y``` - Key ID.\n\n**Return:**\n\n```Object``` - Key ID에 할당 한 초기값. ( return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n    <w2:data use=\"true\">\n        <name>웹스퀘어<\/name>\n    <\/w2:data>\n<\/w2:dataMap>\n\n//name의 value set.\ndataMap1.set(\"name\",\"inswave\");\n\n//name의 value get\n//var tmpData = dataMap1.get(\"name\");\n//return 예시 ) \"inswave\"\n\n//name의 초기값 get.    \nvar tmpOrgData = dataMap1.getOriginal(\"name\");\n//return 예시 ) \"웹스퀘어\"\n```\n\n"
        },
        "redo": {
          "!type": "fn()",
          "!doc": "데이터를 변경된 시점 최근 한단계로 되돌린다.\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "initRowStatus": {
          "!type": "fn()",
          "!doc": "dataMap의 상태를 모두 변경되지않음 상태로 설정한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n dataMap1.initRowStatus(); // dataMap1의 상태가 모두 변경되지않음 상태로 설정된다. 따라서 이후 dataMap1.getModifiedJSON() 호출 시 빈 객체가 반환된다.\n```\n\n"
        },
        "getModifiedArray": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 key array와 value array를 JSON으로 반환한다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```JSON``` - original 데이터와 현재 값이 다른 key array와 value array가 담긴 JSON.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modJsonArray = dataMap1.getModifiedArray();\n//return 예시 - String으로 변환 시 ) { key : [\"name\"] , value : [\"인스웨이브\"] }\n```\n\n"
        },
        "undo": {
          "!type": "fn()",
          "!doc": "DataMap의 key value를 초기(original)값으로 변경한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "dataMap의 이벤트를 동적으로 할당한다.\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 동적으로 할당할 이벤트의 이름\n\n```function``` - ```Function:Y``` - 동적으로 할당 할 이벤트의 핸들러 함수.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap의 id가 dataMap1 인 경우\ndataMap1.bind(\"onsetdata\", function(e){ alert(\"date setting\");});\n\n//event 함수를 commObj.fn_dcDataSet 으로 정의 한 경우\ndataMap1.bind(\"onsetdata\", commObj.fn_dcDataSet );\n```\n\n"
        },
        "getModifiedXML": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 XML로 반환합니다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```XML``` - DataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 XML.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modXML = dataMap1.getModifiedXML();\n//return 예시 - String으로 변환 시 ) <map id=\"dataMap1\"><name>인스웨이브<\/name><\/map>\n```\n\n"
        },
        "get": {
          "!type": "fn(key: string)",
          "!doc": "KeyInfo에 정의되어있는 Key ID에 할당 된 value를 반환한다. value의 초기값은 (empty string)이다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - Key ID.\n\n**Return:**\n\n```Object``` - Key ID에 할당 된 value. ( return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setXML": {
          "!type": "fn(xmlData: +Object)",
          "!doc": "DataMap의 전체 데이터를 XML로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.\n\n**Parameters:**\n\n```xmlData``` - ```XML:Y``` - XML형태의 DataMap의 전체 데이터.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\nvar tmpStr = \"<map><name>웹스퀘어<\/name><\/map>\";        //XML String.\nvar tmpXML = WebSquare.xml.parse(tmpStr);   //XML 변환\ndataMap1.setXML( tmpXML );\n```\n\n"
        },
        "getObjectType": {
          "!type": "fn()",
          "!doc": "dataCollection의 Type을 반환한다.\n\n**Return:**\n\n```String``` - [dataMap, dataList, linkedDataList] dataCollection의 타입을 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar dataCollectionType = dataMap1.getObjectType(); // dataCollectionType dataMap1의 type인 dataMap를 반환합니다.\nreturn 예시 ) \"dataMap\"\n```\n\n"
        },
        "getKeyInfo": {
          "!type": "fn(key: string)",
          "!doc": "dataMap 특정 key의 세부 정보를 조회한다.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 조회하고자 하는 key\n\n**Return:**\n\n```JSON``` - 해당 key의 attribute를 표현한 json 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n //\ndataList1.getKeyInfo(\"key1\");\n\n```\n\n"
        },
        "setEmptyValue": {
          "!type": "fn()",
          "!doc": "key값을 확인하여 빈 값을 셋팅합니다. 디폴트 값이 있는 경우, 디폴트 값으로 셋팅됩니다.\n\n(OriginalData와 현재데이터 모두 빈 값으로 셋팅합니다.)\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCount": {
          "!type": "fn()",
          "!doc": "DataMap에 정의 된 key의 개수를 반환한다.\n\n**Return:**\n\n```Number``` - DataMap에 정의 된 key의 개수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getKey": {
          "!type": "fn(keyIndex: number)",
          "!doc": "key의 index를 받아 ID명을 반환한다.\n\n**Parameters:**\n\n```keyIndex``` - ```Number:Y``` - KeyInfo에 정의 된 key의 index.\n\n**Return:**\n\n```String``` - key의 ID.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n    <w2:data use=\"true\">\n        <name>웹스퀘어<\/name>\n        <addr><\/addr>\n    <\/w2:data>\n<\/w2:dataMap>\n\nvar tmpKeyNm = dataMap1.getKey(0);\n//return 예시 ) \"name\"\n```\n\n"
        },
        "set": {
          "!type": "fn(KeyID: string, KeyValue: string)",
          "!doc": "DataMap에 정의 된 Key ID에 value를 셋팅한다.\n\n**Parameters:**\n\n```KeyID``` - ```String:Y``` - Key의 ID.\n\n```KeyValue``` - ```String:Y``` - Key에 할당 할 value.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\ndataMap1.set(\"name\",\"웹스퀘어\");\n```\n\n"
        },
        "getInfo": {
          "!type": "fn()",
          "!doc": "dataMap의 세부 정보를 조회한다.\n\n**Return:**\n\n```JSON``` - {dataMapInfo : dataMap의 attribute값, keyInfo : 각 key의 attribute들을 모아둔 object} 형태의 json객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//\ndataMap1.getInfo();\n\n```\n\n"
        },
        "getModifiedIndex": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 Index를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```Array``` - original 데이터와 현재값이 다른 key들의  Index가 담긴 Array.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modArray = dataMap1.getModifiedIndex();\n//return 예시 ) [0]\n```\n\n"
        },
        "restore": {
          "!type": "fn()",
          "!doc": "데이터를 이전 한단계로 되돌린다.\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getXML": {
          "!type": "fn()",
          "!doc": "DataMap의 전체 데이터를 XML 형태로 반환한다.\n\n**Return:**\n\n```XML``` - XML 타입의 전체 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n    <w2:data use=\"true\">\n        <name>웹스퀘어<\/name>\n        <addr><\/addr>\n    <\/w2:data>\n<\/w2:dataMap>\n\nvar tmpXML = dataMap1.getXML();\n//return 예시 )\n//<map id=\"dataMap1\">\n//      <name>웹스퀘어<\/name>\n//      <addr><\/addr>\n//<\/map>\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "dataMap 객체의 id를 반환한다. 객체의 id 속성과 동일한 값을 반환한다.\n\n**Return:**\n\n```String``` - dataMap 객체의 ID.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedData": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 value를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```Array``` - original 데이터와 현재값이 다른 key들의 value가 담긴 Array.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modArray = dataMap1.getModifiedData();\n//return 예시 ) [ \"인스웨이브\" ]\n```\n\n"
        },
        "getModifiedKey": {
          "!type": "fn()",
          "!doc": "DataMap의 original 데이터와 현재 데이터의 값이 다른 Key들을 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.\n\n**Return:**\n\n```Array``` - original 데이터와 현재값이 다른 key가 담긴 Array.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 addr이 정의 되어있는 dataMap에서 name의 value를 \"인스웨이브\"로 수정 한 경우\nvar modKeyArr = dataMap1.getModifiedKey();\n//return 예시 ) [\"name\"]\n```\n\n"
        },
        "trigger": {
          "!type": "fn(eventType: string, paramArray: +Object)",
          "!doc": "dataMap에 등록 된 특정 이벤트를 직접 발생시킨다.\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 발생시킬 이벤트 이름\n\n```paramArray``` - ```Array:N``` - 이벤트 핸들러에 전달 할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// dataMap1에 onmodelcahnge이벤트를 발생시키고 핸들러 함수에 {key: \"name\", oldValue: \"WebSquare\", newValue: \"Inswave\"} 인자를 전달하여 호출한다.\n dataMap1.trigger( \"onmodelchange\" , [ {key: \"name\", oldValue: \"WebSquare\", newValue: \"Inswave\"} ] );\n```\n\n"
        },
        "setArray": {
          "!type": "fn(arrayData: +Object)",
          "!doc": "DataMap의 전체 데이터를 Array로 셋팅한다. array의 value index(순서)는 DataMap에 정의 된 Key의 index(순서)와 동일해야한다.\n\n**Parameters:**\n\n```arrayData``` - ```Array:Y``` - KeyInfo에 정의 된 key 순서/개수와 동일하고 value만 담긴 Array.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\ndataMap1.setArray( [\"웹스퀘어\",\"서울시\"] );    //정상 동작\ndataMap1.setArray( [\"웹스퀘어\"] );  //오류 발생\n```\n\n"
        },
        "reform": {
          "!type": "fn()",
          "!doc": "DataMap의 key의 상태를 초기화하고 original값을 현재의 key값으로 변경한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getType": {
          "!type": "fn(KeyID: string)",
          "!doc": "KeyInfo에 정의 된 Key의 dataType 속성 값을 반환한다.\n\n**Parameters:**\n\n```KeyID``` - ```String:Y``` - Key ID.\n\n**Return:**\n\n```String``` - Key의 dataType 속성 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\nvar keyType = dataMap1.getType();\n//return 예시 ) \"text\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "dataMap의  정의 된 이벤트를 제거한다.\n\n**Parameters:**\n\n```eventType``` - ```String:N``` - 제거할 이벤트의 이름. 생략할 경우 모든 이벤트를 제거한다.\n\n```function``` - ```Function:N``` - 동적으로 event에 function을 할당 한 경우 제거 할 이벤트 핸들러 함수. 생략 할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// dataMap1에 등록된 onmodelchange 이벤트 제거.\n dataMap1.unbind(\"onmodelchange\");\n\n//dataMap1.bind(\"onmodelchange\", fn_dataMapChage) 와 같이 동적으로 이벤트와 이벤트 핸들러를 등록 한경우 아래와 같이 제거가 가능하다. ( 이벤트에 bind 된 이벤트 핸들러 제거 )\n dataMap1.unbind(\"onmodelchange\", fn_dataMapChage); // dataMap1에 등록된 onmodelchange이벤트의 이벤트 핸들러 함수 중에 fn_dataMapChage를 제거\n```\n\n"
        },
        "getJSON": {
          "!type": "fn()",
          "!doc": "DataMap 전체 데이터를 JSON으로 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataMap 예시\n<w2:dataMap id=\"dataMap1\">\n    <w2:keyInfo>\n        <w2:key id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n    <w2:data use=\"true\">\n        <name>웹스퀘어<\/name>\n        <addr><\/addr>\n    <\/w2:data>\n<\/w2:dataMap>\n\nvar tmpJSON = dataMap1.getJSON();\n//return 예시 - String으로 변환 ) {name: \"웹스퀘어\", addr: \"\" }\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 null을 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataMap1이 있는 경우\n dataMap1.getScope(); // wframe11 객체를 반환한다.\n```\n\n"
        }
      },
      "checkbox": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "컴포넌트로 포커스를 이동.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 사용 예\ncheckbox1.getDataListInfo();\n```\n\n"
        },
        "removeAll": {
          "!type": "fn()",
          "!doc": "모든 선택 항목을 삭제.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\ncheckbox1.removeAll();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 label을 반환. 선택된 항목이 여러 개인 경우, separator를 사용하여 반환.\n\nseparator를 설정하지 않은 경우, 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택된 항목들의 label이 담긴 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 컴포넌트가 정의된 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Orange]]><\/xf:label>\n            <xf:value><![CDATA[3]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n \nvar returnValue = checkbox1.getText();\n// (반환 값) \"Apple Orange\"\n\n// Use separator \",\"\nvar returnValue = checkbox1.getText(\",\");\n// (반환 값) \"Apple,Orange\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "getItemDisabled": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 설정을 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n**Return:**\n\n```Boolean``` - 해당 항목의 disabled 상태\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 활성화 되어있고, 첫번째 항목의 활성화 여부를 반환 받는 예\n\nvar returnValue = checkbox1.getItemDisabled(0);\n// (반환 값) false\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "click": {
          "!type": "fn(index: number)",
          "!doc": "index에 해당하는 항목에 클릭 이벤트를 발생시켜 해당 항목을 선택/해제.\n\nonviewchange 등 클릭 관련 이벤트를 발생시킴.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 클릭 이벤트를 발생시킬 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 항목에 클릭 이벤트를 발생시키는 예제\n// 첫번째 항목을 선택/해제\ncheckbox1.click(0);\n```\n\n"
        },
        "setEnableColumn": {
          "!type": "fn(columnId: string, enableColumnFalseValue: string)",
          "!doc": "enableColumn 속성을 동적으로 설정.\n\nenableColumn 속성으로 설정된 컬럼은 Checkbox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음.\n\nenableColumn 속성은 Checkbox의 선택 항목 목록 중 특정 항목을 disable 시키기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n enableColumn\n enableColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - enableColumn으로 설정할 컬럼의 ID. (disable 시킬 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```enableColumnFalseValue``` - ```String:N``` - 목록을 disable 시키기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Checkbox는 DataList와 바인딩되어 있음.\ncheckbox1.setEnableColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Checkbox의 선택 목록에 disable 처리되어 표시됨.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 인덱스를 반환. 여러 항목이 선택된 경우, separator를 사용하여 반환함.\n\nseparator를 설정하지 않을 경우, 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 간 구분자\n\n**Return:**\n\n```String``` - 선택된 항목의 인덱스가 담긴 문자열.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 컴포넌트가 정의되고 Apple과 Orange를 선택하는 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Orange]]><\/xf:label>\n            <xf:value><![CDATA[3]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n\nvar returnValue1 = checkbox1.getSelectedIndex();\n// (반환 값) \"0 2\"\n \n// The separator being defined as \",\"\nvar returnValue2 = checkbox1.getSelectedIndex(\",\"); \n// (반환 값) \"0,2\"\n```\n\n"
        },
        "reset": {
          "!type": "fn()",
          "!doc": "모든 선택 항목의 체크를 해제.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 전체 항목의 체크를 해제.\ncheckbox1.reset();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "선택 항목 개수를 반환.\n\n**Return:**\n\n```Number``` - 선택 항목 개수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 총 2개의 선택 항목이 있는 경우\nvar returnValue = checkbox1.getItemCount();\n// (반환 값) 2\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = checkbox1.getNextTabID();\n```\n\n"
        },
        "addItem": {
          "!type": "fn(value: string, label: string, index: number)",
          "!doc": "선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 항목의 value\n\n```label``` - ```String:Y``` - 항목의 label\n\n```index``` - ```Number:N``` - 항목의 index\n\n**Return:**\n\n```Number``` - 추가된 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 항목을 정의한 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n\nvar returnValue = checkbox1.addItem( '3', 'ornage' );\n// (반환 값) 2\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ncheckbox1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// dataMap1의 hobby key와 checkbox1 컴포넌트의 value를 바인딩하는 경우\ncheckbox1.setRef(\"data:dataMap1.hobby\");\n\n// InstanceData의 \"res/userData/hobby\"와 연동 할 경우.\ncheckbox1.setRef(\"res/userData/hobby\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setVisibleColumn": {
          "!type": "fn(columnId: string, visibleColumnFalseValue: string)",
          "!doc": "visibleColumn 속성을 동적으로 설정.\n\nvisibleColumn 속성으로 설정된 컬럼은 Checkbox와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음.\n\nvisibleColumn 속성은 Checkbox의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n visibleColumn\n visibleColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```visibleColumnFalseValue``` - ```String:N``` - 목록을 감추기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Checkbox는 DataList와 바인딩되어 있음.\ncheckbox1.setVisibleColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Checkbox의 선택 목록에 표시되지 않음.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n mandatory=true\n displaymessage=true\n```\n\n\n\n**Return:**\n\n```Boolean``` - 유효성 검사 결과 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//모든 항목이 선택 해제되어 있는 경우\nvar returnValue = checkbox1.validate();\n\n// (반환 값) false\n\n// displaymessage=\"true\"인 경우, Engine이 \"필수 입력 항목입니다\"를 자동으로 출력함.\n```\n\n"
        },
        "checkAll": {
          "!type": "fn(checkFlag: +Object)",
          "!doc": "모든 항목을 선택하거나 해제.\n\n**Parameters:**\n\n```checkFlag``` - ```Bollean:Y``` - 선택/해제 상태\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|전체 선택|null|\n|\"false\"|전체 해제|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//전체 선택\ncheckbox1.checkAll(true);\n\n//전체 해제\ncheckbox1.checkAll(false);\n```\n\n"
        },
        "setItemDisabled": {
          "!type": "fn(index: number, flag: bool)",
          "!doc": "주어진 index에 해당하는 항목의 disabled 속성을 설정.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index\n\n```flag``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목을 비활성화\ncheckbox1.setItemDisabled(0, true); \n// 첫번째 항목은 선택 및 선택 해제가 불가능.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn(separator: string)",
          "!doc": "선택된 항목의 value를 반환. 선택된 항목이 여러 개인 경우 separator를 사용하여 반환됨.\n\nseparator를 설정하지 않은 경우 공백(space)이 구분자로 사용됨.\n\n**Parameters:**\n\n```separator``` - ```String:N``` - 항목 구분자\n\n**Return:**\n\n```String``` - 선택된 항목의 value가 담긴 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 컴포넌트가 정의되고 Apple과 Orange가 선택된 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Orange]]><\/xf:label>\n            <xf:value><![CDATA[3]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n\nvar returnValue = checkbox1.getValue();\n// (반환 값) \"1 3\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength \n minByteLength\n maxByteLength\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 아래와 같이 checkbox 컴포넌트에 mandatory 속성을 정의,\n\n<xf:select appearance=\"full\" id=\"checkbox1\" style=\"position: absolute;width:256px;height:79px;left:68px;top:254px;\" mandatory=\"true\">\n        <xf:choices>\n            <xf:itemset nodeset=\"data:dataList1\">\n                <xf:label ref=\"label\"><\/xf:label>\n                <xf:value ref=\"value\"><\/xf:value>\n            <\/xf:itemset>\n        <\/xf:choices>\n<\/xf:select>\n\nvar returnObj = checkbox1.validateObject();\n// (반환 값 - checkbox에 값이 없을 경우) returnObj 객체 반환\n\nreturnObj.callerId = \"checkbox1\" returnObj.type = \"mandatory\" returnObj.value = \"\"  \n// (반환 값 - checkbox에 값이 있을 경우) 비어있는 객체가 반환\n  \n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨.\n```\n\n"
        },
        "deleteItem": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목을 삭제.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 삭제할 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 항목을 정의한 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n\nvar returnValue = checkbox1.deleteItem( 0 );\n// (반환 값) {label: \"Apple\", value: \"1\"}\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "파라메터로 넘어온 값에 해당하는 선택 항목을 선택.  \n\n여러 항목을 한번에 설정할 경우 공백(space)를 이용하여 구분. 주어진 값에 대한 선택 항목이 없는 경우, 아무 동작이 일어나지 않음.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 컴포넌트가 정의된 경우,\n<xf:select id=\"checkbox1\" appearance=\"full\" style=\"position: relative;\" selectedindex=\"-1\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[Apple]]><\/xf:label>\n            <xf:value><![CDATA[1]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Cherry]]><\/xf:label>\n            <xf:value><![CDATA[2]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[Orange]]><\/xf:label>\n            <xf:value><![CDATA[3]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select>\n        \ncheckbox1.setValue(\"2\");    // \"Cherry\" 가 선택됨.\n\ncheckbox1.setValue(\"0 2\");  // \"Apple\"과 \"Orange\"가 선택됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\nDataList와 바인딩할 경우 nodeset 파라미터는 data:로 시작해야 함.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - DataList의 ID. \"data:\"로 시작해야 함. (혹은 InstanceData의 XPath)\n\n```label``` - ```String:N``` - label로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 label에 설정할 nodeset 하위의 XPath)\n\n```value``` - ```String:N``` - value로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 value에 설정할 nodeset 하위의 XPath)\n\n**Since:**\n\n2.0_1.3566B.20131112.110724\n\n**Sample:**\n\n```javascript\n// DataList 정의.\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"lbl\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"code\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <lbl><![CDATA[zero]]><\/lbl>\n            <code><![CDATA[0]]><\/code>\n        <\/w2:row>\n        <w2:row>\n            <lbl><![CDATA[one]]><\/lbl>\n            <code><![CDATA[1]]><\/code>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (예제 1) DataList1과 바인딩하고 label은 lbl 컬럼을, value는 code컬럼을 사용.   \ncheckbox1.setNodeSet('data:dataList1','lbl','code');\n\n// (예제 2) DataList2와 바인딩하고 label 및 value는 예전 컬럼 정보를 사용.\ncheckbox1.setNodeSet('data:dataList2'); \n// (결과) 기존에 할당된 label의 lbl과 value의 code는 그대로 유지되고 dataList만 변경됨.\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(index: number)",
          "!doc": "주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 첫번째 항목이 선택되지 않은 경우, 첫번째 항목이 선택됨. (선택된 경우에는, 선택이 해제됨)\ncheckbox1.setSelectedIndex(0);\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "iframe": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getWindow": {
          "!type": "fn()",
          "!doc": "IFrame 페이지의 window 객체를 반환. \n\n반환된 객체를 통해 IFrmae 페이지에 정의된 컴포넌트 및 전역 객체 등에 접근 가능.\n\n**Return:**\n\n```Object``` - iframe의 window 객체\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// IFrame 페이지에 있는 input1 컴포넌트에 접근하여 value값 반환 받고자 할 때\nvar retObj = iframe1.getWindow();   //iframe에 정의된 페이지의 window 객체 반환\nvar tmpRs = retObj.input1.getValue();   //ifrmae에 정의된 input1 컴포넌트의 value값을 API를 이용하여 꺼내옴\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setSrc": {
          "!type": "fn(pageURL: string)",
          "!doc": "src 페이지를 설정.\n\n**Parameters:**\n\n```pageURL``` - ```String:Y``` - 화면 URL\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (1) 동일한 domain에 있는 웹스퀘어 화면을 설정.\niframe1.setSrc(\"/xml/sub01.xml\");   //xml확장자의 경우 xml의 경로만 설정해도 된다.\n\n// (2) 동일한 domain에 있는 웹스퀘어 화면을 설정하고 get방식의 parameter를 정의할 경우\niframe1.setSrc(\"/xml/sub01.xml&eduTest=getParameterTest\");\n\n// (3) 위의 get방식으로 parameter를 넘긴 경우 sub01.xml 파일에서는 아래를 반환 받음.\nvar tmpRs = $p.getParameter( \"eduTest\" );\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSrc": {
          "!type": "fn()",
          "!doc": "src 속성에 정의 된 URL의 full경로를 반환한다.\n\n**Return:**\n\n```String``` - src 속성에 정의 된 URL의 full경로\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 /common/sub01.xml 파일을 설정한 경우\n<w2:iframe id=\"iframe1\" style=\"position: relative;width: 100%;height: 200px;\" src=\"/common/sub01.xml\"><\/w2:iframe>\n        \nvar returnValue = iframe1.getSrc();\n//return 예시 ) \"http://localhost:8080/websquare/websquare.html?w2xPath=/common/sub01.xml&w2xHome=/WS5/test/&w2xDocumentRoot=\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "aliasLinkedDataList": {
        "setScope": {
          "!type": "fn(scope: string)",
          "!doc": "Scope를 동적으로 변경. 즉 현재 참조하는 linkedDataList를 동적으로 바꾸는 함수. \n\n실행 후, aliasLinkedDataList와 바인딩된 컴포넌트들은 자동으로 값이 초기화됨.\n\n**Parameters:**\n\n```scope``` - ```String:Y``` - 참조할 linkedDataList 경로\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 참조할 linkedDataList를 동적으로 변경.\naliaslinkedDataList1.setScope(\"/linkedDataList1\");\n```\n\n"
        },
        "getObj": {
          "!type": "fn()",
          "!doc": "현재 aliasLinkedDataList가 참조하고 있는 linkeddataList 객체를 반환.\n\n**Return:**\n\n```Object``` - 현재 Scope로 참조하고 있는 dataList 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Scope에 지정된 객체를 반환\nvar parentLinkedDataList = aliasLinkedDataList1.getObj();\n```\n\n"
        }
      },
      "mapchart": {
        "setTextStyle": {
          "!type": "fn(attributeArr: +Object, valueArr: +Object)",
          "!doc": "지역명 text에 스타일을 적용.\n\n**Parameters:**\n\n```attributeArr``` - ```object:Y``` - 스타일 속성의 이름\n\n```valueArr``` - ```object:Y``` - 해당 속성에 적용될 값\n\n**Since:**\n\n5.0_5.5074B.20231106.083914\n\n**Sample:**\n\n```javascript\n mapchart1.setTextStyle([\"font-weight\", \"fill\"], [\"bold\", \"blue\"]);\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "setScale": {
          "!type": "fn(scale: number)",
          "!doc": "지도의 배율을 설정하는 함수\n\n**Parameters:**\n\n```scale``` - ```Float:Y``` - 설정할 배율값 (0보다 큰 float값으로 설정한다.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n mapchart1.setScale(0.8) // 지도의 배율을 원래 크기의 0.8배로 조절한다.\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "changeMap": {
          "!type": "fn(code: string)",
          "!doc": "인자로 넘겨준 code에 해당하는 지도가 그려지도록 화면을 변경한다.\n\n**Parameters:**\n\n```code``` - ```String:Y``` - 변경하고자 하는 지도의 코드값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nmapchart1.changeMap(\"11\");  // 현재 지도를 서울 지도로 변경한다.\n```\n\n"
        },
        "createPattern": {
          "!type": "fn(userPatternData: +Object, useDefaultPattern: bool)",
          "!doc": "svg에 적용할 패턴을 생성한다.\n\n**Parameters:**\n\n```userPatternData``` - ```object:Y``` - 패턴에 대한 정보를 가지고 있는 JSON 객체들의 배열\n\n```useDefaultPattern``` - ```boolean:N``` - 컴포넌트 내부에 있는 pattern 사용 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar patternArray = [{\"type\":\"line\", \"size\":4, \"stroke\":\"#BDBDBD\", \"strokeWidth\":1}];\nmapchart1.createPattern(patternArray);\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "addPattern": {
          "!type": "fn(patternData: +Object)",
          "!doc": "svg에 하나의 패턴을 만들기 위한 함수\n\n**Parameters:**\n\n```patternData``` - ```object:Y``` - 패턴에 대한 정보를 가지고 있는 JSON 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar pattern = {\"type\":\"line\", \"size\":4, \"stroke\":\"#BDBDBD\", \"strokeWidth\":1};\nmapchart1.addPattern(pattern);\n```\n\n"
        },
        "setColorScale": {
          "!type": "fn(level: string, key: string, domain: +Object, range: +Object)",
          "!doc": "지도의 level별로 json 데이터의 key(표현하고 싶은 값)에 따른 지역별 색상을 설정.\n\n**Parameters:**\n\n```level``` - ```string:Y``` - 지도의 level\n\n```key``` - ```string:Y``` - key 이름\n\n```domain``` - ```object:Y``` - key의 value로 표현하고 싶은 값의 범위를 나타내는 숫자 배열 (예: [0, 1])\n\n```range``` - ```object:Y``` - domain에 대응하여 보여질 색상 범위를 나타내는 배열 (예: [\"red\", \"blue\"])\n\n**Since:**\n\n5.0_5.5074B.20231106.083914\n\n**Sample:**\n\n```javascript\n mapchart1.setColorScale(\n     \"0\",\n     \"percent\",\n     [0, 0.25, 0.5, 0.75, 1],\n     [\"red\", \"yellow\", \"green\", \"turquoise\", \"blue\"]);\n // 지도의 level이 0일 때 percent라는 key의 value의 범위를 0에서 1까지, 색상 범위를 red에서 blue까지 설정한다.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getCurrentMap": {
          "!type": "fn()",
          "!doc": "현재 그려진 지도의 코드값을 가져온다.\n\n**Return:**\n\n```String``` - 현재 그려진 지도의 코드값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var currentMap = mapchart1.getCurrentMap();\n if(currentMap.length === 5) { mapchart1.changeMap(currentMap.slice(0,2)); }  // 현재 지도의 상위 지도로 지도를 변경한다.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "drillup": {
          "!type": "fn()",
          "!doc": "현재 지도의 부모 지도가 그려지도록 지도를 변경한다. 현재 지도가 최상위 지도(전국지도)인 경우에는 아무 동작을 하지 않는다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nmapchart1.drillup();\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getParentMap": {
          "!type": "fn()",
          "!doc": "현재 지도의 부모 지도의 코드값을 가져온다.\n\n**Return:**\n\n```String``` - 현재 지도의 부모 지도의 코드값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n mapchart1.changeMap(mapchart1.getParentMap()) 과 mapchart1.drillup()의 동작은 같다;\n```\n\n"
        },
        "changeMapPath": {
          "!type": "fn(mapPath: string)",
          "!doc": "인자로 넘겨준 path의 지도로 변경한다.\n\n**Parameters:**\n\n```mapPath``` - ```String:Y``` - 변경하고자 하는 지도의 path\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nmapchart1.changeMapPath(\"mapdata/2016\");    // 현재 지도를 mapdata/2016 디렉토리 안의 지도로 변경한다.\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "addMapEvent": {
          "!type": "fn(evName: string, func: +Object)",
          "!doc": "지도에 필요한 이벤트를 직접 추가한다. d3이 지원하는 이벤트만 효과가 있다.\n\n**Parameters:**\n\n```evName``` - ```String:Y``` - 추가하고자 할 이벤트\n\n```func``` - ```func:Y``` - 추가하고자 할 이벤트 핸들러 함수\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n mapchart1.addMapEvent(\"onkeydown\", scwin.mapchart1_onkeydown);\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "searchbox": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getDataType": {
          "!type": "fn()",
          "!doc": "dataType 속성 값을 반환. [default: text]\n\n**Return:**\n\n```String``` - searchbox의 dataType\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 searchbox를 정의 된 경우\n<w2:searchbox id=\"searchbox1\" dataType=\"number\" style=\"position: relative;width: 140px;height: 21px;\"><\/w2:searchbox>\n\nvar returnValue = searchbox1.getDataType();\n// (반환 예) \"number\"\n```\n\n"
        },
        "commit": {
          "!type": "fn()",
          "!doc": "searchboxt이 ref와 연동된 경우 input창에 보이는 값을 ref에 반영하는 함수 \n\n모든키의 실시간 적용은 지원하지 않으며, Enter키와 tab키 동작일 경우만 사용가능\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n<w2:searchbox onkeydown=\"scwin.searchbox_onkeydown\" ref=\"data:dataMap1.key1\"><\/w2:searchbox>\n```javascript\n scwin.searchbox_onkeydown = function(e) { \n    if((e.charCode || e.keyCode) === 13) { \n        searchbox.commit(); // searchbox에 현재 입력된 값을 dataMap1.key1에 반영한다. 이를 생략할 경우 key1값을 꺼냈을 때 searchbox에 입력되기 이전의 값을 얻게 된다. \n        dataMap1.get(\"key1\");\n    }\n }\n```\n\n"
        },
        "getFormattedValue": {
          "!type": "fn()",
          "!doc": "formatted된 searchbox의 값을 반환한다.\n\n**Return:**\n\n```String``` - formatted된 searchbox의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//searchBox1컴포넌트의 dataType이 number이고 displayFormat을 \"#,###\"으로 적용하고 1000000을 입력 한 경우\nvar returnValue = searchBox1.getFormattedValue();\n//return 예시 )\"1,000,000\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "컴포넌트로 포커스를 이동.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\nsearchbox1.focus();\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nsearchbox1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "getDisplayFormatter": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.\n\n**Return:**\n\n```String``` - 현재 컴포넌트에 설정된 format용 함수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//searchBox1 컴포넌트의 displayFormatter=\"eduObj.fn_numFormat\" 설정 시\nvar returnValue = searchBox1.getDisplayFormatter();\nreturn 예시 ) \"eduObj.fn_numFormat\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getDisplayFormat": {
          "!type": "fn()",
          "!doc": "현재 컴포넌트에 설정 된 displayFormat을 반환한다.\n\n**Return:**\n\n```String``` - 현재 설정된 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//dataType이 number이고 displayFormat을 #,###으로 적용 한 경우\nvar returnValue = searchBox1.getDisplayFormat();\n//return 예시 ) \"#,###\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(ref: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```ref``` - ```String:Y``` - 설정할 ref의 경로\n\n**Since:**\n\n5.0_4.4655B.20220627.201913\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setDisplayFormatter": {
          "!type": "fn(formatter: string)",
          "!doc": "컴포넌트의 displayFormatter 속성을 설정한다.\n\n**Parameters:**\n\n```formatter``` - ```String:Y``` - 새로 설정할 format용 함수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 searchBox가 정의 된 경우\n<w2:searchbox id=\"searchbox1\" style=\"position: relative;width: 140px;height: 21px;\"><\/w2:searchbox>\n\n//전역스크립트에 아래와 같이 input의 format Function을 정의 한다.(value의 값을 대문자로 치환) \nvar commObj = {}; \ncommObj.fn_setUpper = function(value){\n    value = value.toUpperCase();\n    return value;\n};\n\n//searchbox1컴포넌트의 displayFormatter를 설정.\nsearchbox1.setDisplayFormatter(\"commObj.fn_setUpper\");\n\n//표현 예시 ) 사용자가 'hong gil dong'을 입력시 'HONG GIL DONG'로 표현 된다.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength\n minByteLength\n maxByteLength\n```\n\n\n\n**Return:**\n\n```Boolean``` - 유효성 검사 결과 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 searchbox 컴포넌트에 mandatory 속성을 정의했을 경우\n<w2:searchbox id=\"searchbox1\" mandatory=\"true\" style=\"position: relative;width: 140px;height: 21px;\"><\/w2:searchbox>\n\nvar returnValue = searchbox1.validate();\n// (반환 값 - searchbox의 값이 없을 경우) false\n// (반환 값 - searchbox의 값이 있을 경우) true\n\n// displaymessage=\"true\" 설정을 사용하면 유효성 검사에서 false가 반환될 경우 엔진에서 설정된 메세지가 alert으로 표시됨.\n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "컴포넌트의 displayFormat 속성을 설정한다.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 searchBox 컴포넌트가 정의 된 경우\n<w2:searchbox id=\"searchbox1\" dataType=\"number\" style=\"position: relative;width: 140px;height: 21px;\"><\/w2:searchbox>\n\n//searchBox 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.\nsearchBox.setDisplayFormat(\"#,###.#0\");\n\n//사용자가 1000000 을 입력 할 경우 1,000,000.00 로 표현.\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "컴포넌트의 value를 반환한다.\n\n**Return:**\n\n```String``` - searchbox의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//사용자가 searchBox1 컴포넌트에 \"WebSquare\"를 입력 한 경우\nsearchBox1.getValue();\n//return 예시 ) \"WebSquare\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getDisplayValue": {
          "!type": "fn()",
          "!doc": "현재 보여지는(format이 적용 된) 값을 반환한다.\n\n**Return:**\n\n```String``` - foramt이 적용되어진 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//searchBox1컴포넌트의 dataType이 number이고 displayFormat을 \"#,###\"으로 적용하고 1000000을 입력 한 경우\nvar returnValue = searchBox1.getDisplayValue();\n//return 예시 )\"1,000,000\"\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "컴포넌트의 value를 설정.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 설정하려는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nsearchBox1.setValue(\"WebSquare\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "aliasDataMap": {
        "setScope": {
          "!type": "fn(scope: string)",
          "!doc": "Scope를 동적으로 변경. 즉 현재 참조하는 dataMap을 동적으로 바꾸는 함수. \n\n실행 후, aliasDataMap과 바인딩된 컴포넌트들은 자동으로 값이 초기화됨.\n\n**Parameters:**\n\n```scope``` - ```String:Y``` - 참조할 dataMap 경로\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 참조할 dataMap을 동적으로 변경.\naliasDataMap1.setScope(\"/dataMap1\");\n```\n\n"
        },
        "getObj": {
          "!type": "fn()",
          "!doc": "현재 aliasDataMap이 참조하고 있는 dataMap 객체를 반환.\n\n**Return:**\n\n```Object``` - 현재 Scope로 참조하고 있는 dataMap 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// Scope에 지정된 객체를 반환\nvar parentDataMap = aliasDataMap1.getObj();\n```\n\n"
        }
      },
      "autoComplete": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setDummyData": {
          "!type": "fn(value: string, label: string)",
          "!doc": "임의의 선택 항목 값(value와 label)을 설정. \n\n항목에는 해당 값이 추가되지 않고 selectedIndex는 -1로 설정됨.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 설정하려는 value 값\n\n```label``` - ```String:Y``` - 설정하려는 label 값\n\n**Since:**\n\n2.0_1.3229B.20130731.095639\n\n**Sample:**\n\n```javascript\n// (예시 1) 임의 값을 설정\nautoComplete1.setDummyData(\"0000\",\"WebSquare\"); //\"WebSquare\" 문자열이 보여짐\n\n// (예시 2) 설정한 value 값 꺼내오기\nvar tmpRs = autoComplete1.getValue();\n// (반환 값) \"0000\"\n\n// (예시 3) 선택한 항목의 index 꺼내오기\nvar tmpIdx = autoComplete1.getSelectedIndex();  \n// (반환 값) 항목에서 선택된 값이 아니므로 -1 반환\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getItem": {
          "!type": "fn(index: number)",
          "!doc": "주어진 index에 해당하는 항목의 정보를 담은 객체를 반환.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 항목의 index 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (1) AutoComplete와 위에 정의한 DataList(dc_tmpList) 바인딩\n// (2) label과 value를 함께 표현하기 위해 아래 설정을 적용 \n//     (설정 1) displayMode=\"label delim value\"\n//     (설정 2) delimiter=\"::\"\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    displayMode=\"label delim value\" delimiter=\"::\" submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예제) 1번째 항목 꺼내오기\nvar tmpObj = autoComplete1.getItem(0)\n// (반환 값) \n//  {\n//      \"label\":\"네덜란드::0016\",\n//      \"value\":\"0026\",\n//      \"orgLabel\":\"네덜란드\"\n//  }\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "setDisableEdit": {
          "!type": "fn(onoff: bool)",
          "!doc": "사용자의 마우시 클릭 시, 편집 상태로 들어가지 않고 항목 목록들만 표시. 사용자는 항목을 선택할 수 있음.\n\n**Parameters:**\n\n```onoff``` - ```Boolean:Y``` - 편집 상태\n\n**Since:**\n\n5.0_4.5125B.20240108.154121\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트에 바인딩된 DataList를 반환.(웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setDelimiter": {
          "!type": "fn(delimiter: string)",
          "!doc": "delimiter 속성을 설정한다.\n\n**Parameters:**\n\n```delimiter``` - ```String:Y``` - value와 label을 함께 표시할 때 사용하는 구분자\n\n**Since:**\n\n5.0_4.4780B.20221216.152932\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "initAutoComplete": {
          "!type": "fn()",
          "!doc": "AutoCompelete 컴포넌트에 대해 초기화를 실행. (항목 삭제 및 값을 초기화.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.initAutoComplete();\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "openTable": {
          "!type": "fn()",
          "!doc": "선택 항목 목록을 여는 기능. \n\n선택 항목 목록을 갱신(updateTabe)하고 보여(showTable)주는 작업을 수행. \n\ninteractionMode=true인 경우 xforms-submit-done 이벤트에서 사용해야 하며 submission 또는 submissionFunc가 실행된 후 호출해야 함. \n```javascript\n (관련 속성)\n interactionMode=true\n```\n\n\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisplayMode": {
          "!type": "fn(displayMode: string)",
          "!doc": "displayMode 속성을 설정한다.\n\n**Parameters:**\n\n```displayMode``` - ```String:Y``` - 선택 항목의 표현 방법 (\"value\", \"label\", \"value delim label\", \"label delim value\")\n\n**Since:**\n\n5.0_4.5109B.20231213.165007\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn(isOriginal: bool)",
          "!doc": "선택된 항목의 label 값을 반환.\n\n**Parameters:**\n\n```isOriginal``` - ```Boolean:N``` - [default: false, true] true일 경우 본래의 label 값을 반환.\n\n|property|type|description|\n|:-|:-|:-|\n|\"false\"|(기본 값) 포맷팅이 적용된 값을 반환|null|\n|\"true\"|원래의 값을 반환|null|\n\n**Return:**\n\n```String``` - 현재 선택된 항목의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (1) AutoComplete와 위에 정의한 DataList(dc_tmpList) 바인딩\n// (2) label과 value를 함께 표현하기 위해 아래 설정을 적용 \n//     (설정 1) displayMode=\"label delim value\"\n//     (설정 2) delimiter=\"::\"\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    displayMode=\"label delim value\" delimiter=\"::\" submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n//사용자가 첫번째 항목을 선택한 경우\n// (예제 1) 현재 화면에 표현 된 label을 반환\nvar tmpObj = autoComplete1.getText();\n// (반환 값) \"네덜란드::0016\"\n\n// (예제 2) 원래 label 값을 반환\nvar tmpObj = autoComplete1.getText(true);\n// (반환 값) \"네덜란드\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n autoComplete1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setEnableColumn": {
          "!type": "fn(columnId: string, enableColumnFalseValue: string)",
          "!doc": "enableColumn 속성을 동적으로 설정.\n\nenableColumn 속성으로 설정된 컬럼은 AutoComplete와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음.\n\nenableColumn 속성은 AutoComplete의 선택 항목 목록 중 특정 항목을 disable 시키기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n enableColumn\n enableColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - enableColumn으로 설정할 컬럼의 ID. (disable 시킬 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```enableColumnFalseValue``` - ```String:N``` - 목록을 disable 시키기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// AutoComplete는 DataList와 바인딩되어 있음.\nautoComplete1.setEnableColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 AutoComplete의 선택 목록에 disable 처리되어 표시됨.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 항목의 인덱스를 반환. \n\n선택된 항목이 없는 경우 -1을 반환.\n\n**Return:**\n\n```Number``` - 선택된 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // 사용 예\n autoComplete1.getSelectedIndex();\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "setMaxLength": {
          "!type": "fn(maxlength: number)",
          "!doc": "maxlength를 설정.\n\n**Parameters:**\n\n```maxlength``` - ```Number:Y``` - 설정할 maxlength 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.setMaxLength(7);\nautoComplete1.setMaxLength(\"\"); // maxlength 제한을 해제.\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "changeChooseOption": {
          "!type": "fn(newValue: string, newLabel: string)",
          "!doc": "chooseOption 속성을 변경.\n```javascript\n(관련 속성)\nchooseOption\n```\n\n\n\n**Parameters:**\n\n```newValue``` - ```String:Y``` - 변경할 chooseOption의 value\n\n```newLabel``` - ```String:Y``` - 변경할 chooseOption의 label\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제) value \"0\", label \"선택\"으로 변경\nautoComplete1.changeChooseOption(\"0\",\"선택\");\n```\n\n"
        },
        "setEditMode": {
          "!type": "fn()",
          "!doc": "입력 창에 포커스를 표시.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.setEditMode();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "선택 항목 개수를 반환.\n\n**Return:**\n\n```Number``` - 선택 항목 새수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 총 2개의 선택 항목이 있는 경우\nvar returnValue = checkbox1.getItemCount();\n// (반환 값) 2\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.(웹스퀘어 컴포넌트 공통.)\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = autoComplete1.getNextTabID();\n```\n\n"
        },
        "addItem": {
          "!type": "fn(label: string, value: string, nodest: +Object, index: number)",
          "!doc": "선택 항목을 추가.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 추가할 항목의 label 값\n\n```value``` - ```String:Y``` - 추가할 항목의 value 값\n\n```nodest``` - ```Element:Y``` - 추가할 항목의 nodeset 값\n\n```index``` - ```Number:N``` - 추가할 항목의 index 값\n\n**Return:**\n\n```Boolean``` - addItem 성공 여부. 실패 시 false가 반환됨.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// label: 책제목 , value: isbn이며, 괄호()로 구분\n// (예제)금토일 \"해외여행 (9788959136315)\"을 추가\n//  제목이 \"금토일 해외여행\"이고 isbn이 \"9788959136315\"\n   \nvar returnValue = autoComplete1.addItem(\"금토일 해외여행\",\"9788959136315\");\n// (실행 결과) 선택 항목 목록 마지막에 '금토일 해외여행' 책 제목이 추가됨.\n```\n\n"
        },
        "setGridItemset": {
          "!type": "fn(obj: +Object)",
          "!doc": "바인딩된 gridViewItemset을 변경. \n\n기존에 존재하는 gridViewItemset을 삭제하고 새로 구성.\n\n**Parameters:**\n\n```obj``` - ```JSON||XML:Y``` - 새로 구성할 gridViewItemset에 대한 정보를 담은 객체. (JSON 혹은 XML 객체만 가능.)\n\n|property|type|description|\n|:-|:-|:-|\n|obj.nodeset|<String>|DataList의 id. \"data:\"로 시작해야 함.|\n|obj.label|<String>|label로 지정할 컬럼의 ID.|\n|obj.value|<String>|value로 지정할 컬럼의 ID.|\n|obj.width|<Number>|gridViewItemset의 가로 길이.|\n|obj.height|<Number>|gridViewItemset의 세로 길이.|\n|obj.item|<Array>|각 컬럼의 설정을 담은 JSON 배열.|\n\n**Since:**\n\n5.0_2.3486B.20190213.174135\n\n**Sample:**\n\n```javascript\nvar obj = {\n\"nodeset\" : \"data:dataList2\",\n\"label\" : \"col1\",\n\"value\" : \"col2\",\n\"width\" : 400,\n\"height\" : 300, \n\"item\" : [{\"ref\" : \"col1\", \"header\" : \"label\"},{\"ref\" : \"col2\", \"header\" : \"value\"},{\"ref\" : \"col3\", \"header\" : \"dummy\"}]\n};\nautoComplete1.setGridItemset(obj);\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSearchedItems": {
          "!type": "fn()",
          "!doc": "검색된 모든 항목을 배열로 반환.\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (1) AutoComplete와 위에 정의한 DataList(dc_tmpList) 바인딩\n// (2) label과 value를 함께 표현하기 위해 아래 설정을 적용 \n//     (설정 1) displayMode=\"label delim value\"\n//     (설정 2) delimiter=\"::\"\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    displayMode=\"label delim value\" delimiter=\"::\" submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예제 1) 전체 항목 꺼내기 \nvar tmpRsArr = autoComplete1.getSearchedItems();    \n// (결과) 총 3건 항목이 담긴 배열\n\n// (예제 2) 첫번째 항목 꺼내기\nvar tmpObj = tmpRsArr[0];\n// (결과) \n//  {\n//      \"label\":\"네덜란드::0016\",\n//      \"value\":\"0026\",\n//      \"orgLabel\":\"네덜란드\",\n//      \"index\":0\n//  }\n\n```\n\n"
        },
        "setVisibleColumn": {
          "!type": "fn(columnId: string, visibleColumnFalseValue: string)",
          "!doc": "visibleColumn 속성을 동적으로 설정.\n\nvisibleColumn 속성으로 설정된 컬럼은 AutoComplete와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음.\n\nvisibleColumn 속성은 AutoComplete의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n visibleColumn\n visibleColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```visibleColumnFalseValue``` - ```String:N``` - 목록을 감추기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_2.3747B.20190731.184739\n\n**Sample:**\n\n```javascript\n// AutoComplete는 DataList와 바인딩되어 있음.\nautoComplete1.setVisibleColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 AutoComplete의 선택 목록에 표시되지 않음.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "명시한 스타일을 주어진 값으로 설정.\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정하려는 스타일 명\n\n```value``` - ```String:Y``` - 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예시) width를 변경\ncomponentId.setStyle(\"width\", 100);\n\n// 픽셀 단위를 기본으로 하며, componentId.setStyle(\"width\", \"100px\"); 과 동일.\n// %단위를 사용하려면, componentId.setStyle(\"width\", \"100%\"); 로 명시.\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setItem": {
          "!type": "fn(label: string, value: string, nodest: +Object, index: number)",
          "!doc": "주어진 값으로 선택 항목을 설정\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 설정할 항목의 label 값\n\n```value``` - ```String:Y``` - 설정할 항목의 value 값\n\n```nodest``` - ```Element:Y``` - 설정할 항목의 nodeset 값\n\n```index``` - ```Number:Y``` - 설정할 항목의 index 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n\n단, interactionMode=true인 경우 항상 true를 반환.  \n```javascript\n(유효성 검증 속성)\n mandatory \n(관련 속성)\n interactionMode=true\n```\n\n\n\n**Return:**\n\n```Boolean``` - 검증 결과 (true/false)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// mandatory 속성을 지정.\n<xf:input id=\"autoComplete1\" mandatory=\"true\"><\/xf:input>\n\nvar returnValue = autoComplete1.validate();\n// (반환 값) - false (선택된 값이 없을 경우) \n// (반환 값) - true (선택된 값이 있을 경우)\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setItemSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\n현재 사용자가 선택(입력)된 값은 그대로 유지되고, 선택 항목 목록만 새로 설정됨.\n\ninteractionMode=true인 경우, xforms-submit-done 이벤트에서 사용되어야 함.\n```javascript\n (관련 속성)\n interactionMode=true\n```\n\n\n\n**Parameters:**\n\n```nodeset``` - ```String:N``` - 변경 대상 nodeset\n\n```label``` - ```String:N``` - 선택 항목 목록의 label로 새로 설정할 경로\n\n```value``` - ```String:N``` - 선택 항목 목록의 value로 새로 설정할 경로\n\n**Since:**\n\n2.0_1.2076A.20120604.165715\n\n**Sample:**\n\n```javascript\n// (예제)\n// (1) id가 \"dc_tmpSearchList\"인 DataList 선택 항목(itemSet)과 바인딩.\n// (2) disp 컬럼을 label로 code 컬럼을 value로 설정\n\nautoComplete1.setItemSet(\"data:dc_tmpSearchList\",\"disp\",\"code\");\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "현재 선택된 항목의 value 값을 반환.\n\n**Return:**\n\n```String``` - 선택된 항목의 value 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // (사용 예)\n autoComplete1.getValue();\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "컴포넌트를 화면에서 숨김.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 사용 예\nautoComplete1.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "getSelectedRow": {
          "!type": "fn()",
          "!doc": "선택된 항목의 정보를 담은 객체를 반환.\n\n단, 선택 항목 목록이 gridViewItemset으로 바인딩된 경우, 선택된 행을 반환.\n\n**Since:**\n\n2.0_1.3170B.20130708.184524\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (1) AutoComplete와 위에 정의한 DataList(dc_tmpList) 바인딩\n// (2) label과 value를 함께 표현하기 위해 아래 설정을 적용 \n//     (설정 1) displayMode=\"label delim value\"\n//     (설정 2) delimiter=\"::\"\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    displayMode=\"label delim value\" delimiter=\"::\" submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예시) 사용자가 첫번째 항목을 선택한 경우\nvar tmpObj = autoComplete1.getSelectedRow();\n// (반환 값) \n//  {\n//      \"label\":\"네덜란드\",\n//      \"value\":\"0026\"\n//  }\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트에 정의된 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(유효성 관련 속성)\n mandatory\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n// mandatory 속성을 지정.\n<w2:autoComplete id=\"autoComplete1\" mandatory=\"true\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dataList3\">\n            <w2:label ref=\"label\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예제)\nvar returnObj = autoComplete1.validateObject();\n// (반환 값 - AutoComplete에 값이 없을 경우) returnObj 객체 반환\nreturnObj.callerId = \"autoComplete1\" returnObj.type = \"mandatory\" returnObj.value = \"\"\n// (반환 값 - AutoComplete에 값이 있을 경우) 비어있는 객체가 반환\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "인자로 받은 value에 해당하는 값을 갖는 항목을 선택.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// AutoComplete를 위에 정의한 dataList(dc_tmpList)와 바인딩\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예제) \"대한민국\"을 label로 갖는 항목을 선택\n\nautoComplete1.setValue(\"0022\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\nDataList와 바인딩할 경우 nodeset 파라미터는 data:로 시작해야 함.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - DataList의 ID. \"data:\"로 시작해야 함. (혹은 InstanceData의 XPath)\n\n```label``` - ```String:N``` - label로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 label에 설정할 nodeset 하위의 XPath)\n\n```value``` - ```String:N``` - value로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 value에 설정할 nodeset 하위의 XPath)\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n// DataList 정의.\n\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"lbl\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"code\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <lbl><![CDATA[zero]]><\/lbl>\n            <code><![CDATA[0]]><\/code>\n        <\/w2:row>\n        <w2:row>\n            <lbl><![CDATA[one]]><\/lbl>\n            <code><![CDATA[1]]><\/code>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (예제 1) DataList1과 바인딩하고 label은 lbl 컬럼을, value는 code컬럼을 사용.  \nautoComplete1.setNodeSet('data:dataList1','lbl','code');\n\n// (예제 2) DataList2와 바인딩하고 label 및 value는 예전 컬럼 정보를 사용. \nautoComplete1.setNodeSet('data:dataList2'); \n// (결과) 기존에 할당된 label의 lbl과 value의 code는 그대로 유지되고 dataList만 변경됨.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setText": {
          "!type": "fn(label: string, isOriginal: bool)",
          "!doc": "인자로 받은 label에 해당하는 항목을 선택.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 선택하려는 항목의 label\n\n```isOriginal``` - ```Boolean:N``` - [default: false, true] label을 포맷팅이 적용되지 않은 원래 값으로 찾을 것인지에 대한 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|\"false\"|(기본 값) 포매팅이 적용된 값을 반환.|null|\n|\"true\"|원래 값을 반환.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// DataList 정의\n\n<w2:dataList baseNode=\"list\" id=\"dc_tmpList\">\n    <w2:columnInfo>\n        <w2:column id=\"country\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <country><![CDATA[네덜란드]]><\/country>\n            <value><![CDATA[0016]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[대한민국]]><\/country>\n            <value><![CDATA[0022]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <country><![CDATA[덴마크]]><\/country>\n            <value><![CDATA[0023]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (1) AutoComplete와 위에 정의한 DataList(dc_tmpList) 바인딩\n// (2) label과 value를 함께 표현하기 위해 아래 설정을 적용 \n//     (설정 1) displayMode=\"label delim value\"\n//     (설정 2) delimiter=\"::\"\n\n<w2:autoComplete id=\"autoComplete1\" style=\"position: relative;width:126px;height:21px;margin-right:10px;\"\n    displayMode=\"label delim value\" delimiter=\"::\" submenuSize=\"auto\">\n    <w2:choices>\n        <w2:itemset nodeset=\"data:dc_tmpList\">\n            <w2:label ref=\"country\"><\/w2:label>\n            <w2:value ref=\"value\"><\/w2:value>\n        <\/w2:itemset>\n    <\/w2:choices>\n<\/w2:autoComplete>\n\n// (예시 1) \"대한민국\" label 항목을 선택할 때 - 화면에 표현된 label의 값으로 선택\nautoComplete1.setText(\"대한민국::0022\");\n// (화면 표시) \"대한민국::0022\" \n\n// (예시 2) \"대한민국\" label 항목을 선택 - isOriginal 파라미터를 true로 설정하여 원래 값으로 선택\nautoComplete1.setText(\"대한민국\",true);\n// (화면 표시) \"대한민국::0022\" \n\n// (예시 3) \"대한민국\" label 항목을 선택 - isOriginal 파라미터를 주지 않을 경우\nautoComplete1.setText(\"대한민국\");\n// (화면 표시) 항목이 선택되지 않는다.\n```\n\n"
        }
      },
      "calendar": {
        "gotoLastYear": {
          "!type": "fn()",
          "!doc": "현재 선택된 날짜에서 1년 전으로 이동한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일 인 경우\ncalendar1.gotoLastYear(); \n//display 예시 ) 2010년 1월 1일이 선택된다.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "gotoMonth": {
          "!type": "fn(month: string)",
          "!doc": "month에 해당하는 월로 이동한다.\n\n해당 월이 유효하지 않는 경우, 최초 월(1)로 이동한다.\n\n**Parameters:**\n\n```month``` - ```String||Number:Y``` - 이동하려는 월의 문자 또는 숫자.(\"02\",\"2\",2 모두 1월로 이동)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일 인경우\ncalendar1.gotoMonth(5); // \"05\" , \"5\" , 5 동일 한 결과가 나타난다\n//display 예시 ) 2011년 5월 1일이 선택된다.\n```\n\n"
        },
        "getFormattedValue": {
          "!type": "fn()",
          "!doc": "현재 선택된 날짜를 dateFormat에 적용시켜 문자열로 반환한다.\n\ndateFormat을 적용하지 않은 경우 년월일시초의 순서로 별도의 구분자 없이 return 값이 반환된다. (calendarValueType에 따라 년월일시초의 적용 범위가 다르다)\n\n참고 ) dateFormat은 setDateFormat API로 설정한다.\n\n**Return:**\n\n```String``` - format이 적용 된 선택 된 날짜의 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//별도의 dateFormat을 적용하지 않고 선택 된 날짜가 2002년 04월 15일 인 경우\n\n//calendarValueType=\"yearMonthDate\" 로 정의 된 경우 - 기본달력\nvar tmpRs1 = calendar1.getFormattedValue();\n//return 예시 ) \"20020415\"\n\n//calendarValueType=\"yearMonth\" 로 정의 된 경우\nvar tmpRs2 = calendar1.getFormattedValue();\n//return 예시 ) \"200204\"\n\n\n//아래와 같이 dateFormat을 적용 한 경우(setDateFormat API는 calendarValueType옵션을 고려해서 사용해야 한다. setDateFormat 참조)\ncalendar1.setDateFormat(\"yyyy MM-dd\");\n\n//calendarValueType=\"yearMonthDate\" 로 정의 된 경우 - 기본달력\nvar tmpRs3 = calendar1.getFormattedValue();\n//return 예시 ) \"\"2002 04-15\"\"\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisableBeforeDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "입력 받은 날짜 이전의 날짜들은 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성화 처리 기준 날짜\n\n**Since:**\n\n5.0_4.5107B.20231207.195312\n\n**Sample:**\n\n```javascript\ncalendar.setDisableBeforeDate(\"20170410\");\n//display 예시 ) 2017년 4월 10일 이전 날짜는 비활성화 되어 선택 불가능.\n```\n\n"
        },
        "gotoNextYear": {
          "!type": "fn()",
          "!doc": "현재 선택된 날짜를 1년 뒤로 이동한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일 인 경우\ncalendar1.gotoNextYear(); \n//display 예시 ) 2012년 1월 1일이 선택된다.\n```\n\n"
        },
        "gotoCalendar": {
          "!type": "fn(dateStr: string)",
          "!doc": "dateStr에 해당하는 날짜로 이동한다.\n\ndateStr의 값은 구분자없이 yyyyMMdd 형태이다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 이동할 날짜 (yyyyMMdd 형태)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//2002년 04월 15일로 이동\ncalendar1.gotoCalendar(\"20020415\");\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "setEnabledDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜를 활성화한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 활성화할 날짜\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ncalendar1.setEnabledDate(\"20160627 20180627\"); // 2016년 06월 27일, 2018년 06월 27일에 해당하는 날짜를 활성화 한다.\ncalendar1.setEnabledDate(\"*\"); // setDisabledDate API로 비활성화한 날짜를 제외한 전체 날짜를 활성화한다.\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ncalendar1.getDataListInfo();\n```\n\n"
        },
        "setDisableAfterDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "입력 받은 날짜 이후의 날짜들을 달력에서 선택 불가능하도록 제한.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성화 처리의 기준 날짜.\n\n**Since:**\n\n5.0_4.5107B.20231207.195312\n\n**Sample:**\n\n```javascript\ncalendar.setDisableAfterDate(\"20170410\");\n//display 예시 ) 2017년 4월 10일 이후 날짜는 비활성화되어 선택 불가능.\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setHolidayRef": {
          "!type": "fn(setHolidayRef: string)",
          "!doc": "holidayRef 속성을 설정하는 기능으로 DataCollection과 연동시 data:라는 prefix를 꼭 붙여야한다.\n\n명시하지 않는 경우 InstanceData의 XPath로 인식한다.\n\n**Parameters:**\n\n```setHolidayRef``` - ```String:Y``` - 적용할 setHolidayRef 경로.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//dataList1의 col1과 calendar 컴포넌트의 공휴일 표시하려는 경우\ncalendar.setHolidayRef(\"data:dataList1.col1\");\n\n//InstanceData의 test/holiday와 연동 할 경우.\ncalendar.setHolidayRef(\"test/holiday\");\n```\n\n"
        },
        "gotoNextMonth": {
          "!type": "fn()",
          "!doc": "현재 선택된 날짜를 1달 뒤로 이동한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일 인 경우\ncalendar1.gotoNextMonth();\n//display 예시 ) 2011년 2월 1일이 선택된다.\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "gotoToday": {
          "!type": "fn()",
          "!doc": "현재 날짜로 이동한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//yearMonthDate타입의 달력에서 \"Today\" 또는 \"현재일\" 버튼을 클릭한 것과 동일한 효과.\ncalendar1.gotoToday();\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setCellClass": {
          "!type": "fn(dateStr: string, className: string)",
          "!doc": "특정 날짜에 class를 지정한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - class를 지정할 날짜\n\n```className``` - ```String:Y``` - 지정할 class명\n\n**Since:**\n\n2.0_1.3422B.20130930.162616\n\n**Sample:**\n\n```javascript\n//아래와 같이 style영역에 tmpColor01 class가 정의 된 경우\n<style type=\"text/css\"><![CDATA[\n    .tmpColor01{\n        color:orange;\n    }\n]]><\/style>\n        \ncalendar1.setCellClass(\"20020415\", \"tmpColor01\");\n//display 예시 ) 2002년 04월 15일에 해당하는 날짜의 글자색이 orange로 적용된다.\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setSkin": {
          "!type": "fn(skinName: string)",
          "!doc": "skin을 설정한다.\n\n**Parameters:**\n\n```skinName``` - ```String:Y``` - [class1, class2, class3, class4, class5]사용할 skin명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\ncalendar1.setSkin(\"class2\");\n```\n\n"
        },
        "getSelectedDay": {
          "!type": "fn()",
          "!doc": "현재 선택된 요일을 소문자 영문으로 반환한다.\n\n날짜 선택이 없는 경우 (empty string)을 반환한다.\n\n**Return:**\n\n```String``` - [sunday, monday, tuesday, wednesday, thursday, friday, saturday]영문 요일 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//2011년 1월 1일 토요일이 선택 된 경우\nvar returnValue = calendar1.getSelectedDay();\n//return 예시 ) \"saturday\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getDateFormat": {
          "!type": "fn()",
          "!doc": "[default:yyyyMMdd]설정 된 dateFormat을 반환한다.\n\n**Return:**\n\n```String``` - dateFormat 문자열 (yyyyMMdd, yyyy-MM-dd 등)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//setDateFormat API를 이용하여 dateFormat을 설정하지 않은경우\nvar returnValue = calendar1.getDateFormat();\n//return 예시 ) \"yyyyMMdd\"\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "enableAllDate": {
          "!type": "fn()",
          "!doc": "disableAfterDate 및 disableBeforeDate에 의해 비활성화된 날짜 선택을 가능하도록 활성화.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ncalendar.enableAllDate();\n// (출력 예) 비활성화된 날짜들이 다시 활성화되어 선택 가능.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setHoliday": {
          "!type": "fn(dateStr: string, removeHoliday: bool)",
          "!doc": "특정 날짜에 holiday를 지정한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - holiday를 지정할 날짜\n\n```removeHoliday``` - ```Boolean:N``` - 기존 holiday 삭제 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ncalendar1.setHoliday(\"20160627\"); 또는 전체 연도에 적용시에는\ncalendar1.setHoliday(\"*0815\");로 설정한다. \n//display 예시 ) 2016년 06월 27일에 해당하는 날짜의 글자색이 빨간색으로 적용된다.\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "컴포넌트를 화면에 보이도록 설정합니다.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - display의 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "gotoLastMonth": {
          "!type": "fn()",
          "!doc": "현재 선택된 날짜를 1달 전으로 이동한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일 인 경우\ncalendar1.gotoLastMonth(); \n//display 예시 ) 2010년 12월 1일이 선택된다.\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "removeHoliday": {
          "!type": "fn()",
          "!doc": "holiday 설정을 초기화한다.\n\n**Since:**\n\n5.0_4.4590B.20220210.150718\n\n**Sample:**\n\n```javascript\ncalendar1.removeHoliday(); 또는 전체 연도에 적용시에는\n```\n\n"
        },
        "setDateFormat": {
          "!type": "fn(format: string)",
          "!doc": "dateFormat을 설정하며 format이 적용 된 value는 getFormattedValue API를 이용하여 반환 받을 수 있다. calendarValueType옵션에 따라 format으로 사용할 수 있는 문자열이 다르다.\n\ncalendarValueType옵션이 yearMonthDate인 경우 사용할 수 있는 문자열은 yyyy, MM, dd이고,\n\ncalendarValueType옵션이 yearMonth인 경우 사용할 수 있는 문자열은 yyyy, MM이고,\n\ncalendarValueType옵션이 yearMonthDateTime인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm이고,\n\ncalendarValueType옵션이 yearMonthDateTimeSec인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm, SS입니다.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 적용할 dateFormat.(yyyy-MM-dd와 같은 문자열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//2002년 04월 15일이 선택 되고 아래와 같이 format을 적용 한 경우\ncalendar1.setDateFormat(\"yyyy MM-dd\");\n\n//format 된 value를 반환.\nvar tmpVal1 = calendar1.getFormattedValue();\n//return 예시 ) \"2002 04-15\"\n\n//value를 반환.\nvar tmpVal2 = calendar1.getValue();\n//return 예시 ) \"20020415\"    //format이 적용되어 있지 않다.\n```\n\n"
        },
        "setDisabledDate": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜를 비활성한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - 비활성할 날짜\n\n**Since:**\n\n5.0_4.5138B.20240201.170419\n\n**Sample:**\n\n```javascript\ncalendar1.setDisabledDate(\"20160627 20180627\"); 또는 전체 날짜를 비활성화 할 경우\ncalendar1.setDisabledDate(\"*\");로 설정한다. (단, setEnabledDate API로 활성화한 날짜는 비활성화되지 않는다.)\n```\n\n"
        },
        "gotoYear": {
          "!type": "fn(year: string)",
          "!doc": "year에 해당하는 연도로 이동한다.\n\n해당 년도가 유효하지 않는 경우, 최초년도로 이동한다.\n\n**Parameters:**\n\n```year``` - ```String||Number:Y``` - 이동하려는 연도.(\"2002\", 2002 모두 2002년으로 이동)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//현재 선택된 날짜가 2011년 1월 1일인 경우\ncalendar1.gotoYear(\"2020\"); \n//display 예시 ) 2020년 1월 1일이 선택된다.\n```\n\n"
        },
        "removeCellClass": {
          "!type": "fn(dateStr: string)",
          "!doc": "특정 날짜에 setCellClass한 class를 초기화한다.\n\n**Parameters:**\n\n```dateStr``` - ```String:Y``` - class를 지정할 날짜\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 style영역에 tmpColor01 class가 정의 된 경우\n<style type=\"text/css\"><![CDATA[\n    .tmpColor01{\n        color:orange;\n    }\n]]><\/style>\n        \ncalendar1.setCellClass(\"20020415\", \"tmpColor01\");\ncalendar1.removeCellClass(\"20020415\");\n//display 예시 ) 2002년 04월 15일에 해당하는 날짜의 글자색이 orange를 초기화 한다.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "선택된 날짜값을 구분자 없이 반환한다.\n\n**Return:**\n\n```String``` - 구분자 없는 날짜 문자열.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택된 날짜가 2011년 1월 1일 인 경우\n\n//별도의 설정이 없는 기본 달력 또는 calendarValueType속성이 yearMonthDate인 경우, yyyyMMdd 형태.\nvar returnValue = calendar1.getValue();\n//return 예시 ) \"20110101\" \n\n//calendarValueType속성이 yearMonth인 경우, yyyyMM 형태.\n//return 예시 ) \"201101\"\n\ncalendarValueType속성이 yearMonthDateTime인 경우, yyyyMMddHHmm 형태.\n//return 예시 ) \"201101010000\"\n\ncalendarValueType속성이 yearMonthDateTimeSec인 경우, yyyyMMddHHmmss 형태.\n//return 예시 ) \"20110101000000\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "gotoTime": {
          "!type": "fn(hour: number, minute: number)",
          "!doc": "시간을 선택 할 수 있는 달력에서 hour과 minute에 해당하는 시간으로 이동한다.\n\n해당 시간이 유효하지 않는 경우, 최초 시(0)와 분(0)으로 설정한다.\n\n**Parameters:**\n\n```hour``` - ```Number||String:Y``` - 이동하려는 시간.(\"02\", \"2\", 2 모두 2시로 설정)\n\n```minute``` - ```Number||String:Y``` - 이동하려는 분.(\"05\", \"5\", 5 모두 5분으로 설정)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//시간을 선택 할 수 있는 달력 타입에서만 동작\ncalendar1.gotoTime(\"01\",\"11\");  //\"01\", \"1\", 1 모두 1시로 이동\n//display 예시 ) 1시 11분으로 이동.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "컴포넌트를 화면에서 보이지 않도록 숨깁니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "removeAllCellClass": {
          "!type": "fn()",
          "!doc": "setCellClass한 모든 날짜의 class를 초기화한다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//아래와 같이 style영역에 tmpColor01 class가 정의 된 경우\n<style type=\"text/css\"><![CDATA[\n    .tmpColor01{\n        color:orange;\n    }\n]]><\/style>\ncalendar1.setCellClass( \"20151015\",\"tmpColor01\" );\ncalendar1.setCellClass( \"20150915\",\"tmpColor01\" );\ncalendar1.setCellClass( \"20150815\",\"tmpColor01\" );\ncalendar1.removeAllCellClass();\n// 각 cell에 적용했던 모든 class 삭제됨.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "editor": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "setDomain": {
          "!type": "fn(domain: string)",
          "!doc": "CrossDomain 처리를 위해 Editor에 domain을 셋팅합니다.\n\n**Parameters:**\n\n```domain``` - ```String:N``` - domain 값이 없으면 util.setDomain으로 셋팅된 domain이 셋팅됩니다.\n\n**Since:**\n\n2.0_1.2076A.20120604.165715\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "getInnerText": {
          "!type": "fn()",
          "!doc": "editor의 textarea에서 html태그를 무시하고 text와 개행문자를 포함하여 반환합니다.\n\n**Since:**\n\n2.0_1.4145B.20140609.160813\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setImageLoadURL": {
          "!type": "fn(imageLoadURL: string)",
          "!doc": "imageLoadURL을 셋팅합니다.\n\n**Parameters:**\n\n```imageLoadURL``` - ```String:N``` - imageLoadURL\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn()",
          "!doc": "editor의 textarea에서 html태그를 무시하고 text만 반환합니다.\n\n**Return:**\n\n```String:Y``` - textarea의 text부분\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = editor1.getText();\nreturnValue는 에디터에 입력된 문자열이다.\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getDomain": {
          "!type": "fn()",
          "!doc": "Editor에 세팅된 domain값을 가져옵니다.\n\n**Return:**\n\n```String:Y``` - editor에 설정된 domain값.\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "editor를 readOnly 처리 한다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:N``` - readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//컴포넌트에 disabled 설정\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setHTML": {
          "!type": "fn(html: string)",
          "!doc": "html을 editor에 textarea에 입력합니다.(html태그를 해석하여 입력합니다.)\n\n**Parameters:**\n\n```html``` - ```String:Y``` - editor에 입력하려는 html소스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\neditor1.setHTML('<em><span style=\"font-size:14px;\">editor setHTML(html) API.<\/span><\/em>');\n폰트크기가 14px이고 이탤릭체로 \"editor setHTML(html) API\" 문자열이 표시된다.\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setPlaceholder": {
          "!type": "fn(placeholder: string)",
          "!doc": "CKEditor 내부 editorplaceholder 값 변경\n\n단, 4.17.1이상의 버전에서만 지원.\n\n**Parameters:**\n\n```placeholder``` - ```String:Y``` - placeholder로 지정할 텍스트\n\n**Since:**\n\n5.0_4.4959B.20230724.092429\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getImageLoadURL": {
          "!type": "fn()",
          "!doc": "imageLoadURL을 얻어옵니다.\n\n**Return:**\n\n```String:Y``` - editor에 설정된 imageLoadURL\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "resize": {
          "!type": "fn(editor: number, editor: number)",
          "!doc": "editor의 resize를  적용합니다.\n\n**Parameters:**\n\n```editor``` - ```Number:Y``` - width 값 (단위: px)\n\n```editor``` - ```Number:Y``` - height 값 (단위: px)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getHTML": {
          "!type": "fn()",
          "!doc": "editor의 textarea에서 html태그를 포함하여 모두 반환합니다.\n\n**Return:**\n\n```String:Y``` - textarea에 입력된 html소스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = editor1.getHTML();\nreturnValue는 입력된 문자열의 html 소스이다.\n예) <strong><span style=\"color:#ff0000;\">editor API<br />\n    1. getHTML()<br />\n    2. getText()<\/span><\/strong>\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setText": {
          "!type": "fn(value: string)",
          "!doc": "value를 editor에 textarea에 입력합니다.(html태그를 text로 입력합니다.)\n\n**Parameters:**\n\n```value``` - ```String:Y``` - editor에 입력하려는 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\neditor1.setText(\"editor\\n setText(value) API.\");\neditor\nsetText(value) API.\n위와 같이 에디터에 표시된다.\n```\n\n"
        }
      },
      "floatingLayer": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setHeaderHTML": {
          "!type": "fn(headerHTML: string)",
          "!doc": "headerHTML 값을 동적으로 변경한다. 타이틀 영역을 html string을 직접 넣어서 꾸미기 위한 API이다.\n\n**Parameters:**\n\n```headerHTML``` - ```String:Y``` - 설정할 headerHTML값 또는 변수명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n floatingLayer1.setHeaderHTML(scwin.floatingLayer1_headerHTML);\n scwin.floatingLayer1_headerHTML = \"<span>test<\/span>\";\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "컴포넌트를 화면에 보이도록 설정한다.\n\n엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - [default:block ,inline ,none ,\"\"]display의 속성 값.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//숨겨진 floatingLayer을 보여주고자 할 때\n// default가 block이므로 \"block\"과 동일.\nfloatinglayer1.show();      \n\n//class에 적용된 diplay속성 값을 복구\nfloatinglayer1.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, heigth: number)",
          "!doc": "컴포넌트의 크기를 설정합니다.\n\n**Parameters:**\n\n```width``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 width값\n\n```heigth``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 height값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// width : 300, height : 200 으로 설정할 때\nfloatingLayer1.setSize(300,200);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "setUseCloseButton": {
          "!type": "fn(useCloseButton: bool)",
          "!doc": "useCloseButton 동적 변경\n\n**Parameters:**\n\n```useCloseButton``` - ```Boolean:Y``` - 닫기 버튼 사용 여부\n\n**Since:**\n\n5.0_4.5100B.20231129.144519\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "헤더의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n floatingLayer1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "컴포넌트를 화면에서 보이지 않도록 숨긴다.\n\n엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//floatingLayer를 숨기고자 할 때\nfloatinglayer1.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "scrollView": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "scrollBy": {
          "!type": "fn(xnum: number, ynum: number)",
          "!doc": "scrollView의 스크롤 위치를 입력 받은 수치만큼 증가시킴.\n\n**Parameters:**\n\n```xnum``` - ```Number:N``` - 스크롤의 가로 변량\n\n```ynum``` - ```Number:N``` - 스크롤의 세로 변량\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 가로 스크롤 값을 100 증가.\nscrollView1.scrollBy(100, 0);\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "getScrollTop": {
          "!type": "fn()",
          "!doc": "scrollView의 scrollTop 값을 반환.\n\n**Return:**\n\n```Number``` - scrollTop 값에 해당하는 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "resetScrollBottom": {
          "!type": "fn()",
          "!doc": "1회성 이벤트인 onscrollbottom 이벤트가 다시 발생할 수 있도록 설정.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// (예제)\nscrollView1.resetScrollBottom();\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getScrollLeft": {
          "!type": "fn()",
          "!doc": "scrollView의 scrollLeft 값을 반환.\n\n**Return:**\n\n```Number``` - scrollLeft 값에 해당하는 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "scrollTo": {
          "!type": "fn(scrollLeft: number, scrollTop: number)",
          "!doc": "scrollView의 스크롤 위치를 조정.\n\n**Parameters:**\n\n```scrollLeft``` - ```Number:N``` - 스크롤의 가로 위치. 바꾸지 않고 싶다면 null을 입력\n\n```scrollTop``` - ```Number:N``` - 스크롤의 세로 위치. 바꾸지 않고 싶다면 null을 입력\n\n**Since:**\n\n2.0_1.2169A.20120711.143551\n\n**Sample:**\n\n```javascript\n// 세로 스크롤 값을 0으로 변경.\nscrollView1.scrollTo(null, 0);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "trigger": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getLabel": {
          "!type": "fn()",
          "!doc": "label을 반환. getValue와 동일한 기능을 제공.\n\n**Return:**\n\n```String``` - label값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 trigger1의 label의 값을 click으로 정의한 경우\n<xf:trigger type=\"button\" id=\"trigger1\" style=\"position:relative;width:80px;height:23px;\">\n    <xf:label><![CDATA[click]]><\/xf:label>\n<\/xf:trigger>\n\nvar returnValue = trigger1.getLabel();\n//return 예시 ) \"click\"\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "setBackgroundImage": {
          "!type": "fn(imgUrl: string)",
          "!doc": "type=button인 경우 배경 이미지를 설정.\n\n해당값은 CSS의 background-image 속성값으로 설정됨.\n\n**Parameters:**\n\n```imgUrl``` - ```String:Y``` - 이미지 URL\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 설정 예제\n trigger1.setBackgroundImage('/img/btn_book1.jpg');\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n trigger1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "표시되어 있는 label을 반환. getLabel과 동일한 기능을 제공.\n\n**Return:**\n\n```String``` - label값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 trigger1의 label의 값을 click으로 정의한 경우\n<xf:trigger type=\"button\" id=\"trigger1\" style=\"position:relative;width:80px;height:23px;\">\n    <xf:label><![CDATA[click]]><\/xf:label>\n<\/xf:trigger>\n\nvar returnValue = trigger1.getValue();\n// (반환 예) \"click\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getType": {
          "!type": "fn()",
          "!doc": "컴포넌트의 현재 설정된 Type을 반환.\n\n**Return:**\n\n```String``` - 현재 설정되어 있는 type 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// type=\"button\"인 경우 아래를 실행 하면 button이 반환됨.\n trigger1.getType();\n// type=\"image\"인 경우 아래를 실행하면 image가 반환됨. \n trigger1.getType();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(lable: string)",
          "!doc": "value 값을 변경. setLabel와 동일한 기능을 제공.\n\n**Parameters:**\n\n```lable``` - ```String:Y``` - 출력 할 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ntrigger1.setValue('search');\n// (출력 예) \"search\"가 Trigger에 표시됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabel": {
          "!type": "fn(lable: string)",
          "!doc": "label 값을 변경한다. setValue와 동일한 기능을 제공.\n\n**Parameters:**\n\n```lable``` - ```String:Y``` - 출력 할 text\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ntrigger1.setLabel('search');\n// (출력 예) trigger의 표시되는 텍스트는 search이다.\n```\n\n"
        },
        "getBackgroundImage": {
          "!type": "fn()",
          "!doc": "type=button인 경우 CSS로 정의된 background-image 속성값을 반환.\n\n**Return:**\n\n```String``` - 현재 CSS에 설정된 background-image 속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 trigger1의 style에 background-image를 정의한 경우\n<xf:trigger type=\"button\" id=\"trigger1\"\n    style=\"position:relative;width:80px;height:23px;background-image: url(/img/book1.jpg);\">\n    <xf:label><![CDATA[click]]><\/xf:label>\n<\/xf:trigger>\n\nvar returnValue = trigger1.getBackgroundImage();  \n// (반환 예) \"url(http://localhost:9999/img/book1.jpg)\"\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "treeview": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "removeNodeList": {
          "!type": "fn(nodeList: +Object)",
          "!doc": "노드 객체를 기반으로 다건의 노드(자식노드 포함)를 삭제한다. \n\n삭제 후 컴포넌트를 다시 그리며 removeNode함수를 여러 번 호출하는 것보다 처리속도가 빠른다.\n\n**Parameters:**\n\n```nodeList``` - ```Array:Y``` - 노드가 담긴 1차원 배열\n\n**Since:**\n\n2.0_1.3332B.20130827.141857\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "isLeaf": {
          "!type": "fn()",
          "!doc": "선택된 노드가 leaf인지(자식노드가 없는지)의 여부를 반환한다.\n\n**Return:**\n\n```boolean``` - [true,false]leaf인지의 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "appendData": {
          "!type": "fn(index: number, xmlArray: +Object)",
          "!doc": "index에 해당하는 노드 하위에 사용자 데이터를 기반으로 노드를 추가한다.\n\ndynamicAppend속성이 true로 설정되야한다.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 노드의 index\n\n```xmlArray``` - ```Array:Y``` - 추가할 노드의 XML 데이터가 담긴 1차원 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//구현 샘플 : DataLiat를 정의하고 TreeView와 연동한 다음 appendData API를 이용하여 \"즐겨찾기\"노드의 하위에 XML 데이터를 기반으로 노드를 추가한다.\n\n//1. DataList 정의.\n<w2:dataList id=\"dc_favMenu\" baseNode=\"list\" style=\"\" repeatNode=\"data\"\n    valueAttribute=\"\">\n    <w2:columnInfo>\n        <w2:column id=\"depth\" name=\"depth\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"chk\" name=\"체크박스\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[즐겨찾기]]><\/label>\n            <value><![CDATA[menu00]]><\/value>\n            <chk><![CDATA[f]]><\/chk>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n//2. TreeView 정의 (소스의 길이가 길어져서 필요 없는 속성 및 항목은 삭제함.)\n<w2:treeview dataType=\"listed\" id=\"treeview1\" refreshCheckboxModel=\"true\" showCheckbox=\"true\"\n    dynamicAppend=\"true\" trueValue=\"t\" falseValue=\"f\"\n    style=\"position: relative;width: 200px;height: 400px;float:left;margin-right:10px;border:1px solid pink;\">\n    <w2:itemset nodeset=\"data:dc_favMenu\">\n        <w2:label ref=\"label\"><\/w2:label>\n        <w2:value ref=\"value\"><\/w2:value>\n        <w2:depth ref=\"depth\"><\/w2:depth>\n        <w2:checkbox ref=\"chk\"><\/w2:checkbox>\n    <\/w2:itemset>\n<\/w2:treeview>\n\n//3.appendData API로 노드 추가하기\n\n//3.1 XML 문자열 정의- XML데이터는 DataList에 정의 된 Data구를 참조하여 생성한다.\nvar tmpStr = \"<list>\";\ntmpStr += \"<data><depth>2<\/depth><label>메뉴1-1<\/label><value>menu1-1<\/value><chk>f<\/chk><\/data>\";\ntmpStr += \"<data><depth>2<\/depth><label>메뉴1-2<\/label><value>menu1-2<\/value><chk>f<\/chk><\/data>\";\ntmpStr += \"<\/list>\";\n\n//3.2 XML 생성\nvar tmpDoc = WebSquare.xml.parse(tmpStr);\n\n//3.3 appendData에 사용할 파라메터 (XML Array) 생성\nvar tmpDocArr = WebSquare.xml.findNodes(tmpDoc,\"list/data\");\n\n//3.4 TreeView의 첫번째 노드에 추가.\ntreeview1.appendData(1,tmpDocArr);\n\n//appendData 호출 이전의 Display 예시 )\n - 즐겨찾기\n\n//appendData 호출 후 Display 예시 )\n -[-] 즐겨찾기\n - └─ 메뉴1-1\n - └─ 메뉴2-1\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "findNodeByValue": {
          "!type": "fn(value: string, select: bool)",
          "!doc": "value를 기반으로 노드를 찾아서 해당 노드를 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.\n\n반환 된 노드는 appendData, appendNode등의 API의 파라메터로 사용할 수 있다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 찾을 node의 value\n\n```select``` - ```boolean:N``` - [default:true, false]노드를 선택 할지의 여부\n\n**Return:**\n\n```Node``` - 검색된 Node\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n treeview에서 clothes, bags, shoes의 value는 1,2,3 이고 outer, bottom, dress의 value는 1-1, 1-2, 1-3인 경우,\n     clothes 라벨이 선택되어 있는 예.\n     -[-] clothes\n     - │ [+] outer\n     - │ [+] bottom\n     - │  └─ dress\n     -[+] bags\n     - └─ shoes\n\n var node = treeview1.findNodeByValue(\"1-2\");\n bottom 라벨의 Node를 얻을 수 있다.\n var node = treeview1.findNodeByValue(\"1-2\", true);\n 위와 같이 두번째 인자에 true를 주면, bottom 라벨의 Node를 선택함과 동시에 해당 Node를 얻을 수 있다.\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 사용 예\ntreeview1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "expandNode": {
          "!type": "fn(value: string, hierarchy: bool)",
          "!doc": "value 또는 index를 기반으로 찾은 노드(항목)를 확장한다. index는 1부터 시작한다.\n\n**Parameters:**\n\n```value``` - ```String||Number:Y``` - value 대상 노드의 value 또는 index (index는 1부터 시작한다.)\n\n```hierarchy``` - ```Boolean:N``` - 자식 노드까지 적용할지의 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 노드를 찾아 해당 노드만 확장한다.\ntreeview1.expandNode( 1 , true);\n\n//value가 \"menu1-2\"인 노드를 찾아 해당 노드만 확장한다.\ntreeview1.expandNode(\"menu1-2\");\n\n//value가 \"menu1-2\"인 노드를 찾아 해당 노드와 하위 노드를 확장한다.\ntreeview1.expandNode(\"menu1-2\" , true);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "getCheckedIndexes": {
          "!type": "fn(options: +Object)",
          "!doc": "checkbox가 체크된 노드들의 index(초기 로딩시 설정)를 배열에 담아 반환한다.\n\n로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.\n\n**Parameters:**\n\n```options``` - ```JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy:``` - hierarchy를 포함한 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.hierarchy|<Boolean>|hierarchy속성 사용 시 반투명 체크된 노드를 포함할지에 대한 여부|\n|options.excludeRoot|<Boolean>|루트노드를 제외할지에 대한 여부|\n\n**Return:**\n\n```Array``` - 체크된 노드들의 index가 담긴 배열\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\n//1번째와 3번째 노드의 checkbox가 check된 경우\nvar tmpRs = treeview1.getCheckedIndexes();\n//return 예시 )[1, 3]\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "setNodeClass": {
          "!type": "fn(index: number, cssName: string, applyChildNodes: bool)",
          "!doc": "해당 node에 className을 적용합니다. \n\n기존에 className이 적용된 경우 해당 className을 제거하고 새 className을 적용합니다.\n\n여러 class를 적용하는 경우 각 css name 에 구분자를 공백을 사용하여 지정합니다.\n\n**Parameters:**\n\n```index``` - ```Number||String:Y``` - 노드의 index 또는 value\n\n```cssName``` - ```String:Y``` - 적용할 class 명. 여러 css를 적용하려면 구분자로 공백을 사용합니다.\n\n```applyChildNodes``` - ```Boolean:N``` - [default:false, true]하위노드 적용 여부\n\n**Since:**\n\n5.0_5.5154B.20240227.143348\n\n**Sample:**\n\n```javascript\n//value가 \"menu1-1\"인 노드 및 하위 노드에 \"searched\" 및 \"custom\" 두 개의 css를 적용하고자 하는 경우\ntreeview1.setNodeClass(\"menu1-1\", \"searched custom\", true);\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "checkByIndex": {
          "!type": "fn(value: string, checkValue: bool, childCheck: bool)",
          "!doc": "index를 기반으로 노드(항목)을 찾아 checkbox의 value를 설정한다.\n\ntrueValue, falseValue 속성의 값을 참조하여 check되며 해당 속성이 정의되지 않은 경우 각 true, false로 제어 가능하다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 대상 노드의 index\n\n```checkValue``` - ```Boolean||String:Y``` - checkbox의 value ( trueValue와 falseValue 속성이 정의되지 않은 경우 true, false로 제어가능하다 )\n\n```childCheck``` - ```Boolean:N``` - 선택한 노드의 자녀 노드의 checkbox check여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//index가 1인 노드의 checkbox만 check한다.\ntreeview1.checkByIndex( 1 , true);\n\n//index가 1인 노드와 하위 노드의 checkbox에 모두 check한다.\ntreeview1.checkByIndex( 1 , true, true);\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setCustomFormatter": {
          "!type": "fn(userFunction: +Object)",
          "!doc": "사용자가 지정한 함수를 treeview의 node를 돌면서 각각 한번씩 호출합니다.\n\n**Parameters:**\n\n```userFunction``` - ```Function:Y``` - 초기에 세팅된 label값, formattedLabel, node를 각각 인자로 받아 formattedLabel 반환하는 사용자 함수\n\n**Since:**\n\n2.0_1.3086B.20130607.174758\n\n**Sample:**\n\n```javascript\n treeview에서 number, 1, 5, date, 20130530, 05302013, test, test0의 value는 \"n0,n1,n2,d0,d1,d2,t0,t1\" 이라고 할 때,\n     -[-] number \n     - │ [+] 1\n     - │ [+] 5  \n     -[-] date \n     - └─ [+] 20130530\n     - └─ [+] 05302013\n     -[-] test\n     - └─ [+] test0\n     -[-] dummy\n\n number의 하위 노드는 빨간색, date의 하위 노드는 노란색, test의 하위 노드는 회색, 그 외는 녹색으로 스타일을 변경하고자 할 때는 아래와 같이 하면 된다.\n var myCustomFormatter = function(orgLabel, formattedLabel, node){ \n    if(node.value.indexOf(\"n\") >=0) { this.setLabelStyle(node.index, 'color', 'red', false);}\n    else if(node.value.indexOf(\"d\") >= 0) { this.setLabelStyle(node.index, 'color', 'yellow', false);}\n    else if(node.value.indexOf(\"t\") >= 0) { this.setLabelStyle(node.index, 'color', 'gray', false);}\n    else { this.setLabelStyle(node.index, 'color', 'green', false);}\n    return formattedLabel;\n  }\n treeview1.setCustomFormatter(myCustomFormatter);\n```\n\n"
        },
        "isOpen": {
          "!type": "fn(index: string)",
          "!doc": "초기에 각 노드에 설정된 index를 기반으로 해당 index에 상응하는 노드가 열려있는지 닫혀있는지 여부를 반환한다.\n\n자식 노드들이 보여져 있는 상태면 true를, 자식 노드들이 숨겨져 있는 상태면 false를 각각 리턴한다. 자식이 없는 노드의 경우 false를 리턴한다.\n\n**Parameters:**\n\n```index``` - ```String:Y``` - 초기 로딩 시 할당 된 노드의 index\n\n**Return:**\n\n```Node``` - index에 해당하는 Node의 open 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//로딩 후 노드의 이동이 없고 첫번째 노드를 선택 할 경우\n var node1 = treeview1.isOpen(1);\n index가 1인 Node의 open 여부를 얻을 수 있다.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "deselectNode": {
          "!type": "fn()",
          "!doc": "선택된 노드를 해제한다\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 노드의 index(초기 로딩시 설정 된 값)를 반환한다.\n\n로딩 후 노드의 순서가 변경되면 보여지는 노드의 순서와 index가 다를 수 있다.\n\n**Return:**\n\n```String``` - 선택된 노드의 index(초기 로딩시 설정 된 값)\n\n**Since:**\n\n2.0_1.2169A.20120711.143551\n\n**Sample:**\n\n```javascript\n//최상위 노드가 선택된 경우\nvar tmpRs = treeview1.getSelectedIndex();\nreturn 예시 ) 1\n\n//선택된 노드가 없는 경우\nvar tmpRs1 = treeview1.getSelectedIndex();\nreturn 예시 ) \"\"\n```\n\n"
        },
        "getCheckedLabels": {
          "!type": "fn(options: +Object)",
          "!doc": "checkbox가 체크된 노드들의 label을 배열에 담아 반환한다.\n\n**Parameters:**\n\n```options``` - ```JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy:``` - hierarchy를 포함한 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.hierarchy|<Boolean>|hierarchy속성 사용 시 반투명 체크된 노드를 포함할지에 대한 여부|\n|options.excludeRoot|<Boolean>|루트노드를 제외할지에 대한 여부|\n\n**Return:**\n\n```Array``` - 체크된 노드들의 label가 담긴 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//1번째와 3번째 노드의 checkbox가 check되어 있고 각 노드의 label이 \"Menu1\", \"Menu1-2\"일 경우.\nvar tmpRs = treeview1.getCheckedLabels();\n//return 예시 ) [\"Menu1\", \"Menu1-2\"]\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "appendNode": {
          "!type": "fn(parentNode: +Object, childNode: +Object)",
          "!doc": "TreeView에서 반환하는 Node를 기반으로 parentNode 하위에 childNode를 추가한다.\n\ndynamicAppend속성이 true로 설정되야하며 일반적으로 TreeView끼리의 노드 추가 시에 사용되며 TreeView의 이벤트 또는 API로 Node를 반환 받아 파라메터로 사용한다.\n\n**Parameters:**\n\n```parentNode``` - ```Object:Y``` - 기준 Node\n\n```childNode``` - ```Object:Y``` - 추가할 Node\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//샘플 예제 - 왼쪽 TreeView(treeview1)에서 항목(노드)을 Drag하여 오른쪽 TreeView(treeview2)의 항목(노드) 위에서 Drop하여 항목(노드)을 이동시킨다.\n\n//1. DataList와 임시 데이터 정의 - 왼쪽 트리뷰 : dc_menu , 오른쪽 트리뷰 - dc_favMenu \n<w2:dataList id=\"dc_menu\" baseNode=\"list\" repeatNode=\"data\">\n    <w2:columnInfo>\n        <w2:column id=\"depth\" name=\"depth\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[메뉴1]]><\/label>\n            <value><![CDATA[menu1]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[2]]><\/depth>\n            <label><![CDATA[메뉴1-1]]><\/label>\n            <value><![CDATA[menu1-1]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[2]]><\/depth>\n            <label><![CDATA[메뉴1-2]]><\/label>\n            <value><![CDATA[menu1-2]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[3]]><\/depth>\n            <label><![CDATA[메뉴1-2-1]]><\/label>\n            <value><![CDATA[menu1-2-1]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[2]]><\/depth>\n            <label><![CDATA[메뉴1-3]]><\/label>\n            <value><![CDATA[menu1-3]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[메뉴2]]><\/label>\n            <value><![CDATA[menu2]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n<w2:dataList id=\"dc_favMenu\" baseNode=\"list\" repeatNode=\"data\">\n    <w2:columnInfo>\n        <w2:column id=\"depth\" name=\"depth\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[즐겨찾기]]><\/label>\n            <value><![CDATA[menu00]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n//2. TreeView 정의\n//2.1 메뉴가 담길 왼쪽 TreeView로 Drag를 사용해야 함으로 userDrag 속성을 true로 설정\n<w2:treeview dataType=\"listed\" id=\"treeview1\" useDrag=\"true\"\n    style=\"position: relative;width: 200px;height: 400px;float:left;margin-right:10px;border:1px solid orange;\">\n    <w2:itemset nodeset=\"data:dc_menu\">\n        <w2:label ref=\"label\"><\/w2:label>\n        <w2:value ref=\"value\"><\/w2:value>\n        <w2:depth ref=\"depth\"><\/w2:depth>\n        <w2:folder ref=\"\"><\/w2:folder>\n        <w2:checkbox ref=\"\"><\/w2:checkbox>\n        <w2:checkboxDisabled ref=\"\"><\/w2:checkboxDisabled>\n        <w2:image ref=\"\"><\/w2:image>\n        <w2:iconImage ref=\"\"><\/w2:iconImage>\n        <w2:selectedImage ref=\"\"><\/w2:selectedImage>\n        <w2:expandedImage ref=\"\"><\/w2:expandedImage>\n        <w2:leafImage ref=\"\"><\/w2:leafImage>\n    <\/w2:itemset>\n<\/w2:treeview>\n\n//2.2 메뉴가 추가 될 오른쪽 TreeView로 동적으로 노드를 추가해야하므로 dynamicAppend속성을 true로 설정.\n//2.3 항목(노드)위에서 Drop시 해당 항목 하위로 노드를 추가해야하므로 ondrop 이벤트 설정.\n<w2:treeview dataType=\"listed\" id=\"treeview2\" dynamicAppend=\"true\"\n    style=\"position: relative;width: 200px;height: 400px;float:left;margin-right:10px;border:1px solid pink;\">\n    <w2:itemset nodeset=\"data:dc_favMenu\">\n        <w2:label ref=\"label\"><\/w2:label>\n        <w2:value ref=\"value\"><\/w2:value>\n        <w2:depth ref=\"depth\"><\/w2:depth>\n        <w2:folder ref=\"\"><\/w2:folder>\n        <w2:checkbox ref=\"\"><\/w2:checkbox>\n        <w2:checkboxDisabled ref=\"\"><\/w2:checkboxDisabled>\n        <w2:image ref=\"\"><\/w2:image>\n        <w2:iconImage ref=\"\"><\/w2:iconImage>\n        <w2:selectedImage ref=\"\"><\/w2:selectedImage>\n        <w2:expandedImage ref=\"\"><\/w2:expandedImage>\n        <w2:leafImage ref=\"\"><\/w2:leafImage>\n    <\/w2:itemset>\n    <script ev:event=\"ondrop(dragNode,dropNode,dragControl,dropControl,e)\" type=\"javascript\"><![CDATA[\n        //이벤트에서 넘어오는 dropNode와 dragNode를 이용하여 현재 컴포넌트에 노드 추가\n        //dropNode : drop 이벤트가 일어난 노드, dragNode : drag 되어 넘어온 노드\n        this.appendNode(dropNode,dragNode);\n\n        //drag되어 넘어 온 노드를 drag된 컴포넌트에서 삭제\n        //dragNode : drag 된 노드, dragControl : drag가 일어난 컴포넌트로 treeview1 이다.\n        dragControl.removeNode( dragNode );\n    ]]><\/script>\n<\/w2:treeview>\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "appendXmlNodes": {
          "!type": "fn(parentNode: +Object, xmlArray: +Object)",
          "!doc": "TreeView에서 반환하는 Node(parentNode)의 하위에 XML 데이터를 기반으로 노드를 추가한다.\n\ndynamicAppend속성이 true로 설정되야한다.\n\n**Parameters:**\n\n```parentNode``` - ```Object:Y``` - 기준 Node\n\n```xmlArray``` - ```Array:Y``` - 추가할 노드의 XML 데이터가 담긴 1차원 배열\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//사용자가 선택한 TreeView의 항목(노드)에 XML 데이터를 기반으로 항목(노드)를 추가하기\n\n//1. DataList 정의\n<w2:dataList id=\"dc_favMenu\" baseNode=\"list\" repeatNode=\"data\"\n    valueAttribute=\"\">\n    <w2:columnInfo>\n        <w2:column id=\"depth\" name=\"depth\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[즐겨찾기]]><\/label>\n            <value><![CDATA[menu00]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n//2. TreeView 정의 - 소스의 길이가 길어져서 필요 없는 속성 및 항목은 삭제함.\n//동적 노드(항목) 추가를 위해 dynamicAppend속성을 true로 설정.\n<w2:treeview dataType=\"listed\" id=\"treeview1\" dynamicAppend=\"true\"\n    style=\"position: relative;width: 200px;height: 400px;float:left;margin-right:10px;border:1px solid pink;\">\n    <w2:itemset nodeset=\"data:dc_favMenu\">\n        <w2:label ref=\"label\"><\/w2:label>\n        <w2:value ref=\"value\"><\/w2:value>\n        <w2:depth ref=\"depth\"><\/w2:depth>\n    <\/w2:itemset>\n<\/w2:treeview>\n\n//3. Script 영역에서 TreeView에 선택 된 노드 하위로 appendXmlNodes API를 호출하여 노드(항목)추가하기\n//3.1 TreeView에서 선택 된 노드 얻기\nvar tmpPNode = treeview1.getSelectedNode();\n\n//3.2 선택 된 노드가 없는 경우 alert. \nif(!tmpPNode){\n    alert(\"TreeView의 항목(노드)를 선택하세요\");\n    return;\n}\n\n//3.3 추가할 XML 문자열 생성\nvar tmpStr = \"<list>\";\ntmpStr += \"<data><depth>2<\/depth><label>메뉴1-1<\/label><value>menu1-1<\/value><chk>f<\/chk><\/data>\";\ntmpStr += \"<data><depth>2<\/depth><label>메뉴1-2<\/label><value>menu1-2<\/value><chk>f<\/chk><\/data>\";\ntmpStr += \"<\/list>\";\n\n//3.4 XML 생성\nvar tmpDoc = WebSquare.xml.parse(tmpStr);\n\n//3.5 appendXmlNodes에 사용할 파라메터 (XML Array) 생성\nvar tmpDocArr = WebSquare.xml.findNodes(tmpDoc,\"list/data\"); \n\n//3.6 선택 된 노드에 추가.\ntreeview1.appendXmlNodes( tmpPNode , tmpDocArr );\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "getSelectedValue": {
          "!type": "fn()",
          "!doc": "선택된 노드의 value를 반환한다.\n\n선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.\n\n**Return:**\n\n```String``` - 선택된 노드의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택된 노드가 없는 경우\nvar tmpRs = treeview1.getSelectedValue();\n//return 예시 ) \"\"\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setShowCheckBox": {
          "!type": "fn()",
          "!doc": "showCheckbox 값을 동적으로 설정\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getCheckedNodes": {
          "!type": "fn(options: +Object)",
          "!doc": "checkbox가 체크된 노드들을 배열에 담아 반환한다.\n\n로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.\n\nrenderType가virtual이라면 {label:depth1,value:1,depth:1,rowStatus:R}과 같은 노드가 담긴 배열이 반환된다.\n\n**Parameters:**\n\n```options``` - ```JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy:``` - hierarchy를 포함한 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.hierarchy|<Boolean>|hierarchy속성 사용 시 반투명 체크된 노드를 포함할지에 대한 여부|\n|options.excludeRoot|<Boolean>|루트노드를 제외할지에 대한 여부|\n\n**Return:**\n\n```Array``` - 체크된 노드들이 담긴 배열\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//1번째와 3번째 노드의 checkbox가 check된 경우\nvar tmpRs = treeview1.getCheckedNodes();\n//return 예시 )1번째와 3번째 노드가 담긴 배열\n```\n\n"
        },
        "notifyDataChanged": {
          "!type": "fn()",
          "!doc": "treeview와 dataList를 전체적으로 동기화한다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setLabelByIndex": {
          "!type": "fn(index: number, label: string)",
          "!doc": "노드의 index를 기반으로 label을 변경한다.\n\nindex값은 초기 로딩 시 설정 된 노드의 index로 1부터 시작한다.\n\n**Parameters:**\n\n```index``` - ```Number:Y``` - 노드의 index\n\n```label``` - ```String:Y``` - 새로 설정할 label의 값\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\n//노드의 위치가 변경되지 않은 최상위 노드의 label을 변경하고자 할 때\ntreeview1.setLabelByIndex(1,\"즐겨찾기\");\n```\n\n"
        },
        "getLastChildIndex": {
          "!type": "fn(srcIndex: number)",
          "!doc": "srcIndex에 해당하는 노드의 최종자식노드(자식의 자식을 중첩 탐색)의 index를 반환한다.\n\n**Parameters:**\n\n```srcIndex``` - ```Number:Y``` - 대상 노드의 index\n\n**Return:**\n\n```Number``` - 최종자식노드의 index값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "checkByValue": {
          "!type": "fn(value: string, checkValue: bool, childCheck: bool)",
          "!doc": "value를 기반으로 노드(항목)을 찾아 checkbox의 value를 설정한다.\n\ntrueValue, falseValue 속성의 값을 참조하여 check되며 해당 속성이 정의되지 않은 경우 각 true, false로 제어 가능하다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 대상 노드의 value\n\n```checkValue``` - ```Boolean||String:Y``` - checkbox의 value ( trueValue와 falseValue 속성이 정의되지 않은 경우 true, false로 제어가능하다 )\n\n```childCheck``` - ```Boolean:N``` - 선택한 노드의 자녀 노드의 checkbox check여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//\"menu1-2\" value를 가진 노드의 checkbox만 check한다.\ntreeview1.checkByValue( \"menu1-2\" , true); \n\n//\"menu1-2\" value를 가진 노드와 하위 노드의 checkbox에 모두 check한다.\ntreeview1.checkByValue( \"menu1-2\" , true, true);\n```\n\n"
        },
        "findNodeByIndex": {
          "!type": "fn(index: string, select: bool)",
          "!doc": "초기에 각 노드에 설정된 index를 기반으로 노드 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.\n\nindex는 1부터 시작하며 depth-first search 방식으로 index가 순차적으로 부여된다. 데이터 추가 또는 삭제에 의해 노드 구조가 변경될 경우 index 정보가 DFS 순으로 다시 갱신된다.\n\n**Parameters:**\n\n```index``` - ```String:Y``` - 초기 로딩 시 할당 된 노드의 index\n\n```select``` - ```boolean:N``` - [default:true, false]노드를 선택 할지의 여부\n\n**Return:**\n\n```Node``` - 검색된 Node\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//로딩 후 노드의 이동이 없고 첫번째 노드를 선택 할 경우\n var node1 = treeview1.findNodeByIndex(1);\n index가 1인 Node를 얻을 수 있다.\n var node1 = treeview1.findNodeByIndex(1, true);\n 위와 같이 두번째 인자에 true를 주면, index가 1인 Node를 선택함과 동시에 해당 Node를 얻을 수 있다.\n```\n\n"
        },
        "removeNode": {
          "!type": "fn(node: +Object)",
          "!doc": "노드 객체를 기반으로 노드(자식노드 포함)를 삭제한다.\n\n**Parameters:**\n\n```node``` - ```Object:Y``` - 노드 객체\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//선택된 노드를 삭제할 경우\nvar tmpObj = treeview1.getSelectedNode();\ntreeview1.removeNode(tmpObj);\n\n//노드의 value가 \"m1-1\"인 노드를 삭제할 경우\nvar tmpObj1 = treeview1.findNodeByValue(\"m1-1\");\ntreeview1.removeNode(tmpObj1);\n```\n\n"
        },
        "getParentValue": {
          "!type": "fn(value: string)",
          "!doc": "노드의 value를 기반으로 부모 노드를 찾아 value를 반환한다.\n\nvalue로 검색 된 노드가 최상위 노드이거나 검색된 노드가 없을 경우 빈값(emptyString)을 반환한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 노드의 value\n\n**Return:**\n\n```String``` - 부모 노드의 vlaue\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//최상위 노드의 value가 \"m1\"일 경우\nvar tmpRs = treeview1.getParentValue(\"menu1\");\nreturn 예시 ) \"\"\n\n//기준 노드의 값이 \"m1-1\"이고 부모 노드의 value가 \"m1\"일 경우\nvar tmpRs1 = treeview1.getParentValue(\"menu1\");\nreturn 예시 ) \"m1\"\n```\n\n"
        },
        "setValueByIndex": {
          "!type": "fn(index: string, value: string)",
          "!doc": "노드의 index 기반으로 value을 변경한다.\n\n**Parameters:**\n\n```index``` - ```String:Y``` - 노드의 index\n\n```value``` - ```String:Y``` - 새로 설정할 value의 값\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//index가 2인 노드의 value를 변경\ntreeview1.setValueByIndex(2,\"즐겨찾기\");\n```\n\n"
        },
        "spanAll": {
          "!type": "fn(openCloseFlag: bool)",
          "!doc": "openCloseFlag에 따라서 모든 자식 노드를 span시켜 준다.\n\n**Parameters:**\n\n```openCloseFlag``` - ```boolean:Y``` - 자식 노드를 접을지 확장할 지의 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//자식 노드들을 모두 접는다.\ntreeview1.spanAll(false);\n\n//자식 노드들을 모두 확장한다. \ntreeview1.spanAll(true);\n```\n\n"
        },
        "removeNodeClass": {
          "!type": "fn(index: number, applyChildNodes: bool)",
          "!doc": "해당 node에 적용된 className을 해제합니다.\n\n**Parameters:**\n\n```index``` - ```Number||String:Y``` - 노드의 index 또는 value\n\n```applyChildNodes``` - ```Boolean:N``` - [default:false, true]하위노드 적용 여부\n\n**Since:**\n\n5.0_5.5154B.20240227.143348\n\n**Sample:**\n\n```javascript\n//value가 \"menu1-1\"인 노드 및 하위 노드에 적용된 class를 해제하고자 하는 경우\ntreeview1.removeNodeClass(\"menu1-1\", true);\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getXPathByValue": {
          "!type": "fn(value: string)",
          "!doc": "value에 해당하는 노드의 XPath를 반환한다.\n\n본 기능은 데이터를 InstanceData로 연동하거나 XML로 데이터를 제어할 때 사용한다.\n\nDataList와 연동된 경우 DataList의 baseNode와 repeatNode속성값을 참조하여 XPath를 반환한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 노드의 value\n\n**Return:**\n\n```String``` - Xpath\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//DataList와 연동된 경우의 반환값 확인하기\n\n//1. DataList 정의\n//baseNode 속성은 \"list\"로 repeatNode속성은 \"map\"으로 설정\n<w2:dataList id=\"dc_menu\" baseNode=\"list\" repeatNode=\"map\">\n    <w2:columnInfo>\n        <w2:column id=\"depth\" name=\"depth\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[메뉴1]]><\/label>\n            <value><![CDATA[menu1]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[2]]><\/depth>\n            <label><![CDATA[메뉴1-1]]><\/label>\n            <value><![CDATA[menu1-1]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <depth><![CDATA[1]]><\/depth>\n            <label><![CDATA[메뉴2]]><\/label>\n            <value><![CDATA[menu2]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n//2. TreeView 정의 - 필요 없는 항목들은 삭제 처리\n<w2:treeview dataType=\"listed\" id=\"treeview1\" style=\"position: relative;width: 200px;height: 400px;\">\n    <w2:itemset nodeset=\"data:dc_menu\">\n        <w2:label ref=\"label\"><\/w2:label>\n        <w2:value ref=\"value\"><\/w2:value>\n        <w2:depth ref=\"depth\"><\/w2:depth>\n    <\/w2:itemset>\n<\/w2:treeview>\n\n//value가 \"menu1-1\"인 노드의 XPath 꺼내오기\nvar tmpRs = treeview1.getXPathByValue(\"menu1-1\");\n//return 예시 ) \"list/map[value='menu1-1']\"\n```\n\n"
        },
        "disableCheckboxByValue": {
          "!type": "fn(value: string, checkDisabled: bool, childDisabled: bool)",
          "!doc": "value를 기반으로 노드(항목)을 찾아 checkbox의 disabled를 설정한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 대상 노드의 value\n\n```checkDisabled``` - ```Boolean:Y``` - checkbox의 disabled 적용 여부\n\n```childDisabled``` - ```Boolean:N``` - 자녀 노드까지의 적용 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//value가 \"menu1\"인 노드를 찾아 해당 노드만 checkbox를 disabeld 처리한다.\ntreeview1.disableCheckboxByValue(\"menu1\",true);\n```\n```<br />\n```javascript\n//value가 \"menu1\"인 노드를 찾아 해당 노드와 하위 노드의 checkbox를 disabeld 처리한다.\ntreeview1.disableCheckboxByValue(\"menu1\",true,true);\n```\n\n"
        },
        "getSelectedNode": {
          "!type": "fn()",
          "!doc": "선택된 노드객체를 반환한다.\n\n반환된 노드는 appendNode, appendData등의 API에 파라메터로 사용가능하며 노드에 담긴 값을 통해 자식노드, 부모노드 등의 정보를 참조할 수 있다.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n//노드의 label이 \"Menu1-2\"인 노드가 선택된 경우\nvar tmpRs = treeview1.getSelectedNode(); \n//return 예시 - 주요정보만 명시 )\n{\n    index: 6,  \n    label: \"Menu1-2\", \n    value: \"m1-2\", \n    checkboxDisabled: false,\n    checked: false,\n    childNodes: Array[1], //노드 객체가 담긴 배열\n    depth: 2,\n    folder: null,\n    parentNode: WebSquare.collection.node   //노드 객체\n}\n\n//선택된 노드의 value값을 꺼내올 경우\nvar tmpValue = tmpRs.value;\n//return 예시 ) \"m1-2\"\n\n//선택된 노드의 부모노드의 value값을 꺼내올 경우\nvar tmpParent = tmpRs.parentNode;\nvar tmpParentValue = tmpParent.value\n//return 예시 ) \"m1\"\n```\n\n"
        },
        "getCheckedValues": {
          "!type": "fn(options: +Object)",
          "!doc": "checkbox가 체크된 노드들의 value를 배열에 담아 반환한다.\n\n**Parameters:**\n\n```options``` - ```JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy:``` - hierarchy를 포함한 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.hierarchy|<Boolean>|hierarchy속성 사용 시 반투명 체크된 노드를 포함할지에 대한 여부|\n|options.excludeRoot|<Boolean>|루트노드를 제외할지에 대한 여부|\n\n**Return:**\n\n```Array``` - 체크된 노드들의 value가 담긴 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//1번째와 3번째 노드의 checkbox가 check되어 있고 각 노드의 value이 \"m1\", \"m1-2\"일 경우.\nvar tmpRs = treeview1.getCheckedValues();\n//return 예시 ) [\"m1\", \"m1-2\"]\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setLabelStyle": {
          "!type": "fn(index: number, styleName: string, styleValue: string, applyChildNodes: bool)",
          "!doc": "해당 node의 label style(node의 글자색, 글자크기, 글꼴 등)을 변경합니다.\n\n**Parameters:**\n\n```index``` - ```Number||String:Y``` - 노드의 index 또는 value\n\n```styleName``` - ```String:Y``` - style의 속성명\n\n```styleValue``` - ```String:Y``` - style 속성값\n\n```applyChildNodes``` - ```Boolean:N``` - [default:false, true]하위노드 적용 여부\n\n**Since:**\n\n2.0_1.3086B.20130607.174758\n\n**Sample:**\n\n```javascript\n//value가 \"menu1-1\"인 노드의 label의 글자색을 \"orange\"로 변경할 경우\ntreeview1.setLabelStyle( \"menu1-1\", \"color\", \"orange\" );\n```\n\n"
        },
        "spanNode": {
          "!type": "fn(nodeIndex: string, openCloseFlag: bool, applyChildNodes: bool)",
          "!doc": "옵션에 해당하는 node를 span시켜 준다.\n\n**Parameters:**\n\n```nodeIndex``` - ```String:Y``` - 노드의 index\n\n```openCloseFlag``` - ```boolean:Y``` - 노드를 접을지 확장할 지의 여부\n\n```applyChildNodes``` - ```boolean:Y``` - child 노드까지 같이 확장할 지의 여부\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//nodeIndex 1에 해당하는 노드를 토글한다\ntreeview1.spanNode(1);\n\n//nodeIndex 1에 해당하는 노드를 접는다 \ntreeview1.spanNode(1, false);\n\n//nodeIndex 1에 해당하는 노드를 확장한다\ntreeview1.spanNode(1, true);\n\n//nodeIndex 1에 해당하는 노드와 자식노드까지 접는다\ntreeview1.spanNode(1, false, true);\n\n//nodeIndex 1에 해당하는 노드와 자식노드까지 확장한다\ntreeview1.spanNode(1, true, true);\n\n//nodeDepth 2에 해당하는 노드를 토글한다.\ntreeview1.spanNode({depth:2});\n\n//nodeDepth 2에 해당하는 노드를 접는다.\ntreeview1.spanNode({depth:2}, false);\n\n//nodeDpeth 2에 해당하는 노드와 자식노드까지 확장한다\ntreeview1.spanNode({depth:2, applyChildNodes:true}, true);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabelByValue": {
          "!type": "fn(value: string, label: string)",
          "!doc": "노드의 value를 기반으로 label을 변경한다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 노드의 value\n\n```label``` - ```String:Y``` - 새로 설정할 label의 값\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\n//value가 \"m1\"인 노드의 label을 변경\ntreeview1.setLabelByValue(\"m1\",\"즐겨찾기\");\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, columnInfo: +Object)",
          "!doc": "treeView와 연동된 dataList를 다른 dataList로 변경한다.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - 변경할 dataList id. \"data:\"을 prefix로 붙여야 한다.\n\n```columnInfo``` - ```JSON:N``` - label, value, depth, checkbox, folder 속성을 포함한 JSON 객체\n\n|property|type|description|\n|:-|:-|:-|\n|columnInfo.label|<JSON>|treeview의 label 속성과 연동할 새로운 dataList column의 id|\n|columnInfo.value|<JSON>|treeview의 value 속성과 연동할 새로운 dataList column의 id|\n|columnInfo.depth|<JSON>|treeview의 depth 속성과 연동할 새로운 dataList column의 id|\n|columnInfo.checkbox|<JSON>|treeview의 checkbox 속성과 연동할 새로운 dataList column의 id|\n|columnInfo.folder|<JSON>|treeview의 folder 속성과 연동할 새로운 dataList column의 id|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n// 새로운 dataList의 아이디가 dataList1인 경우\n```javascript\n var columnInfo={};\n columnInfo.label    = \"newVal\"   // dataList의 column id가 newVal\n columnInfo.value    = \"newLab\"   // dataList의 column id가 newLab\n columnInfo.depth    = \"newDep\"   // dataList의 column id가 newDep\n columnInfo.checkbox = \"newChk\"   // dataList의 column id가 newChk\n columnInfo.folder   = \"newFol\"   // dataList의 column id가 newFol\n treeview1.setNodeSet( \"data:dataList1\" , columnInfo ); // treeView의 id가 treeview1 인경우 API 호출\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "collapseNode": {
          "!type": "fn(value: string, hierarchy: bool)",
          "!doc": "value 또는 index를 기반으로 찾은 노드(항목)를 접는다. index는 1부터 시작한다.\n\n**Parameters:**\n\n```value``` - ```String||Number:Y``` - 대상 노드의 value 또는 index (index는 1부터 시작한다.)\n\n```hierarchy``` - ```Boolean:N``` - 자식 노드까지 적용할지의 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//첫번째 노드를 찾아 해당 노드만 접는다.\ntreeview1.collapseNode( 1 , true);\n\n//value가 \"menu1-2\"인 노드를 찾아 해당 노드만 접는다.\ntreeview1.collapseNode(\"menu1-2\");\n\n//value가 \"menu1-2\"인 노드를 찾아 해당 노드와 하위 노드를 접는다.\ntreeview1.collapseNode(\"menu1-2\" , true);\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getChildNodes": {
          "!type": "fn(value: string, hierarchy: bool)",
          "!doc": "value에 해당하는 node의 자식 node들을 반환합니다.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 부모 node의 value값\n\n```hierarchy``` - ```Boolean:N``` - 모든 자식을 재귀적으로 가져올지에 대한 여부. 기본값은 false로 부모의 첫번쨰 depth 자식만 가져온다. true를 설정하면 모든 자식 node를 재귀적으로 가져온다.\n\n**Return:**\n\n```Array``` - 자식 node를 담은 배열\n\n**Since:**\n\n5.0_5.4783B.20230102.112045\n\n**Sample:**\n\n```javascript\n treeview 구조가 아래와 같고 value와 lable이 같은 경우\n    \n -[-] clothes \n - │ └─ outer\n - │ [+] bottom\n - │  └─ dress        \n -[+] bags\n - └─ shoes \n \n var childNode1 = treeview1.getChildNodes(\"clothes\");\n // childNode1의 결과는 [outer, bottom]  (array 요소 타입은 각 value에 해당하는 node object이다)\n var childNode2 = treeview1.getChildNodes(\"clothes\", true);\n // childNode2의 결과는 [outer, bottom, dress]\n```\n\n"
        },
        "getSelectedLabel": {
          "!type": "fn()",
          "!doc": "선택된 노드의 label을 반환한다.\n\n선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.\n\n**Return:**\n\n```String``` - 선택된 노드의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//선택된 노드가 없는 경우\nvar tmpRs = treeview1.getSelectedLabel();\n//return 예시 ) \"\"\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "panelContainer": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getPanelInfoById": {
          "!type": "fn(id: string)",
          "!doc": "panel id에 맞는 panel 속성을 찾는다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 찾고자 하는 속성의 panel id\n\n**Return:**\n\n```String``` - panel id에 맞는 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "removePanel": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "rowIndex , colIndex 에 맞는 panel을 삭제합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 선택하고자 하는 rowIndex\n\n```colIndex``` - ```Number:Y``` - 선택하고자 하는 colIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "setPanelTitle": {
          "!type": "fn(id: string, title: string)",
          "!doc": "panel의 title을 설정합니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - title을 설정하고 자 하는 panel id\n\n```title``` - ```String:Y``` - panel title에 설정하고자 하는 title\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "openPanel": {
          "!type": "fn(id: string)",
          "!doc": "panel을 엽니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 열고자 하는 panel의 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPanelInfo": {
          "!type": "fn()",
          "!doc": "panel의 속성정보들을 얻습니다.\n\n**Return:**\n\n```String``` - panel의 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addPanel": {
          "!type": "fn(options: +Object)",
          "!doc": "panel 을 추가합니다.\n\n**Parameters:**\n\n```options``` - ```Object:N``` - panel 속성 Object\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "closePanel": {
          "!type": "fn(id: string)",
          "!doc": "panel을 닫습니다.\n\n**Parameters:**\n\n```id``` - ```String:Y``` - 닫고자 하는 panel의 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "fliptoggle": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "toggle": {
          "!type": "fn(index: number)",
          "!doc": "토글 처리를 수행.\n\n**Parameters:**\n\n```index``` - ```Number:N``` - 선택할 인덱스. 없으면 현재 값과 반대값으로 토글.\n\n**Return:**\n\n```String``` - 선택된 항목의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 인자값을 주지 않은 경우, 현재상태와 반대로 토글됨.\nfliptoggle1.toggle();\n// off 상태의 index는 0이며, on 상태의 index는 1. \n// 인자값이 0인 경우, off 상태가 선택됨. 인자 값이 1인 경우, on 상태가 선택됨.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "토글된 value 값을 반환.\n\n**Return:**\n\n```String``` - value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// On이 활성화된 경우\nvar tmpRs1 = fliptoggle1.getValue();\n// (반환 값) \"On\"\n\n// Off가 활성화된 경우\nvar tmpRs2 = fliptoggle1.getValue();\n// (반환 값) \"Off\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "인자로 받은 값으로 토글을 수행.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 토글할 항목의 값\n\n**Return:**\n\n```String``` - 설정 결과\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// On으로 토글:\nfliptoggle1.setValue(\"On\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "grid": {
        "getAllDisplayXML": {
          "!type": "fn()",
          "!doc": "그리드의 모든 data를 XML로 반환합니다.(filter 적용하지 않음)\n\n**Return:**\n\n```Xml Element``` - 그리드의 data\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnXMLStr = WebSquare.xml.indent(grid1.getAllDisplayXML());\n```\n```<br />baseNode : gridData , repeatNode : vector , valueNode : value 일 경우,<br />returnXMLStr은 예는 다음과 같다.\n```javascript\n<gridData>\n    <vector status=\"0\" statusValue=\"R\" id=\"0\">\n        <a value = \"2012.01.01\"/>\n        <b value = \"23,456\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample\"/>\n    <\/vector>\n    <vector status=\"0\" statusValue=\"R\" id=\"1\">\n        <a value = \"2012.01.02\"/>\n        <b value = \"34,567\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample2\"/>\n    <\/vector>\n    ... (중략)\n<\/gridData>\n```\n\n"
        },
        "setJSON": {
          "!type": "fn(jsonData: +Object, append: string)",
          "!doc": "JSON Data를 Grid에 넣거나 추가합니다. (행의 상태는 초기상태인 R로 변경됩니다.)\n\n**Parameters:**\n\n```jsonData``` - ```Object:Y``` - 객체를 담고 있는 array형태의 JSON 객체\n\n```append``` - ```String:N``` - 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능]\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\njsonData의 데이터 구조\nvar jsonData = [\n             {\n               AA : \"A1\",\n               BB : \"B1\",\n               CC : \"C1\"\n             },\n             {\n               AA : \"A2\",\n               BB : \"B2\",\n               CC : \"C2\"\n             }\n           ];\ngrid1.setJSON( jsonData );\n```\n\n"
        },
        "getRowData": {
          "!type": "fn(rowIndex: number, display: string)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 배열로 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n```display``` - ```String:N``` - 값이 displayData인 경우에 화면에 보이는 값으로 반환\n\n**Return:**\n\n```Object``` - rowIndex에 해당하는 행의 데이터의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar dataArr = grid1.getRowData( 0, 'displayData' );\n// dataArr.length 는 5이다.\n// dataArr[0] 은 2012.01.01 \n// dataArr[1] 은 23,456\n// 위와 같이 format이 지정된 형태의 값으로 반환.\n\nvar dataArr = grid1.getRowData( 0 );\n// dataArr[0] 은 20120101\n// dataArr[1] 은 23456\n// 위와 같이 원래 값을 반환.\n```\n\n"
        },
        "mergeByRestriCol": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 column 내에서 연속적으로 데이터가 같으면서 동시에 자신의 왼쪽에 위치한 column이 merge된 경우 해당 row들을 merge한다. (\n\nn+1컬럼에서 n컬럼을 upperColumn으로 지정한 형태이다\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellPosition": {
          "!type": "fn(row: number, colIndex: string, propertyName: string)",
          "!doc": "셀의 위치 정보(top이나 left)를 반환합니다.\n\n**Parameters:**\n\n```row``` - ```Number:Y``` - 셀의 행 번호(세로 스크롤 위치와는 무관하게 현재 그리드에서 최상단 행에 위치한 셀의 행 번호를 0으로 보고 세어야 한다)\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n```propertyName``` - ```String:Y``` - 반환할 위치 정보의 이름('top' 또는 'left')\n\n**Return:**\n\n```Number``` - 셀의 위치 정보(top이나 left)의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellPosition(0, 'b', 'left'); // returnValue는 그리드에서 해당 cell이 위치한 left 값을 반환.\n```\n\n"
        },
        "getCellDisplayData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellDisplayData(0, \"a\"); // 첫 번째 row, \"a\" colum에 해당하는 cell에 표시된 값을 반환한다.\n```\n\n"
        },
        "removeAll": {
          "!type": "fn()",
          "!doc": "그리드의 모든 행을 삭제하고 가지고 있던 data를 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제한 행들이 가지고 있던 data\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 5개의 컬럼이 존재하는 그리드에서 행의 수가 20개 인 경우.\nvar returnArr = grid1.removeAll();\n// returnArr는 1차원 배열이며, returnArr.length 는 100이다.\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getFocusedRowStatus": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀이 속한 row의 상태 값(문자)를 반환합니다.\n\n**Return:**\n\n```String``` - 포커스가 위치한 셀이 속한 row의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue  = grid1.getFocusedRowStatus(); // returnValue는 포커스가 위치한 셀이 속한 row의 상태를 나타내는 문자.\n```\n\n"
        },
        "setHeaderNodeSet": {
          "!type": "fn(headerId: string, nodeset: string, label: string, value: string)",
          "!doc": "headInputType이 select일 경우, headerId에 해당 하는 header 컬럼 selectbox itemset의 Model 바인딩 ref를 셋팅합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 아이디\n\n```nodeset``` - ```String:N``` - 변경하려는 nodeset의 xpath 문자열\n\n```label``` - ```String:N``` - 변경하려는 label의 xpath 문자열\n\n```value``` - ```String:N``` - 변경하려는 value의 xpath 문자열\n\n**Since:**\n\n2.0_1.3332B.20130827.141857\n\n**Sample:**\n\n```javascript\ngrid1.setHeaderNodeSet('hName','colorNode/vector','label/@value','value/@value');\n```\n\n"
        },
        "getRowDisabled": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행에 적용된 disabled속성 값을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행 번호\n\n**Return:**\n\n```Boolean``` - 해당 행에 적용된 disabled속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowDisabled(0); // returnValue는 첫번째 행에 적용된 disabled 값.\n```\n\n"
        },
        "getUpdatedData": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 갱신 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getUpdatedData(); // returnArr는 갱신 상태(1, U)의 행들의 데이터 배열.\n```\n\n"
        },
        "setFooterStyle": {
          "!type": "fn(footerId: string, style: string, value: string)",
          "!doc": "그리드의 footerId에 해당하는 footer cell의 스타일 속성을 설정합니다.\n\n**Parameters:**\n\n```footerId``` - ```String:Y``` - 그리드 footer cell의 id, 혹은 index(\"$rowNum\", \"$rowStatus\"로 rowNum, rowStatus 셀 지정 가능)\n\n```style``` - ```String:Y``` - 적용할 스타일 속성\n\n```value``` - ```String:Y``` - 적용할 스타일 속성값\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\ngrid1.setFooterStyle(\"a\", \"background-color\", \"red\"); // id가 \"a\"인 footer cell의 \"background-color\"속성을 \"red\"로 설정\n```\n\n"
        },
        "setRowNumColumnWidth": {
          "!type": "fn(size: number)",
          "!doc": "rowNum컬럼의 폭을 변경합니다.\n\n**Parameters:**\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowNumColumnWidth(100); // rowNum 컬럼의 width를 100px로 변경한다.\n```\n\n"
        },
        "clearGroupby": {
          "!type": "fn()",
          "!doc": "grid groupby를 해제합니다.\n\n**Since:**\n\n2.0_1.3229B.20130731.095639\n\n**Sample:**\n\n```javascript\ngrid1.clearGroupby(); // groupby를 취소한다.\n```\n\n"
        },
        "getMatchedData": {
          "!type": "fn(colIndex: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안의 data를 가지고 있는 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnArr = grid1.getMatchedData( 'c', '영화', true, 0, lastRowIndex ); // returnArr는 그리드 전체에서 c컬럼의 값이 \"영화\" 인 행의 데이터 배열.\n```\n\n"
        },
        "getRowCount": {
          "!type": "fn()",
          "!doc": "그리드의 데이터 row의 건수를 반환합니다.\n\n**Return:**\n\n```Number``` - 그리드의 데이터 row의 건수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowCount(); // 그리드 data의 row수가 20인 경우, returnValue는 20이다.\n```\n\n"
        },
        "getTotalCol": {
          "!type": "fn()",
          "!doc": "컬럼의 개수를 반환 한다.\n\n**Return:**\n\n```Number``` - 컬럼의 개수\n\n**Since:**\n\n2.0_1.2018A.20120508.095534\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderPosition": {
          "!type": "fn(headerId: string, propertyName: string)",
          "!doc": "header의 위치 정보(top이나 left)를 반환합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 Id\n\n```propertyName``` - ```String:Y``` - 반환할 위치 정보의 이름('top' 또는 'left')\n\n**Return:**\n\n```Number``` - header의 위치 정보(top이나 left)의 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getHeaderPosition('b', 'left'); // returnValue는 그리드에서 해당 header가 위치한 left 값을 반환.\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getTopRowIndex": {
          "!type": "fn()",
          "!doc": "현재 그리드에 그려진 최상단 row의 rowIndex를 반환합니다. 그려진 row가 없으면 -1을 반환합니다.\n\n**Return:**\n\n```Number``` - 최상단 row의 rowIndex\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getTopRowIndex(); // returnValue는 스크롤 변화에 따라 현재 그리드에 보이는 최상단 행의 index.\n```\n\n"
        },
        "getCheckedIndex": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 radio/checkbox가 check된 행의 Index를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - checkbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - 행번호를 저장한 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getCheckedIndex('a'); // returnArr는 선택된 행의 index 배열.\n```\n\n"
        },
        "mergeCol": {
          "!type": "fn(colIndex: number, flag: bool)",
          "!doc": "데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 컬럼을 제외하기 위해 사용하는 API이다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 자동으로 merge하는 기능을 사용할지 말지를 지정할 대상 column이다.\n\n```flag``` - ```Boolean:Y``` -\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.mergeCol(1, false); // 2번째 column을 data를 통한 merge기능에서 제외한다 .\n grid1.mergeByCol(); // 2번째 column을 제외하고 mergeByCol이 수행된다.\n```\n\n"
        },
        "getAllVisibleXML": {
          "!type": "fn()",
          "!doc": "그리드의 현재 보이는 data를 XML로 반환합니다.(filter까지 적용)\n\n**Return:**\n\n```Xml Element``` - 그리드의 현재 보이는 data\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXMLStr = WebSquare.xml.indent(grid1.getAllVisibleXML()); // grid1.getAllDisplayXML(); 에서 filter를 적용한 것과 같다.\n```\n\n"
        },
        "setCellBackgroundColor": {
          "!type": "fn(rowIndex: number, colIndex: string, color: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 배경색으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 설정할 행 번호\n\n```colIndex``` - ```String:Y``` - 배경색을 설정할 열 번호 혹은 컬럼 아이디\n\n```color``` - ```String:Y``` - 배경색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellBackgroundColor(0, 'a', '#0000FF'); // 첫번째 행 a컬럼의 배경색을 파랑으로 설정한다.\n```\n\n"
        },
        "advancedExcelDownload": {
          "!type": "fn(options: +Object, infoArr: +Object)",
          "!doc": "그리드의 데이터를 엑셀 파일로 저장합니다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 엑셀 다운로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|[defalut: excel.xls] 다운로드하려는 파일의 이름|\n|options.sheetName|<String:N>|[defalut: sheet] excel의 sheet의 이름|\n|options.type|<String:N>|[defalut: 0] type이 0인 경우 실제 데이터 1인 경우 눈에 보이는 데이터를  2이면 들어가 있는 data 그대로(filter무시 expression 타입의 셀은 나오지 않음)|\n|options.removeColumns|<String:N>|[defalut: 없음] 다운로드시 excel에서 삭제하려는 열의 번호(여러 개일 경우 ,로 구분)|\n|options.removeHeaderRows|<String:N>|[defalut: 없음] 다운로드시 excel에서 삭제하려는 Header의 row index(여러 개일 경우 ,로 구분)|\n|options.foldColumns|<String:N>|[defalut: 없음] 다운로드시 excel에서 fold하려는 열의 번호(여러 개일 경우 ,로 구분)|\n|options.startRowIndex|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 시작되는 행의 번호(헤더 포함)|\n|options.startColumnIndex|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 시작되는 열의 번호(헤더 포함)|\n|options.headerColor|<String:N>|[defalut: #33CCCC] excel파일에서 그리드의 header부분의 색|\n|options.headerFontName|<String:N>|[defalut: 없음] excel파일에서 그리드의 header부분의 font name|\n|options.headerFontSize|<String:N>|[defalut: 10] excel파일에서 그리드의 header부분의 font size|\n|options.headerFontColor|<String:N>|[defalut: 없음] excel파일에서 그리드의 header부분의 font색|\n|options.bodyColor|<String:N>|[defalut: #FFFFFF] excel파일에서 그리드의 body부분의 색|\n|options.bodyFontName|<String:N>|[defalut: 없음] excel파일에서 그리드의 body부분의 font name|\n|options.bodyFontSize|<String:N>|[defalut: 10] excel파일에서 그리드의 body부분의 font size|\n|options.bodyFontColor|<String:N>|[defalut: 없음] excel파일에서 그리드의 body부분의 font색|\n|options.subTotalColor|<String:N>|[defalut: #CCFFCC] excel파일에서 그리드의 subtotal부분의 색|\n|options.subTotalFontName|<String:N>|[defalut: 없음] excel파일에서 그리드의 subtotal부분의 font name|\n|options.subTotalFontSize|<String:N>|[defalut: 10] excel파일에서 그리드의 subtotal부분의 font size|\n|options.subTotalFontColor|<String:N>|[defalut: 없음] excel파일에서 그리드의 subtotal부분의 font색|\n|options.footerColor|<String:N>|[defalut: #008000] excel파일에서 그리드의 footer부분의 색|\n|options.footerFontName|<String:N>|[defalut: 없음] excel파일에서 그리드의 footer부분의 font name|\n|options.footerFontSize|<String:N>|[defalut: 10] excel파일에서 그리드의 footer부분의 font size|\n|options.footerFontColor|<String:N>|[defalut: 없음] excel파일에서 그리드의 footer부분의 font색|\n|options.showProcess|<Boolean:N>|[defalut: true] 다운로드 시 프로세스 창을 보여줄지 여부|\n|options.massStorage|<Boolean:N>|[defalut: true] 대용량 다운로드 여부 (default는 true 이 옵션을 true로 하고 showConfirm을 false로 한 경우에 IE에서 신뢰할만한 사이트를 체크하는 옵션이 뜬다.)|\n|options.showConfirm|<Boolean:N>|[defalut: false] 다운로드 확인창을 띄울지 여부(옵션을 킨 경우 advancedExcelDownload를 호출후 사용자가 window의 버튼을 한번더 클릭해야 한다. massStorage는 자동으로 true가 된다)|\n|options.dataProvider|<String:N>|[defalut: 없음] 대량데이터 처리 및 사용자 데이터를 가공할 수 있는 Provider Package|\n|options.providerRequestXml|<String:N>|[defalut: 없음] Provider 내부에서 사용할 XML 문자열|\n|options.userDataXml|<String:N>|[defalut: 없음] 사용자가 서버모듈 개발 시 필요한 데이터를 전송 할 수 있는 변수|\n|options.bodyWordwrap|<Boolean:N>|[defalut: false] 다운로드시 바디의 줄 바꿈 기능|\n|options.useEuroLocale|<String:N>|[defalut: false] 다운로드시 유로화 처리 기능(,와 .이 반대인 경우처리)|\n|options.useHeader|<String:N>|[defalut: true] 다운로드시 Header를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력)|\n|options.useSubTotal|<String:N>|[defalut: false] 다운로드시 SubTotal을 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력), expression을 지정한 경우 avg,sum,min,max,targetColValue,숫자를 지원 함.|\n|options.useFooter|<String:N>|[defalut: true] 다운로드시 Footer를 출력 할지 여부( \"true\"인경우 출력, \"false\"인경우 미출력)|\n|options.separator|<String:N>|[defalut: ,] 다운로드시 서버로 데이터 전송할때, 데이터를 구분짓는 구분자, default는 comma(,)|\n|options.subTotalScale|<Number:N>|[defalut: -1] 다운로드시 subTotal 평균계산시 소수점 자리수를 지정|\n|options.subTotalRoundingMode|<String:N>|[defalut: 없음] 다운로드시 subTotal 평균계산시 Round를 지정 한다. (\"CEILING\",\"FLOOR\",\"HALF_UP\")|\n|options.useStyle|<String:N>|[defalut: false] 다운로드시 css를 제외한, style을 excel에도 적용할 지 여부 (배경색,폰트)|\n|options.freezePane|<String:N>|[defalut: \"\"] 틀고정을 위한 좌표값 및 좌표값의 오픈셋 ( ex) freezePane=\"3,4\" X축 3, Y축 4에서 틀고정, freezePane=\"0,1,0,5\" X축 0, Y축 1에서 X축으로 0, Y축으로 5로 틀공정  )|\n|options.autoSizeColumn|<String:N>|[defalut: false] 너비자동맞춤 설정 유무|\n|options.displayGridlines|<String:N>|[defalut: false] 엑셀 전체 셀의 눈금선 제거 유무|\n|options.colMerge|<String:N>|[defalut: false] colMerge된 컬럼을 Merge해서 출력 할 지 여부|\n|options.useDataFormat|<String:N>|[defalut: 없음] 그리드 dataType이 text인 경우, 엑셀의 표시형식 '텍스트' 출력 유무( \"true\"인 경우 표시형식 텍스트, \"false\"인 경우 표시형식 일반 출력)|\n|options.printSet|<Object:N>|JSON형태로 저장된 Excel Print관련 설정|\n|options.printSet.fitToPage|<String:N>|[defalut: false] 엑셀 프린터 출력시 쪽맞춤 사용 유무|\n|options.printSet.landScape|<String:N>|[defalut: false] 엑셀 프린터 출력시 가로 방향 출력 유무|\n|options.printSet.fitWidth|<String:N>|[defalut: 1] 엑셀 프린터 출력시 용지너비|\n|options.printSet.fitHeight|<String:N>|[defalut: 1] 엑셀 프린터 출력시 용지높이|\n|options.printSet.scale|<String:N>|[defalut: 100] 엑셀 프린터 출력시 확대/축소 배율, scale을 사용할 경우 fitToPage는 false로 설정 해야 한다.|\n|options.printSet.pageSize|<String:N>|[defalut: A4] 엑셀 프린터 출력시 인쇄용지 설정 ( ex) \"A3\", \"A4\", \"A5\", \"B4\" )|\n\n\n```infoArr``` - ```Object:N``` - 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열\n\n|property|type|description|\n|:-|:-|:-|\n|infoArr.rowIndex|<Number:N>|내용을 표시할 행번호|\n|infoArr.colIndex|<Number:N>|내용을 표시할 열번호|\n|infoArr.rowSpan|<Number:N>|병합할 행의 수|\n|infoArr.colSpan|<Number:N>|병합할 열의 수|\n|infoArr.text|<String:N>|표시할 내용|\n|infoArr.textAlign|<String:N>|표시할 내용의 정렬 방법 (left, center, right)|\n|infoArr.fontSize|<String:N>|font size 설정 ( ex) \"20px\" )|\n|infoArr.fontName|<String:N>|font name 설정|\n|infoArr.color|<String:N>|font color 설정 ( ex) \"red\" )|\n|infoArr.fontWeight|<String:N>|font weight 설정 ( ex) \"bold\" )|\n|infoArr.drawBorder|<String:N>|cell의 border 지정 ( ex) true )|\n|infoArr.wordWrap|<String:N>|cell의 줄 바꿈 기능 ( ex) \"true\" )|\n|infoArr.bgColor|<String:N>|cell의 배경 color 설정 ( ex) \"red\" )|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드\nvar options = {\n    fileName:           \"user.xls\",\n    type:               \"1\",\n    removeColumns:      \"1,3\",\n    foldColumns:        \"2\",\n    startRowIndex:      3,\n    startColumnIndex:   0,\n    headerColor:        \"#DBEEF3\",\n    footerColor:        \"#92CDDC\",\n    showProcess:        true,\n    dataProvider:       \"com.provider.Provider1\",\n    providerRequestXml: WebSquare.xml.serialize(WebSquare.ModelUtil.findInstanceNode(\"request\"))\n};\n \nvar infoArr = []; \nvar infoObj = {\n    rowIndex:   1,\n    colIndex:   3,\n    rowSpan:    1,\n    colSpan:    2,\n    text:       \"데이터표시\",\n    textAlign:  \"center\"\n};\ninfoArr.push( infoObj );\ngrid1.advancedExcelDownload(options , infoArr);\n\n    A            || C          D      E      F\n  ┌──────────────┐┌──────────┬──────┬──────┬────\n1 |              ||          |      |      |\n  |              ||          ┌──────┴──────┐\n2 |              ||          |   데이터표시   |\n  |              ||          └──────┬──────┘\n3 |              ||          |      |      |\n4 | a            || e        |      |      |     -> 그리드 헤더.\n5 | Renaissance  || 20111231 |      |      |     -> 그리드 데이터. \n6 | ... (생략)\n```\n\n"
        },
        "getCellChecked": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "rowIndex와 colIndex로 해당하는 셀의 check여부를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Boolean``` - 셀의 check여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellChecked(0, 'a'); // returnValue는 첫 번째 행, 컬럼 'a'인 cell의 check 여부\n```\n\n"
        },
        "getHeaderSize": {
          "!type": "fn(headerId: string, sizeName: string)",
          "!doc": "header의 크기 정보(width나 height)를 반환합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 Id\n\n```sizeName``` - ```String:Y``` - 반환할 크기 정보의 이름('width' 또는 'height')\n\n**Return:**\n\n```Number``` - header의 크기 정보(width나 height)의 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getHeaderSize('b', 'width'); // returnValue는 그리드에서 해당 header의 width 값을 반환.\n```\n\n"
        },
        "getHeaderIndex": {
          "!type": "fn(header: string)",
          "!doc": "header id로 header index를 찾아옵니다.\n\n**Parameters:**\n\n```header``` - ```String:Y``` - id\n\n**Since:**\n\n2.0_1.2982B.20130506.153941\n\n**Sample:**\n\n```javascript\ngrid1.getHeaderIndex( \"aa\" ); // id가 aa인 header index를 얻어온다.\n```\n\n"
        },
        "advancedExcelUpload": {
          "!type": "fn(options: +Object)",
          "!doc": "엑셀 파일을 읽어 그리드의 데이터를 설정합니다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 엑셀 업로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.type|<String:N>|[defalut: 0] 1이면 엑셀 파일이 그리드의 보이는 결과로 만들어져있을때  0이면 엑셀 파일이 그리드의 실제 데이터로 구성되어있을때|\n|options.sheetNo|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 있는 sheet번호|\n|options.startRowIndex|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 시작되는 행의 번호(헤더 포함)|\n|options.startColumnIndex|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 시작되는 열의 번호|\n|options.endColumnIndex|<Number:N>|[defalut: 0] excel파일에서 그리드의 데이터가 끝나는 열의 index ( 엑셀컬럼수가 그리드컬럼수 보다 작은 경우 그리드 컬러수를 설정)|\n|options.headerExist|<String:N>|[defalut: 0] excel파일에서 그리드의 데이터에 header가 있는지 여부(1이면 header 존재 0이면 없음)|\n|options.footerExist|<String:N>|[defalut: 1] excel파일에서 그리드의 데이터에 footer가 있는지 여부(1이면 footer 존재, 0이면 없음. 기본값은 1. 그리드에 footer가 없으면 적용되지 않음.)|\n|options.append|<String:N>|[defalut: 0] excel파일에서 가져온 데이터를 그리드에 append시킬지 여부(1이면 현재 그리드에 데이터를 추가로 넣어줌 0이면 현재 그리드의 데이터를 삭제하고 넣음)|\n|options.hidden|<String:N>|[defalut: 0] 읽어들이려는 엑셀파일에 hidden column이 저장되어 있는지 여부를 설정하는 int형 숫자(0이면  엑셀파일에 hidden 데이터가 없으므로 그리드 hidden column에 빈 데이터를 삽입  1 : 엑셀파일에 hidden 데이터가 있으므로 엑셀 파일로부터 hidden 데이터를 삽입 )|\n|options.fillHidden|<String:N>|[defalut: 0] Grid에 hiddenColumn에 빈 값을 넣을지를 결정하기 위한 int형 숫자(1이면 hidden Column에 빈 값을 저장하지 않음,0이면 hidden column이 저장되어있지 않은 Excel File이라 간주하고 hidden Column에 빈 값을 넣어줌)(hidden이 0인 경우에는 fillhidden은 영향을 끼치지 않음)|\n|options.skipSpace|<String:N>|[defalut: 0] 공백무시 여부(1이면 무시 0이면 포함)|\n|options.insertColumns|<Array:N>|radio, checkbox와 같은 컬럼을 엑셀에서 받아 오지 않고, 사용자 컬럼 설정 으로 업로드 ( 데이터 구조 : [ { columnIndex:1, columnValue:\"1\" } ] )|\n|options.popupUrl|<String:N>|업로드시에 호출할 popup의 url|\n|options.instanceBind|<String:N>|[defalut: false] grid에 instance ref가 걸려 있을 경우 instance 갱신 여부|\n|options.features|<String:N>|upload화면이 뜰 때 string 형식의 스타일 정보. 지정되지 않은경우 upload창이 기본 스타일로 생성|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar options = {\n    type:               \"1\",\n    sheetNo:            0,\n    startRowIndex:      3,\n    startColumnIndex:   0,\n    headerExist:        \"1\",\n    footerExist:        \"1\",\n    append:             \"0\",\n    hidden:             \"0\",\n    fillHidden:         \"0\",\n    skipSpace:          \"1\"\n};\ngrid1.advancedExcelUpload(options);\n```\n\n"
        },
        "getColumnBackgroundColor": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 배경색을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 배경색을 반환할 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String``` - 해당 열에 지정된 배경색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnBackgroundColor('a'); // returnValue는 a컬럼의 배경색.\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number, readOnly: bool)",
          "!doc": "해당하는 type의 readOnly 속성 값을 param으로 들어온 readOnly값으로 설정합니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - readOnly 속성을 설정할 type (grid, row, column, cell 총 4개)\n\n```rowIndex``` - ```Number:Y``` - readOnly속성을 설정할 행 번호\n\n```colIndex``` - ```Number:Y``` - readOnly속성을 설정할 열 번호\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setReadOnly(\"grid\", true); // 그리드 전체의 readOnly 속성을 true로 적용시킨다.\ngrid1.setReadOnly(\"row\", 0, true); // 첫번째 행의 readOnly 속성을 true로 적용시킨다.\ngrid1.setReadOnly(\"cell\", 0, 4, true); // 첫번째 행에서 다섯번째 열의 cell의 readOnly 속성을 true로 적용시킨다.\n```\n\n"
        },
        "setRowData": {
          "!type": "fn(rowIndex: number, rowData: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 rowData를 넣어줍니다. overwrite가 false인 경우에 행을 만들어서 넣어줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 번호\n\n```rowData``` - ```Object:Y``` - rowIndex에 해당하는 행에 넣을 데이터의 배열\n\n```overwrite``` - ```Boolean:N``` - 덮어쓰는 여부의 옵션 없으면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setCellReadOnly": {
          "!type": "fn(rowIndex: number, colIndex: string, readOnly: bool)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 param으로 들어온 readOnly값으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly 속성을 설정할 행 번호\n\n```colIndex``` - ```String:Y``` - readonly 속성을 설정할 열 번호 혹은 컬럼 아이디\n\n```readOnly``` - ```Boolean:Y``` - readonly 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellReadOnly(0, 'a', true); // 첫번째 행에서 a컬럼의 readOnly속성을 적용시킨다.\n```\n\n"
        },
        "getDeletedXML": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```XML Element``` - 삭제 상태인 행들의 데이터 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXMLStr = WebSquare.xml.indent(grid1.getDeletedXML()); // returnXMLStr 은 삭제 상태(3,4, D,V)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setRowVisible": {
          "!type": "fn(rowIndex: number, flag: bool)",
          "!doc": "특정 row를 감추거나 보이게 한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - hidden여부를 설정할 row의 index.\n\n```flag``` - ```Boolean:Y``` - 해당 row를 보일지에 대한 여부. true시에는 해당 row를 보이도록 하고 false시에는 감춘다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngrid1.setRowVisible(30, false); // 30번째 row를 hidden시킨다.\n```\n\n"
        },
        "setGridWidth": {
          "!type": "fn(width: number)",
          "!doc": "그리드의 폭을 설정합니다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 변경할 그리드의 폭\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setGridWidth(500); // 그리드의 width를 500px로 설정한다.\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number, disabled: bool)",
          "!doc": "해당하는 type의 disabled 속성 값을 param으로 들어온 disabled값으로 설정합니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - disabled 속성을 설정할 type (grid, row, column, cell 총 4개)\n\n```rowIndex``` - ```Number:Y``` - disabled 속성을 설정할 행 번호\n\n```colIndex``` - ```Number:Y``` - disabled 속성을 설정할 열 번호\n\n```disabled``` - ```Boolean:Y``` - disabled 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setDisabled(\"grid\", true); // 그리드 전체의 disabled 속성을 true로 적용시킨다.\ngrid1.setDisabled(\"row\", 0, true); // 첫번째 행의 disabled 속성을 true로 적용시킨다.\ngrid1.setDisabled(\"cell\", 0, 4, true); // 첫번째 행에서 다섯번째 열의 cell의 disabled 속성을 true로 적용시킨다.\n```\n\n"
        },
        "getDataRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 컬럼의 아이디를 키로 하는 해쉬 형태로 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```Object``` - rowIndex에 해당하는 행의 데이터의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n//첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar dataHash = grid1.getDataRow(0); \nfor(var i in dataHash){\n    alert(  i +  ' : ' + dataHash[i] );\n}                   \n출력되는 데이터는 다음과 같다. \na : 20120101\nb : 23456\nc : Inswave\nd : WebSquare\ne : sample\n```\n\n"
        },
        "clearRowVisible": {
          "!type": "fn()",
          "!doc": "setRowVisible API를 이용하여 hidden처리한 row를 모두 보이게 한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.clearRowVisible(); // setRowVisible로 hidden되었던 모든 row가 보이게 된다.\n```\n\n"
        },
        "multisort": {
          "!type": "fn(options: +Object)",
          "!doc": "option에 따라서 여러개의 열을 동시에 정렬해줍니다.\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - 정렬에 대한 옵션을 JSON형식으로 가지고 있는 object\n\n|property|type|description|\n|:-|:-|:-|\n|options.sortIndex|<String:Y>|정렬해 줄 열의 아이디 혹은 번호. 여러 열을 나열시에 빈칸(space)을 구분자로 한다.|\n|options.sortOrder|<String:Y>|정렬방법 (1:오름차순 -1:내림차순). 여러 열에 대한 각각의 정렬방법을 나열시에 빈칸(space)을 구분자로 한다.|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar options = {};\noptions.sortIndex = \"category member\";\noptions.sortOrder = \"1 1\";\ngrid1.multisort( options );\n category컬럼의 카테고리를 먼저 오름차순으로 정렬 한 후, 동일 분류에 대하여 member컬럼의 회원 수를 오름차순으로 정렬한다.\n multisort의 경우, dataType을 고려한 정렬이 가능하다.\n```\n\n"
        },
        "setColumnWidth": {
          "!type": "fn(colIndex: string, size: number)",
          "!doc": "지정한 컬럼의 폭을 변경합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 폭을 변경할 column의 index\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnWidth(\"a\", 100); // id가 \"a\"인 컬럼의 width를 100px로 변경한다.\n```\n\n"
        },
        "rowMoveUpFiltered": {
          "!type": "fn(rowIndex: number)",
          "!doc": "화면에 보여지는 정렬된 순서를 기준으로 rowIndex에 해당하는 행을 하나 위로 올려줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_5.4854B.20230323.080754\n\n**Sample:**\n\n```javascript\ngrid1.rowMoveUpFiltered(1); // 두 번째 행(rowIndex = 1)을 한 칸 위로 이동, 즉 첫 번째 행과 두 번째 행의 위치가 뒤바뀜\n```\n\n"
        },
        "getHeaderValue": {
          "!type": "fn(headerId: string)",
          "!doc": "헤더의 값을 반환합니다. 안 쪽에 nobr태그가 있는 경우에는 text부분까지 찾아서 반환합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 아이디\n\n**Return:**\n\n```String``` - header가 가지고 있는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getHeaderValue('hName'); // id가 'hName' 헤더 셀의 값.\n```\n\n"
        },
        "setColumnOrder": {
          "!type": "fn(columnOrderArray: +Object)",
          "!doc": "주어진 array를 기준으로 하여 그리드의 컬럼 순서를 재 설정합니다.\n\n**Parameters:**\n\n```columnOrderArray``` - ```Array:Y``` - 컬럼의 순서를 차례로 담은 배열(컬럼 index와 id 모두 사용 가능)\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeCellsFixedRows": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "fixedRow 영역 내에서 mergeCells를 실행한다.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정한다. 설정 관련 string은 아래와 같다.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제한다.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 merge한다\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 merge한다.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행한다\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행한다.\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지. 이 API를 호출할 경우 keepMerge 속성이 강제로 true가 된다.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한. 이 API를 호출할 경우 fixedRows 속성이 강제로 true가 된다.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "redrawColumn": {
          "!type": "fn(colIndex: string, valid: bool)",
          "!doc": "colIndex에 해당하는 열을 다시 그려줍니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 셀의 열의 Column id 또는 index\n\n```valid``` - ```Boolean:N``` - cell의 inputtype이 select인 경우 selectbox와 cell의 value의 적합성에 따라 데이터를 처리 유무(default:true)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.redrawColumn('c'); // c컬럼을 다시 그린다.\n```\n\n"
        },
        "setCellDisableEdit": {
          "!type": "fn(rowIndex: number, colIndex: number, onoff: string)",
          "!doc": "inputType이 custom인 셀이 autoComplete인 경우 disableEdit 속성을 변경합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```onoff``` - ```String:Y``` - disableEdit 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderColor": {
          "!type": "fn(headerId: string, color: string)",
          "!doc": "그리드의 헤더 셀의 글씨 색상을 지정합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n```color``` - ```String:Y``` - 글씨 색상\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setXML": {
          "!type": "fn(element: +Object, append: string, options: +Object)",
          "!doc": "XML[xml데이터]을 Grid에 넣거나 추가합니다. (행의 상태는 초기상태인 R로 변경됩니다.)\n\n**Parameters:**\n\n```element``` - ```XML Document:Y``` - 그리드 데이터를 갖고 있는 XML\n\n```append``` - ```String:N``` - 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능]\n\n```options``` - ```Object:N``` - JSON형태로 저장된 instanc ref 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.ref|<String:Y>|ref로 지정할 xpath|\n|options.baseNode|<String:N>|그리드 데이터 xml의 반복 node이전까지의 xpath|\n|options.repeatNode|<String:N>|그리드 데이터 xml의 반복 node xpath|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nModel에 bind된 데이터가 다음과 같다.\n<gridData rowCount=\"20\">\n    <vector>\n        <image value=\"/image/0001.jpg\" />\n        <name value=\"해외펜팔카페 Renaissance 입니다.\" />\n        <category value=\"펜팔, 해외펜팔\" />\n        <member value=\"23159\" />\n        <admin value=\"RS클레아\" />\n        <grade value=\"#g1\" />\n        <since value=\"20111114\" />\n    <\/vector>\n    <vector>\n        <image value=\"/image/0002.jpg\" />\n        <name value=\"RH- 혈액형. 특별한 사람들\" />\n        <category value=\"RH-, 희귀혈액형\" />\n        <member value=\"8049\" />\n        <admin value=\"서울 아트\" />\n        <grade value=\"#g2\" />\n        <since value=\"20070722\" />\n    <\/vector>\n    (중략)...\n<\/gridData>\ngrid의 baseNode 속성은 gridData, repeatNode 속성은 vector, valueNode 속성은 value로 되어 있으며, 각 그리드 셀의 id는 repeatNode 하위의 노드명(예:image, name 등)과 같다.\n아래와 같이 setXML을 이용하여 그리드에 기존 데이터를 삭제하고 xmlDoc를 추가할 수 있다.\nvar xmlDoc = WebSquare.ModelUtil.findInstanceNode( \"gridData\" );\ngrid1.setXML (xmlDoc, false);\n```\n\n"
        },
        "removeColumnFilter": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열에 적용된 filter를 삭제합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - filter를 삭제할 열 번호 혹은 컬럼 아이디\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.removeColumnFilter( 'c' ); // c컬럼에 적용된 필터링을 해제한다.\n여러 컬럼에 setColumnFilter를 사용한 경우, 해제되지 않는 filter의 operationType에 유의하여야 한다.\n```\n\n"
        },
        "setHeaderDisabled": {
          "!type": "fn(headerId: string, disabled: bool)",
          "!doc": "disabled가 true이면 headerId에 해당하는 헤더를 disalbled시켜줍니다. false이면 disabled을 풀어줍니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 아이디\n\n```disabled``` - ```Boolean:Y``` - header의 disabled 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setHeaderDisabled(\"hName\", true); // id가 'hName'인 헤더 셀을 disabled 시킨다.\n```\n\n"
        },
        "setGridHeight": {
          "!type": "fn(height: number)",
          "!doc": "그리드의 높이를 설정합니다.\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - 변경할 그리드의 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setGridHeight(500); // 그리드의 height를 500px로 설정한다.\n```\n\n"
        },
        "getTotalRow": {
          "!type": "fn()",
          "!doc": "행의 개수를 반환 한다.\n\n**Return:**\n\n```Number``` - 행의 개수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowReadOnly": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행에 적용된 readonly속성 값을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly속성을 가져올 행 번호\n\n**Return:**\n\n```Boolean``` - 해당 행에 적용된 readonly속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowReadOnly(0); // returnValue는 첫번째 행에 적용된 readOnly값.\n```\n\n"
        },
        "setSummary": {
          "!type": "fn(str: string)",
          "!doc": "그리드 테이블의 summary 값을 설정합니다.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - summary 값에 설정될 string\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnFilter": {
          "!type": "fn(filterOptions: +Object)",
          "!doc": "colIndex에 해당하는 열에 filter를 적용합니다.\n\n**Parameters:**\n\n```filterOptions``` - ```Object:Y``` - filter를 적용할 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|filterOptions.type|<String:Y>|필터 타입(\"func\", \"regExp\")|\n|filterOptions.colIndex|<String:Y>|적용할 그리드 컬럼 index 또는 컬럼 id|\n|filterOptions.key|<String:Y>|필터 적용 키|\n|filterOptions.condition|<String:Y>|이전 필터 데이터와 머지 조건(AND 혹은 OR)|\n|filterOptions.param|<Object:Y>|사용자 Parameter(사용자 function으로 호출시 넘어감)|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n예제1) row 필터\n//key로 넘어온 문자열에 대해 indexOf를 이용하여 필터링 하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드.\ngrid1.setColumnFilter( {type:'row', colIndex:'a', key:\"영화\", condition:'and'});\na컬럼이 \"영화\"문자가 포함된 행들만 필터링 되어 보인다. \n예제2) func 필터   \n//cellData를 필터링 하여 true/false를 리턴하는 function을 사용자가 구현하여 처리하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드.\ngrid1.setColumnFilter( {type:'func', colIndex:'a', key:function(cellData, param) { if(cellData.indexOf(\"영화\") > -1) { return true; }else{ return false} }, condition:'and',param:{}});\na컬럼이 \"영화\"문자가 포함된 행들만 필터링 되어 보인다. \n예제3) regExp 필터 \n//정규표현식을 이용하여 필터링하는 필터이다. \n//id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드.\ngrid1.setColumnFilter( {type:'regExp', colIndex:'a', key:/20120101|20120102|20120103/gi, condition:'and'});\na컬럼이 20120101 또는 20120102 또는 20120103을 포함하는 문자열으로 필터링한다. 사용자 정규표현식을 key로 넘겨서 처리할 수 있으며, key는 String이 아닌 regExp로 셋팅하여야 한다.\n```\n\n"
        },
        "removeCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "grid 셀에 적용된 사용자 class를 삭제합니다\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getVisibleRowNum": {
          "!type": "fn()",
          "!doc": "현재 그리드에 그려진 row의 수를 반환합니다. (subtotal은 제외)\n\n**Return:**\n\n```Number``` - 현재 그려진 row의 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getVisibleRowNum(); // returnValue는 현재 그리드에 그려진(보이는) 행의 수\n```\n\n"
        },
        "getUncheckedXML": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Xml element``` - data를 저장한 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXML = grid1.getUncheckedXML('a'); // returnXML 은 'a' 컬럼 중 선택되지 않은 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getRowNumVisible": {
          "!type": "fn()",
          "!doc": "rowNumVisible 옵션 값을 반환한다.\n\n**Return:**\n\n```Boolean``` - rowNumVisible 설정 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowStatus": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 상태를 반환합니다. (초기상태:R, 갱신:U, 삽입:C, 삭제:D, 삽입 후 삭제:V)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 상태를 반환할 행 번호\n\n**Return:**\n\n```String``` - 행의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowStatus(0); // 첫 번째 행의 rowStatus 값(문자)를 반환한다.\n```\n\n"
        },
        "getRowVisible": {
          "!type": "fn(rowIndex: number)",
          "!doc": "row의 visible 여부를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - hidden여부를 가져올 row의 index.\n\n**Return:**\n\n```Boolean``` - 해당 row의 visible 여부. 감춰진 상태면 false, 보이는 상태면 true 반환.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.getRowVisible(30); // 30번째 row의 visible 여부를 가져온다.\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getGridReadOnly": {
          "!type": "fn()",
          "!doc": "그리드의 읽기 전용 속성을 반환합니다.\n\n**Return:**\n\n```Boolean``` - 그리드의 읽기 전용 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getGridReadOnly(); // grid의 readOnly 속성이 true인 경우, returnValue는 true이다.\n```\n\n"
        },
        "getCellData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellData(0, \"a\"); // 첫 번째 row, \"a\" column에 해당하는 cell의 displayFormat이 적용되지 않은 실제 데이터를 반환\n```\n\n"
        },
        "setCellDisabled": {
          "!type": "fn(rowIndex: number, colIndex: string, disabled: bool)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 disabled속성 값을 param으로 들어온 disabled값으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled 속성을 설정할 행 번호\n\n```colIndex``` - ```String:Y``` - disabled 속성을 설정할 열 번호 혹은 컬럼 아이디\n\n```disabled``` - ```Boolean:Y``` - disabled 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellDisabled(0, 'a', true); // 첫번째 행에서 a컬럼의 disabled 속성을 적용시킨다.\n```\n\n"
        },
        "getCellReadOnly": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly속성을 가져올 행 번호\n\n```colIndex``` - ```String:Y``` - readonly속성을 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Boolean``` - 해당 셀에 적용된 readonly속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellReadOnly(0, 'a'); // returnValue는 첫번째 행의 a컬럼에 적용된 readOnly값.\n```\n\n"
        },
        "setCellDataType": {
          "!type": "fn(rowIndex: number, colIndex: number, dataType: string)",
          "!doc": "특정 cell의 allowChar 속성을 변경합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```dataType``` - ```String:Y``` - 변경하려는 dataType 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "rowMoveDownFiltered": {
          "!type": "fn(rowIndex: number)",
          "!doc": "화면에 보여지는 정렬된 순서를 기준으로 rowIndex에 해당하는 행을 하나 아래로 내려줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_5.4854B.20230323.080754\n\n**Sample:**\n\n```javascript\ngrid1.rowMoveDownFiltered(1); // 두 번째 행(rowIndex = 1)을 한 칸 아래로 이동, 즉 두 번째 행과 세 번째 행의 위치가 뒤바뀜\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getColumnDistinctDataArray": {
          "!type": "fn(colIndex: number)",
          "!doc": "해당 colIndex에 존재하는 중복된 항목을 제거한 data를 배열을 정렬하여 보여줍니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` -\n\n**Return:**\n\n```Object``` - data를 저장한 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedXML": {
          "!type": "fn()",
          "!doc": "변경(삽입, 갱신, 삭제) 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - 변경(삽입, 갱신, 삭제) 행들의 데이터 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXML = grid1.getModifiedXML(); // returnXML 은 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 데이터 XML.\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "getMergedInfo": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "특정 셀의 병합여부 및 병합 처음과 마지막 cell에 대한 row Index와 col Index를 리턴한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 row Index\n\n```colIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 column Index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.getMergedInfo(0, 0); // (0, 0)의 병합여부 및 처음과 마지막 cell에 대한 index를 리턴한다.\n```\n\n"
        },
        "mergeRow": {
          "!type": "fn(rowIndex: number, flag: bool)",
          "!doc": "데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 행을 제외하기 위해 사용하는 API이다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 자동으로 merge하는 기능을 사용할지 말지를 지정할 대상 row이다.\n\n```flag``` - ```Boolean:Y``` -\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.mergeRow(1, false); // 2번째 row를 data를 통한 merge기능에서 제외한다 .\n grid1.mergeByRow(); // 2번째 row를 제외하고 mergeByRow가 수행된다.\n```\n\n"
        },
        "mergeCells": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "행 또는 열 기준으로 연속적으로 같은 데이터들을 merge한다.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정한다. 설정 관련 string은 아래와 같다.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제한다.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 merge한다\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 merge한다.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행한다\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행한다.\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "modifyUncheckStatus": {
          "!type": "fn(col: string, status: string)",
          "!doc": "col에 해당하는 열의 checkbox가 uncheck된 행의 상태를 status로 변경합니다.\n\n**Parameters:**\n\n```col``` - ```String:Y``` - ckeckbox를 검사할 열 번호 혹은 컬럼 아이디\n\n```status``` - ```String:Y``` - 변결할 상태\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyUncheckStatus('a','D'); // 'a' 컬럼(checkbox)에서 선택되지 않은 행들을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowBackgroundColor": {
          "!type": "fn(rowIndex: number, color: string)",
          "!doc": "rowIndex에 해당하는 행에 param으로 들어온 color를 배경색으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 설정할 행 번호\n\n```color``` - ```String:Y``` - 배경색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowBackgroundColor(0, \"#0000FF\"); // 첫번째 행의 배경색을 파랑으로 한다.\n```\n\n"
        },
        "getHeaderBackgroundColor": {
          "!type": "fn(headerId: string)",
          "!doc": "그리드의 헤더 셀에 적용된 배경색 값을 가져옵니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n**Return:**\n\n```String``` - 그리드의 헤더 셀에 현재 적용된 배경색 값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar headerBackgroundColor = grid1.getHeaderBackgroundColor(\"column2\");\n```\n\n"
        },
        "setCellDisplayFormat": {
          "!type": "fn(rowIndex: number, colIndex: number, displayFormat: string)",
          "!doc": "특정 cell의 allowChar 속성을 변경합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```displayFormat``` - ```String:Y``` - 변경하려는 displayFormat 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeColumnFilterAll": {
          "!type": "fn()",
          "!doc": "모든 열에 적용된 filter를 삭제합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.removeColumnFilterAll(); // 전체 필터링을 해제한다.\n```\n\n"
        },
        "getDataLength": {
          "!type": "fn()",
          "!doc": "현재 화면에 보이는 행의 수를 반환합니다. getRowCount()와 동일.\n\n**Return:**\n\n```number``` - 행의 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getDataLength(); // grid1의 row수를 반환\n```\n\n"
        },
        "deleteRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowInex에 해당하는 행의 상태 값을 삭제로 바꿔줍니다. (row를 삭제하지는 않는다)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제상태로 변경할 행의 번호\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.deleteRow(0); // 첫 번째 row의 rowStatus 값을 delete 상태로 변경. (rowStatusValue: 3, rowStatus: D)\n```\n\n"
        },
        "setColumnDisabled": {
          "!type": "fn(colIndex: string, disabled: bool)",
          "!doc": "colIndex에 해당하는 열에 disabled속성을 param으로 들어온 disabled로 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - disabled속성을 설정할 열 번호 혹은 컬럼 아이디\n\n```disabled``` - ```Boolean:Y``` - disabled속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnDisabled('a', true); // a 컬럼의 disabled 속성을 적용시킨다.\n```\n\n"
        },
        "setColumnReadOnly": {
          "!type": "fn(colIndex: string, readOnly: bool)",
          "!doc": "colIndex에 해당하는 열에 readonly속성을 param으로 들어온 readonly로 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - readonly속성을 설정할 열 번호 혹은 컬럼 아이디\n\n```readOnly``` - ```Boolean:Y``` - readonly속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnReadOnly('a', true); // a 컬럼의 readOnly속성을 적용시킨다.\n```\n\n"
        },
        "getColIdByHeaderId": {
          "!type": "fn(headerId: string)",
          "!doc": "sort에서 주어진 headerId에 해당하는 header를 클릭했을때 참조하는 body의 columnId를 반환한다\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 ID\n\n**Return:**\n\n```String``` - body의 columnId\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColIdByHeaderId(\"hName\"); // returnValue는 headerId에 대응되는 body의 컬럼 아이디.\n```\n\n"
        },
        "getColumnDisabled": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열에 disabled속성 값을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - disabled속성을 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Boolean``` - 해당 열에 적용된 disabled속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnDisabled('a'); // returnValue는 a 컬럼에 적용된 disabled값.\n```\n\n"
        },
        "mergeByColRec": {
          "!type": "fn(options: +Object)",
          "!doc": "mergeByCol을 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByRow를 수행한다.\n\n세로 병합이 더 우선순위가 높다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnReadOnly": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열에 적용된 readonly속성 값을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - readonly속성을 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Boolean``` - 해당 열에 적용된 readonly속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnReadOnly('a'); // returnValue는 a 컬럼에 적용된 readOnly값.\n```\n\n"
        },
        "setCellAllowChar": {
          "!type": "fn(rowIndex: number, colIndex: number, allowChar: string)",
          "!doc": "특정 cell의 allowChar 속성을 변경합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```allowChar``` - ```String:Y``` - 변경하려는 allowChar 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderID": {
          "!type": "fn(header: number)",
          "!doc": "header index로 header id를 찾아옵니다.\n\n**Parameters:**\n\n```header``` - ```Number:Y``` - index\n\n**Since:**\n\n2.0_1.2982B.20130506.153941\n\n**Sample:**\n\n```javascript\ngrid1.getHeaderID( 0 ); // index가 0인 header id를 얻어옵니다.\n```\n\n"
        },
        "undoAll": {
          "!type": "fn()",
          "!doc": "갱신이나 삭제된 행들의 data를 처음 입력된 데이터로 바꿔주고 행의 상태를 초기화 시켜줍니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.undoAll(); // 모든 갱신되거나 삭제된 데이터를 되돌리고 rowStatus를 초기화한다.\n```\n\n"
        },
        "getUnmatchedXML": {
          "!type": "fn(colIndex: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 data를 Xml로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Xml element``` - 범위안에 일치하는 index를 가지고 있는 Xml\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnXMLStr = WebSquare.xml.indent(grid1.getUnmatchedXML( 'c', '영화', true, 0, lastRowIndex )); // returnXMLStr 은 그리드 전체에서 c컬럼의 값이 \"영화\" 가 아닌 행의 데이터 XML 문자열.\n```\n\n"
        },
        "getCellBackgroundColor": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 배경색을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 반환할 행 번호\n\n```colIndex``` - ```String:Y``` - 배경색을 반환할 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String``` - 해당 행에 지정된 배경색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.getCellBackgroundColor(0, 'a'); // returnValue는 첫번째 행 a컬럼의 배경색.\n```\n\n"
        },
        "setFocusedHeaderObj": {
          "!type": "fn(headerId: string)",
          "!doc": "그리드 헤더가 가진 object로 포커스를 이동한다.(selectbox, checkbox, input인 경우)\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 아이디\n\n**Since:**\n\n2.0_1.3761B.20140107.134624\n\n**Sample:**\n\n```javascript\ngrid1.setFocusedHeaderObj(\"headerCol1\"); // 포커스를 해당 헤더가 가진 object로 이동시킨다.\n```\n\n"
        },
        "getUpdatedIndex": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 갱신 상태인 행의 번호의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getUpdatedIndex(); // returnArr는 갱신 상태(1, U)의 행들의 배열.\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "getUnmatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.\n\n**Parameters:**\n\n```matchCol``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```targetCol``` - ```Number:Y``` - 데이터를 가져올 열번호\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - targetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount() ;\nvar returnArr = grid1.getUnmatchedColumnData( 'c', '영화', 'd', true, 0,  lastRowIndex); // returnArr는 c컬럼의 값이 '영화'가 아닌 컬럼의 행 index에 해당하는 d컬럼의 데이터 배열.\n```\n\n"
        },
        "getCellDisabled": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "colIndex와 rowIndex 해당하는 셀의 disabled속성 값을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행 번호\n\n```colIndex``` - ```String:Y``` - disabled속성을 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Boolean``` - 해당 셀에 적용된 disabled속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellDisabled(0, 'a'); // returnValue는 첫번째 행의 a컬럼에 적용된 disabled 값.\n```\n\n"
        },
        "getCellSize": {
          "!type": "fn(row: number, colIndex: string, sizeName: string)",
          "!doc": "셀의 크기 정보(width나 height)를 반환합니다.\n\n**Parameters:**\n\n```row``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n```sizeName``` - ```String:Y``` - 반환할 크기 정보의 이름('width' 또는 'height')\n\n**Return:**\n\n```Number``` - 셀의 크기 정보(width나 height)의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getCellSize(0, 'b', 'width'); // returnValue는 그리드에서 해당 cell의 width 값을 반환.\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(refInfo: +Object)",
          "!doc": "ref 속성을 설정하는 기능\n\n**Parameters:**\n\n```refInfo``` - ```Object:Y``` - JSON형태로 저장된 ref 지정할 xml에 대한 정보\n\n|property|type|description|\n|:-|:-|:-|\n|refInfo.ref|<String:Y>|ref로 지정할 xpath|\n|refInfo.baseNode|<String:N>|그리드 데이터 xml의 반복 node 이전까지의 xpath|\n|refInfo.repeatNode|<String:N>|그리드 데이터 xml의 반복 node xpath|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar refInfo = {\n    ref : \"response/vector2\",\n    baseNode : \"vector2\",\n    repeatNode : \"data\"\n}\ngrid1.setRef(refInfo);\n```\n\n"
        },
        "getAllVisibleData": {
          "!type": "fn()",
          "!doc": "그리드의 현재 보이는 data를 배열로 반환합니다.    (filter까지 적용)\n\n**Return:**\n\n```Object``` - 그리드의 현재 보이는 data (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getAllVisibleData(); // grid1.getAllDisplayData(); 에서 filter를 적용한 것과 같다.\n```\n\n"
        },
        "getVisibleColData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 화면에 보이는(filter나 sort처리된) 데이터를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - colIndex에 해당하는 열의 화면에 보이는 데이터의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr =  grid1.getVisibleColData('a');\n// returnArr는 'a' 컬럼의 데이터 배열으로 filter나 sort처리가 되어 있을 경우, 'a' 컬럼의 getColData('a') 데이터와 차이가 있을 수 있음.\n```\n\n"
        },
        "getColumnID": {
          "!type": "fn(colIndex: number)",
          "!doc": "그리드의 컬럼 index를 입력받아 그에 해당하는 컬럼의 id를 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 그리드 컬럼 index\n\n**Return:**\n\n```String``` - 그리드 컬럼의 id\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnID(0); // 첫 번째 column의 id를 반환한다.\n```\n\n"
        },
        "removeRange": {
          "!type": "fn(startIdx: number, endIdx: number)",
          "!doc": "startIdx와 endIdx사이의 그리드의 모든 행을 삭제하고 가지고 있던 data를 반환합니다.\n\n**Parameters:**\n\n```startIdx``` - ```Number:Y``` - 데이터를 삭제할 범위의 시작 행\n\n```endIdx``` - ```Number:Y``` - 데이터를 삭제할 범위의 끝 행\n\n**Return:**\n\n```Object``` - 삭제된 범위 사이의 데이터 2차원 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 5개 컬럼이 존재하는 그리드.\nvar returnArr = grid1.removeRange(0, 1);\n// returnArr.length는 2이다.\n// returnArr[0].length는 5이다.\n// returnArr[0][0] 은 첫 번째 행의 첫 번째 컬럼의 값.\n// returnArr[1][0] 은 두 번째 행의 첫 번째 컬럼의 값.\n```\n\n"
        },
        "setCellChecked": {
          "!type": "fn(rowIndex: number, colIndex: string, dataValue: bool)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀이 checkbox/radio인 경우 dataValue가 true이면 체크 false이면 uncheck해 줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행의 인덱스\n\n```colIndex``` - ```String:Y``` - 셀의 열의 Column id 또는 index\n\n```dataValue``` - ```Boolean:Y``` - 셀의 체크 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellChecked(0,'a',false); // a컬럼 첫번째 행을 체크해제한다.\n```\n\n"
        },
        "getRowStatusValue": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 상태를 숫자로 반환합니다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 상태를 반환할 행 번호\n\n**Return:**\n\n```Number``` - 행의 상태를 나타내는 숫자 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowStatusValue(0); // 첫 번째 행의 rowStatus 값(숫자)를 반환한다.\n```\n\n"
        },
        "removeRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제할 행 번호\n\n**Return:**\n\n```Object``` - 삭제한 행이 가지고 있던 data배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.removeRow(0); // 첫 번째 행을 삭제한다.\n// returnArr.length는 5이고, returnArr[0]은 첫 번째 셀의 값이 된다.\n```\n\n"
        },
        "setFooterCaption": {
          "!type": "fn(htmlStr: string)",
          "!doc": "그리드 footer 테이블의 caption의 innerHTML 값을 설정합니다.\n\n**Parameters:**\n\n```htmlStr``` - ```String:Y``` - caption의 innerHTML 값으로 설정될 값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFocusedColumnIndex": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀의 colIndex를 반환합니다.\n\n**Return:**\n\n```Number``` - 포커스가 위치한 셀의 colIndex\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getFocusedColumnIndex(); // returnValue는 포커스가 위치한 셀의 colIndex.\n```\n\n"
        },
        "getOriginalCellData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 초기 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 초기 컬럼 번호 혹은 컬럼의 아이디\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 데이터\n\n**Since:**\n\n2.0_1.3260B.20130812.175556\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getOriginalCellData(0, \"a\"); // 초기의 첫 번째 row, \"a\" column에 해당하는 cell의 displayFormat이 적용되지 않은 실제 데이터를 반환\n```\n\n"
        },
        "checkAll": {
          "!type": "fn(colIndex: string, dataValue: string)",
          "!doc": "체크 박스로 이루어진 열을 한번에 체크하거나 언체크합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 체크 박스 열의 column id 또는 index\n\n```dataValue``` - ```String:Y``` - 열의 체크박스의 true값 또는 false값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.checkAll('a', true); // 'a' 컬럼의 checkbox가 모두 선택된다.\n```\n\n"
        },
        "getCellInputType": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 inputType을 리턴합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar inputType;\ninputType = grid1.getCellInputType(0, \"a\"); // 첫 번째 row, \"a\" column에 해당하는 cell의 inputType을 리턴\n```\n\n"
        },
        "getDeletedIndex": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제 상태인 행의 번호의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getDeletedIndex(); // returnArr는 삭제 상태(3,4, D,V)의 행들의 배열.\n```\n\n"
        },
        "saveCSV": {
          "!type": "fn(options: +Object)",
          "!doc": "그리드의 데이터를 CSV 파일로 저장합니다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 csv 다운로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|[default: csvfile.csv] 저장 될 파일 이름|\n|options.type|<String:N>|[default: 1] Grid 저장 형태 (0이면 데이터 형태,1이면 표시 방식)|\n|options.delim|<String:N>|[default: ;] CSV 파일에서 데이터를 구분할 구분자|\n|options.removeColumns|<String:N>|[default: 없음] 저장 하지 않을 columns index, 여러컬럼인 경우 콤마(,)로 구분해서 정의 한다.|\n|options.header|<String:N>|[default: 1] Grid의 숨겨진 Column에 대한 저장 여부(0이면 저장 하지 않음,1이면 저장)|\n|options.hidden|<Number:N>|[defalut: 0] Grid의 숨겨진 Column에 대한 저장 여부(0이면 저장 하지 않음,1이면 저장)|\n|options.checkButton|<String:N>|[default: 1] Grid의 Control(Check, Radio, Button) Column에 대해 히든 여부 (0이면 control Coliumn히든,1이면 보여줌)|\n|options.saveList|<Array:N>|[default: 없음] hidden에 관계없이 저장할 column id들의 array|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar colArr = [];\ncolArr[0] = \"name\";\ncolArr[1] = \"corp\";\n  \nvar options = {\n  fileName:           \"saveCSV.csv\",\n  type:               \"1\", \n  delim:              \";\",\n  saveList:           colArr\n};\ngrid1.saveCSV(options);\n```\n\n"
        },
        "setFocusedMultiCell": {
          "!type": "fn(startRow: number, startCol: number, endRow: number, endCol: number)",
          "!doc": "직사각형 영역만큼 여러 cell에 focus를 준다.\n\n**Parameters:**\n\n```startRow``` - ```Number:Y``` - 포커스영역 시작지점의 row값. 즉, 포커스 영역 왼쪽 최상단 셀의 rowIndex.\n\n```startCol``` - ```Number:Y``` - 포커스영역 시작지점의 column값. 즉, 포커스 영역 왼쪽 최상단 셀의 colIndex\n\n```endRow``` - ```Number:Y``` - 포커스영역 종료지점의 row값. 즉, 포커스 영역 우측 최하단 셀의 rowIndex\n\n```endCol``` - ```Number:Y``` - 포커스영역 종료지점 column값. 즉, 포커스 영역 우측 최하단 셀의 colIndex\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.setFocusedMultiCell(3,2,4,3);\n // 실행결과 : (3,2), (3,3), (4,2), (4,3)셀이 포커스 처리된다.\n```\n\n"
        },
        "modifyRowStatus": {
          "!type": "fn(rowIndex: number, status: string)",
          "!doc": "rowIndex에 해당하는 행의 상태를 param으로 입력받은 상태로 변경 합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 상태를 변경할 행 번호\n\n```status``` - ```String:Y``` - 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyRowStatus(0, 'D'); // 첫번째 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "setFooterData": {
          "!type": "fn(footerId: string, data: string)",
          "!doc": "footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다.\n\n**Parameters:**\n\n```footerId``` - ```String:Y``` - footer의 아이디 혹은 인덱스\n\n```data``` - ```String:Y``` - footer에 넣을 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setFooterData(\"column1\", \"합계\");\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "readCSV": {
          "!type": "fn(options: +Object)",
          "!doc": "csv 파일을 읽어 그리드의 데이터를 설정합니다. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 csv 업로드 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.type|<String:N>|Grid 저장 형태 (0이면 데이터 형태,1이면 표시 방식)|\n|options.header|<String:N>|Grid header 존재 유무 (0이면 header row수를 무시하고 전부 업로드 한다. ,1이면 header row수 만큼 skip한다.)|\n|options.delim|<String:N>|[default:','] CSV 파일에서 데이터를 구분할 구분자|\n|options.escapeChar|<String:N>|CSV 데이터에서 제거해야 되는 문자셋 ( ex) '\\'' )|\n|options.startRowIndex|<Number:N>|[defalut: 0] csv파일에서 그리드의 데이터가 시작되는 행의 번호, startRowIndex가 설정되면, header 설정은 무시된다.|\n|options.append|<String:N>|[defalut: 0] csv파일에서 가져온 데이터를 그리드에 append시킬지 여부(1이면 현재 그리드에 데이터를 추가로 넣어줌 0이면 현재 그리드의 데이터를 삭제하고 넣음)|\n|options.hidden|<Number:N>|Grid의 숨겨진 Column에 대한 저장 여부(0이면 저장하지않음,1이면 저장)|\n|options.fillHidden|<String:N>|[defalut: 0] Grid에 hiddenColumn에 빈 값을 넣을지를 결정하기 위한 int형 숫자(1이면 hidden Column에 빈 값을 저장하지 않음,0이면 hidden column이 저장되어있지 않은 csv File이라 간주하고 hidden Column에 빈 값을 넣어줌)(hidden이 0인 경우에는 fillhidden은 영향을 끼치지 않음)|\n|options.skipSpace|<String:N>|[defalut: 0] 공백무시 여부(1이면 무시 0이면 포함)|\n|options.popupUrl|<String:N>|업로드시에 호출할 popup의 url|\n\n**Since:**\n\n2.0_1.3086B.20130607.174758\n\n**Sample:**\n\n```javascript\nvar options = {\n  type:               \"1\",\n  delim:              \",\",\n  escapeChar:         \"'\",\n  startRowIndex:        1,\n  append:             \"0\",\n  hidden:             \"0\",\n  fillHidden:         \"0\",\n  skipSpace:          \"1\"\n};\ngrid1.readCSV(options);\n```\n\n"
        },
        "undoRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 row의 data를 수정되기전 data로 바꿔주고 행의 상태를 복구합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - data를 변경할 행 번호\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.undoRow(0); // 첫 번째 row의 data를 복구\n```\n\n"
        },
        "getFocusedRowIndex": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀의 rowIndex를 반환합니다.\n\n**Return:**\n\n```Number``` - 포커스가 위치한 셀의 rowIndex\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getFocusedRowIndex(); // returnValue는 포커스가 위치한 셀의 rowIndex.\n```\n\n"
        },
        "modifyRangeStatus": {
          "!type": "fn(from: number, to: number, status: string)",
          "!doc": "from부터 to까지의 범위의 행들의 상태를 param으로 입력받은 상태로 변경 합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 변경할 범위의 시작 행번호\n\n```to``` - ```Number:Y``` - 변경할 범위의  끝 행호\n\n```status``` - ```String:Y``` - 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyRangeStatus(1 , 3, 'D'); // 두번째, 세번째 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getInsertedData": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삽입 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getInsertedData(); // returnArr는 삽입 상태(2, C)의 행들의 데이터 배열.\n```\n\n"
        },
        "refreshColumnItemset": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 itemset을 갱신합니다. inputType이 select인 경우에만 동작합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 갱신할 column의 id 또는 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 grade인 컬럼의 inputType이 select인 경우.\ngrid1.refreshColumnItemset('grade'); // grid의 select 컬럼이 참조하는 itemSet이 변경된 경우, grid에 다시 반영한다.\n```\n\n"
        },
        "getMerged": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "특정 셀의 병합여부를 리턴한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 row Index\n\n```colIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 column Index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.getMerged(0, 0); // (0, 0)의 병합여부를 리턴한다.\n```\n\n"
        },
        "getColumnColor": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 글자색을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 글자색을 반환할 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String``` - 행당 열에 글자색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnColor('a'); // returnValue는 a컬럼의 글자색.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "getDeletedData": {
          "!type": "fn()",
          "!doc": "삭제 상태인 행들을 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삭제 상태인 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getDeletedData(); // returnArr는 삭제 상태(3,4, D,V)의 행들의 데이터 배열.\n```\n\n"
        },
        "undeleteRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowInex에 해당하는 행이 삭제 상태를 취소합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제를 취소할 행번호.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.deleteRow(0); // 첫 번째 row를 delete 상태로 설정.\ngrid1.undeleteRow(0); // 첫 번째 row의 rowStatus의 delete 상태를 취소. (rowStatusValue: 0, rowStatus: R)\n```\n\n"
        },
        "getAllFocusedIndex": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 모든 셀의 rowIndex와 colIndex를 반환합니다.\n\n**Return:**\n\n```Array``` - 포커스가 위치한 모든 셀의 rowIndex와 colIndex의 정보를 가진 array\n\n**Since:**\n\n2.0_1.3520B.20131031.212024\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getAllFocusedIndex(); // returnValue는 포커스가 위치한 모든 셀의 rowIndex와 colIndex의 정보를 가진 array.\n```\n\n"
        },
        "setColumnColor": {
          "!type": "fn(colIndex: string, color: string)",
          "!doc": "colIndex에 해당하는 행에 param으로 들어온 color를 글자색으로 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 글자색을 설정할 열 번호 혹은 컬럼 아이디\n\n```color``` - ```String:Y``` - 글자색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnColor('a', '#0000FF'); // a컬럼의 글자색을 파랑으로 설정한다.\n```\n\n"
        },
        "removeRows": {
          "!type": "fn(rowIndexArr: +Object)",
          "!doc": "rowIndexArr배열에 저장된 index에 해당하는 행들을 삭제하고 가지고 있던 data들을 반환합니다.\n\n**Parameters:**\n\n```rowIndexArr``` - ```Object:Y``` - 삭제할 행들의 번호를 저장하는 배열\n\n**Return:**\n\n```Object``` - 삭제한 행들이 가지고 있던 data(2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// \"a\" 컬럼은 inputType이 checkbox이며 첫 번째, 세 번째 행이 선택되어 있는 상태\nvar rmArr = grid1.getCheckedIndex('a');\nvar returnArr = grid1.removeRows(rmArr);\n// rmArr[0] = 0 이고, rmArr[1] = 2이다.\n// returnArr.length는 2이다.\n// returnArr[0].length는 5이다.\n// returnArr[0][0]은 첫 번째 행의 첫 번째 컬럼의 값.\n// returnArr[1][0]은 세 번째 행의 첫 번째 컬럼의 값.\n```\n\n"
        },
        "getFooterStyle": {
          "!type": "fn(footerId: number, style: string)",
          "!doc": "그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져옵니다.\n\n**Parameters:**\n\n```footerId``` - ```Number:Y``` - 그리드 컬럼의 인덱스\n\n```style``` - ```String:Y``` - 가져올 스타일 속성\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\ngrid1.getFooterStyle(\"a\", \"background-color\"); // id가 \"a\"인 컬럼의 \"background-color\"속성값을 가져옵니다.\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCaption": {
          "!type": "fn(htmlStr: string)",
          "!doc": "그리드 테이블의 caption의 innerHTML 값을 설정합니다.\n\n**Parameters:**\n\n```htmlStr``` - ```String:Y``` - caption의 innerHTML 값으로 설정될 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowDisabled": {
          "!type": "fn(rowIndex: number, disabled: bool)",
          "!doc": "rowIndex에 해당하는 행의 disabled속성을 param으로 들어온 disabled로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 설정할 행 번호\n\n```disabled``` - ```Boolean:Y``` - disabled속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowDisabled(0, true); // 첫번째 행의 disabled 속성을 적용시킨다.\n```\n\n"
        },
        "rowMoveDown": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행을 하나 아래로 내려줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 하나 아래로 내려줄 행 번호\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.rowMoveDown(1); // 두 번째 행(rowIndex = 1)을 한 칸 아래로 이동, 즉 두 번째 행과 세 번째 행의 위치가 뒤바뀜\n```\n\n"
        },
        "setStyleAll": {
          "!type": "fn(styleObj: +Object)",
          "!doc": "그리드의 스타일을 지정하는 함수.\n\n**Parameters:**\n\n```styleObj``` - ```JSON:Y``` - 스타일을 설정할 세부 설정을 담은 객체\n\n|property|type|description|\n|:-|:-|:-|\n|styleObj.styleName|<String:Y>|설정할 스타일의 이름. \"background-color\" 와 같은 표기법을 사용한다.|\n|styleObj.styleValue|<String:Y>|설정할 스타일의 값.|\n|styleObj.type|<String:Y>|스타일을 설정할 영역을 row, column, cell 단위로 지정한다. [\"row\", \"column\", \"cell\"] 중 하나를 사용한다.|\n|styleObj.target|<String:N>|스타일을 설정할 영역을 제한하는 설정. [\"fixed\", \"data\", \"all\"] 중 하나를 사용한다. 기본값은 \"all\"이다. \"fixed\"는 고정된 영역, \"data\"는 고정되지 않은 영역이다.|\n|styleObj.rowIndex|<Number:N>|스타일을 설정할 영역에 해당하는 row값. type이 \"row\" 또는 \"cell\"인 경우 필수로 입력해야 한다.|\n|styleObj.colIndex|<Number:N>|스타일을 설정할 영역에 해당하는 column값. type이 \"column\" 또는 \"cell\"인 경우 필수로 입력해야 한다.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n <w2:grid id='grid1' fixedColumn='4'/> column수는 8개라고 가정.\n var styleObj = {\"styleName\" : \"background-color\", \"styleValue\" : \"red\", \"type\" : \"row\", \"target\" : \"data\", \"rowIndex\" : 5}\n grid1.setStyleAll(styleObj);\n // 실행결과 : 5번 row 중에서 고정되지 않은 영역, 즉 (5,4),(5,5),(5,6)(5,7) cell의 배경색이 red가 된다.\n```\n\n"
        },
        "setRowStatusColumnWidth": {
          "!type": "fn(size: number)",
          "!doc": "rowStatus컬럼의 폭을 변경합니다.\n\n**Parameters:**\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowStatusColumnWidth(100); // rowStatus 컬럼의 width를 100px로 변경한다.\n```\n\n"
        },
        "setColumnVisible": {
          "!type": "fn(colIndex: string, colVisible: bool)",
          "!doc": "주어진 column의 hidden 여부를 설정한다\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 그리드의 hidden 여부를 설정한 column의 ID\n\n```colVisible``` - ```Boolean:Y``` - 해당 column을 보일지 여부(true인 경우 해당 column을 표시하고 false인 경우는 숨김)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnVisible('a', false); // a컬럼을 hidden시킨다.\n```\n\n"
        },
        "rowMoveUp": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행을 하나 위로 올려줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 하나 위로 올려줄 행 번호\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.rowMoveUp(1); // 두 번째 행(rowIndex = 1)을 한 칸 위로 이동, 즉 첫 번째 행과 두 번째 행의 위치가 뒤바뀜\n```\n\n"
        },
        "getRowXML": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 번호\n\n**Return:**\n\n```XML Element``` - 행의 XML 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnXMLStr = WebSquare.xml.indent(grid1.getRowXML(0));\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnXMLStr은 다음과 같다.\n<vector status=\"0\" statusValue=\"R\" id=\"0\">\n    <a value = \"20120101\"/>\n    <b value = \"23456\"/>\n    <c value = \"Inswave\"/>\n    <d value = \"WebSquare\"/>\n    <e value = \"sample\"/>\n<\/vector>\n```\n\n"
        },
        "getModifiedIndex": {
          "!type": "fn()",
          "!doc": "추가나 삭제 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 추가나 삭제 상태인 행의 번호의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getModifiedIndex(); // returnArr는 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 배열.\n```\n\n"
        },
        "getUncheckedData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - data를 저장한 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getUncheckedData('a'); // returnArr는 'a' 컬럼 중 선택되지 않은 행의 데이터 배열.\n```\n\n"
        },
        "setTopRowIndex": {
          "!type": "fn(topRowIndex: number)",
          "!doc": "그리드의 세로 스크롤 위치를 이동하여 최상단에 topRowIndex에 해당하는 row가 위치하도록 조정합니다.\n\n**Parameters:**\n\n```topRowIndex``` - ```Number:Y``` - 최상단에 위치할 rowIndex\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\ngrid1.setTopRowIndex(0); // 그리드의 세로 스크롤을 맨 위로 이동하여 최상단에 rowIndex가 0인 row가 위치하도록 조정\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getModifiedData": {
          "!type": "fn()",
          "!doc": "변경(삽입, 갱신, 삭제) 행들의 데이터를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 변경(삽입, 갱신, 삭제) 행들의 데이터 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getModifiedData(); // returnArr는 갱신, 삽입, 삭제 상태(1,2,3, U,C,D)의 행들의 데이터 배열.\n```\n\n"
        },
        "reform": {
          "!type": "fn()",
          "!doc": "그리드의 originalData를 현재의 데이터로 바꿔주고 모든 행의 상태를 초기화합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.reform(); // 모든 행의 상태가 초기상태 (0, R)로 변경된다.\n```\n\n"
        },
        "mergeByCol": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 column 내에서 같은 데이터가 연속적으로 나타나는경우 이들을 모두 병합한다. (세로병합)\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCustomFormatter": {
          "!type": "fn(colIndex: number, customFormatter: string)",
          "!doc": "컬럼의 customFormatter 속성을 설정한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```customFormatter``` - ```String:Y``` - customFormatter 속성에 적용할 Function명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setNoResultMessage": {
          "!type": "fn(message: string)",
          "!doc": "데이터 없음을 표시하기한 문자열을 설정합니다.\n\n**Parameters:**\n\n```message``` - ```String:Y``` - 데이터 없을 때 표시할 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setNoResultMessage('No Result.'); // 데이터가 없을 경우, No Result. 가 표시된다.\n```\n\n"
        },
        "modifyCheckedStatus": {
          "!type": "fn(col: string, status: string)",
          "!doc": "col에 해당하는 열의 checkbox가 check된 행의 상태를 상태로 변경합니다.\n\n**Parameters:**\n\n```col``` - ```String:Y``` - ckeckbox를 검사할 열 번호 혹은 컬럼 아이디\n\n```status``` - ```String:Y``` - 변결할 상태\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyCheckedStatus('a','D'); // 'a' 컬럼(checkbox)에서 선택된 행들을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getColumnIndex": {
          "!type": "fn(colIndex: string)",
          "!doc": "그리드의 컬럼 id를 입력받아 그에 해당하는 컬럼의 index를 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 그리드 컬럼 id\n\n**Return:**\n\n```Number``` - 그리드 컬럼의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnIndex('a'); // id가 \"a\"인 컬럼의 index를 반환한다.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getFooterData": {
          "!type": "fn(footerId: string, display: string)",
          "!doc": "footerId에 해당하는 footer의 값을 반환합니다. inputType이 expression인 경우 계산된 값을 반환합니다.\n\n**Parameters:**\n\n```footerId``` - ```string:Y``` - footer의 아이디 혹은 인덱스\n\n```display``` - ```string:Y``` - 값이 displayData인 경우에 foramt된 값 반환\n\n**Return:**\n\n```string``` - footerId에 해당하는 footer의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nfooter id가 total이며, inputType이 expression, expression은 sum('c')인 경우.\ndataType은 number, displayFormat은 #,###으로 적용되었을 때,\nvar returnValue = grid1.getFooterData('total', 'displayData'));\nreturnValue는 id가 total인 footer의 값(id가 c인 컬럼의 합)에 format이 적용되어 반환.\n예: 23,456\n```\n\n"
        },
        "removeFocusedCell": {
          "!type": "fn()",
          "!doc": "그리드의 셀에 지정되어 있는 모든 포커스를 제거한다\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.removeFocusedCell(); // 그리드의 포커스를 제거한다\n```\n\n"
        },
        "setCellInputType": {
          "!type": "fn(rowIndex: number, colIndex: string, info: +Object)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 inputType을 변경합니다. (inputType=custom일 경우)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n```info``` - ```Object:Y``` - JSON형태로 저장된 inputType에 대한 정보\n\n|property|type|description|\n|:-|:-|:-|\n|info.id|<String:N>|cell id|\n|info.inputType|<String:Y>|지정할 inputType|\n|info.options|<String:N>|inputType에 대한 옵션|\n|info.itemSet|<String:N>|nodeset정보를 담은 객체|\n|info.itemSet.nodeset|<String:N>|nodeset의 xpath 문자열|\n|info.itemSet.label|<String:N>|label의 xpath 문자열|\n|info.itemSet.value|<String:N>|value의 xpath 문자열|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar info = {\n    inputType : \"select\",\n    options : {\n        selectedData : false,\n        viewType: \"icon\",\n        chooseOption: true\n    },\n    itemSet : {\n        nodeset: \"colorNode/vector\", \n        label: \"label/@value\",\n        value: \"value/@value\"\n    }\n}\ngrid1.setCellInputType(0, \"a\", data, info); // 첫 번째 row, \"a\" column에 해당하는 cell의 inputType을 select로 변경하고 값을 data로 바꾼다.\n```\n\n"
        },
        "setFooterDisplayFormat": {
          "!type": "fn(footerId: number, displayFormat: string)",
          "!doc": "그리드의 footerId에 해당하는 footer의 포맷을 설정합니다.\n\n**Parameters:**\n\n```footerId``` - ```Number:Y``` - 그리드 컬럼의 인덱스\n\n```displayFormat``` - ```String:Y``` - 컬럼에 적용할 포맷\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\ngrid1.setFooterDisplayFormat(\"a\", \"#,###\"); // id가 \"a\"인 컬럼의 format을 \"#,###\"로 설정\n```\n\n"
        },
        "setHeaderStyle": {
          "!type": "fn(headerId: string, style: string, value: string)",
          "!doc": "그리드의 headerId에 해당하는 header cell의 스타일 속성을 설정합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - 그리드 header cell의 id, 혹은 index(\"$rowNum\", \"$rowStatus\"로 rowNum, rowStatus 셀 지정 가능)\n\n```style``` - ```String:Y``` - 적용할 스타일 속성\n\n```value``` - ```String:Y``` - 적용할 스타일 속성값\n\n**Since:**\n\n2.0_1.3229B.20130731.095639\n\n**Sample:**\n\n```javascript\ngrid1.setHeaderStyle(\"a\", \"background-color\", \"red\"); // id가 \"a\"인 header cell의 \"background-color\"속성을 \"red\"로 설정\n```\n\n"
        },
        "getColData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 데이터(filter나 sort처리되지 않은)를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 가져올 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - colIndex에 해당하는 열의 데이터의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr =  grid1.getColData('a'); // returnArr는 'a' 컬럼의 데이터 배열.\n```\n\n"
        },
        "mergeFocusedCell": {
          "!type": "fn()",
          "!doc": "현재 포커스된 셀만 병합.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n (6,6),(6,7),(7,6),(7,7)이 현재 포커스된 상태에서 아래를 실행\n grid1.mergeFocusedCell(); \n // 실행결과: (6,6)에 해당하는 셀이 2*2 크기로 병합된다. \n // 즉, (6,6), (6,7), (7,6), (7,7)셀이 병합되며, 병합된 셀은 모두 셀 (6,6)이 갖던 데이터를 갖는다.\n```\n\n"
        },
        "setRowReadOnly": {
          "!type": "fn(rowIndex: number, readOnly: bool)",
          "!doc": "rowIndex에 해당하는 행의 readonly속성을 param으로 들어온 readonly로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly속성을 설정할 행 번호\n\n```readOnly``` - ```Boolean:Y``` - readonly속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowReadOnly(0, true); // 첫번째 행의 readOnly속성을 적용시킨다.\n```\n\n"
        },
        "getRangeData": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to-1 까지의 범위의 행의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안의 data를 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar dataArr = grid1.getRangeData(0, 1); \ndataArr.length 는 5이다. \ndataArr[0] 은 20120101 \ndataArr[1] 은 23456 \n ...\n```\n\n"
        },
        "mergeCell": {
          "!type": "fn(mergeInfo: +Object)",
          "!doc": "동적으로 셀을 병합.\n\n**Parameters:**\n\n```mergeInfo``` - ```JSON:Y``` - 병합 대상 셀의 정보를 포함한 객체 (rowIndex, colIndex, colSpan, rowSpan)\n\n|property|type|description|\n|:-|:-|:-|\n|mergeInfo.rowIndex|<Number:Y>|병합 시작 지점 좌표값 (행 인덱스) (여러 셀 병합 시 왼쪽 최상단 셀의 인덱스를 입력.)|\n|mergeInfo.colIndex|<Number:Y>|병합 시작 지점 좌표값 (열 인덱스)|\n|mergeInfo.colSpan|<Number:Y>|병합할 컬럼의 수|\n|mergeInfo.rowSpan|<Number:Y>|병합할 행의 수|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n grid1.mergeCell({\"rowIndex\" : 3, \"colIndex\" : 2, \"colSpan\" : 2, \"rowSpan\" : 2});\n // 실행결과 : (3,2) 좌표에 위치한 셀이 2*2 크기로 병합된다. 즉, (3,2), (3,3), (4,2), (4,3)셀이 병합되며, 병합된 셀은 모두 (3,2)의 데이터를 갖는다.\n```\n\n"
        },
        "getAllDisplayData": {
          "!type": "fn()",
          "!doc": "그리드의 화면에 보이는 data를 배열로 반환합니다.(filter는 적용하지 않음.)\n\n**Return:**\n\n```Object``` - 그리드의 화면에 보이는 data 배열 (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 전체 20 행이며, 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnArr = grid1.getAllDisplayData();\n```\n```<br />returnArr.length 는 100이다.<br />returnArr[0] 은 첫번째 행의 a컬럼의 값. ( 예: 2012.01.01 )<br />returnArr[1] 은 첫번째 행의 b컬럼의 값.    ( 예: 23,456 )<br />... <br />returnArr[5] 는 두번째 행의 a컬럼의 값. ( 예: 2012.01.02 )<br />...\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setFocusedCell": {
          "!type": "fn(rowIndex: number, colIndex: number, editMode: bool)",
          "!doc": "그리드의 특정 셀로 포커스를 이동한다\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 포커스를 이동한 셀의 rowIndex\n\n```colIndex``` - ```Number:Y``` - 포커스를 이동한 셀의 colIndex\n\n```editMode``` - ```Boolean:Y``` - 포커스를 이동한 후에 editMode로 전환할지 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setFocusedCell(0, 0, true); // 포커스를 0,0의 셀로 이동하고 editMode로 전환한다.\n```\n\n"
        },
        "getCheckedXML": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - checkbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Xml element``` - data를 저장한 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXML = grid1.getCheckedXML('a'); // returnXML은 'a' 컬럼 중 선택된 행들의 데이터 XML.\n```\n\n"
        },
        "setHeaderHide": {
          "!type": "fn(hide: bool)",
          "!doc": "hide가 true이면 header를 숨기고 false이면 나타나도록 합니다.\n\n**Parameters:**\n\n```hide``` - ```Boolean:Y``` - header의 숨김 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setHeaderHide(true); // 그리드의 header를 숨긴다\n```\n\n"
        },
        "getColumnOrder": {
          "!type": "fn(byName: bool)",
          "!doc": "현재 그리드의 컬럼 순서를 배열로 반환합니다. 기본적으로는 컬럼 index를 담은 배열을 반환하고, byName 값에 따라 컬럼 id를 담은 배열을 반환합니다.\n\n**Parameters:**\n\n```byName``` - ```Boolean:N``` - 반환할 컬럼의 순서에서 컬럼 index 대신 컬럼 id를 사용할지 여부\n\n**Return:**\n\n```Array``` - 현재 그리드의 컬럼 순서를 차례대로 담고 있는 배열\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellMaxLength": {
          "!type": "fn(rowIndex: number, colIndex: number, maxLength: number)",
          "!doc": "특정 cell의 maxLength 속성을 변경합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```maxLength``` - ```Number:Y``` - 변경하려는 maxLength 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInsertedXML": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```XML Element``` - 삽입 상태인 행들의 데이터 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXMLStr = WebSquare.xml.indent(grid1.getInsertedXML()); // returnXMLStr 은 삽입 상태(2, C)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "getMatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.\n\n**Parameters:**\n\n```matchCol``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```targetCol``` - ```Number:Y``` - 데이터를 가져올 열번호\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - targetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount() ;\nvar returnArr = grid1.getMatchedColumnData( 'c', '영화', 'd', true, 0,  lastRowIndex); // returnArr는 c컬럼의 값이 '영화'인 컬럼의 행 index에 해당하는 d컬럼의 데이터 배열.\n```\n\n"
        },
        "modifyMatchedStatus": {
          "!type": "fn(colIndex: number, data: string, status: string)",
          "!doc": "col에 해당하는 열의 값과  data가 일치된 행의 상태를 status로 변경합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 검사할 열 번호\n\n```data``` - ```String:Y``` - 일치하는지를 검사할 값\n\n```status``` - ```String:Y``` - 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyMatchedStatus('c', '영화', 'U'); // c 컬럼의 값이 '영화'인 행들의 상태를 갱신 상태로 변경한다.\n```\n\n"
        },
        "getCellColor": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 글자색을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 반환할 행 번호\n\n```colIndex``` - ```String:Y``` - 글자색을 반환할 열 번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String``` - 행당 행의 글자색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.getCellColor(0, 'a'); // returnValue는 첫번째 행 a컬럼의 글자색.\n```\n\n"
        },
        "setData": {
          "!type": "fn(arr: string, append: bool, columnArr: string)",
          "!doc": "1차원 Array형태의 String를 Grid에 추가합니다. (행의 상태는 초기상태인 R로 변경됩니다. 데이터의 순서를 지정해주는 columnArr를 사용할 경우, append는 항상 넣어줘야합니다.)\n\n**Parameters:**\n\n```arr``` - ```String:Y``` - 그리드에 넣을 데이터 스트링(소스 안쪽에서 array로 변환)\n\n```append``` - ```Boolean:N``` - 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능 단, columnArr를 사용할 경우, 생략불가]\n\n```columnArr``` - ```String:N``` - 컬럼 id 스트링(소스 안쪽에서 array로 변환, 해당 id의 순서로 그리드 데이터가 생성됩니다.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n 그리드에 기존 데이터를 삭제하고 gridDataStr를 추가한다.\n var gridData =\"/image/0001.jpg;해외펜팔카페 Renaissance 입니다.;펜팔, 해외펜팔;23159;RS클레아;#g1;20111114;\"\n            +\"/image/0002.jpg;RH- 혈액형. 특별한 사람들;RH-, 희귀혈액형;8049;서울 아트;#g2;20070722\";\n var gridDataStr = gridData.split(\";\");\n grid1.setData(gridDataStr, false);\n array의 length는 그리드 컬럼의 배수가 되어야 하며, array 순서대로 그리드 데이터가 생성된다. \n columnArr의 값이 있을 경우, 해당 컬럼의 순서대로 그리드 데이터가 생성된다.\n grid1.setData(gridDataStr, false, [\"col4\",\"col3\",\"col2\",\"col1\",\"col5\",\"col6\"]);\n```\n\n"
        },
        "getColumnType": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 inputType 속성값을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 체크 박스 Column id 또는 index\n\n**Return:**\n\n```String``` - colIndex해당하는 컬럼의 타입\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnType('a'); // 'a' 컬럼의 inputType을 반환\n```\n\n"
        },
        "getUncheckedIndex": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 Index를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - 행번호를 저장한 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getUncheckedIndex('a'); // returnArr는 선택되지 않은 행의 index 배열.\n```\n\n"
        },
        "getUnmatchedIndex": {
          "!type": "fn(colIndex: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 index를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 index를 가지고 있는 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnArr = grid1.getUnmatchedIndex( 'c', '영화', false, 0, lastRowIndex ); // returnArr는 그리드 전체에서 c컬럼의 값이 \"영화\"를 포함하고 있지 않는 행 Index의 배열.\n```\n\n"
        },
        "setHeaderValue": {
          "!type": "fn(headerId: string, value: string)",
          "!doc": "headerId에 해당 하는 header 컬럼의 value를 설정 합니다. 설정된 value로 header 컬럼이 출력 됩니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 아이디\n\n```value``` - ```String:Y``` - header 컬럼에 출력된 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setHeaderValue('hName' , \"CAFE\"); // id가 hName인 header에 출력문자열을 CAFE로 설정한다.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getAllXML": {
          "!type": "fn()",
          "!doc": "그리드의 모든 data를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - 그리드의 data\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드\nvar returnXMLStr = WebSquare.xml.indent(grid1.getAllXML());\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnXMLStr은 예는 다음과 같다.\n<gridData>\n    <vector status=\"0\" statusValue=\"R\" id=\"0\">\n        <a value = \"20120101\"/>\n        <b value = \"23456\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample\"/>\n    <\/vector>\n    <vector status=\"0\" statusValue=\"R\" id=\"1\">\n        <a value = \"20120102\"/>\n        <b value = \"34567\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample2\"/>\n    <\/vector>\n    ... (중략)\n<\/gridData>\n```\n\n"
        },
        "setGridSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "그리드의 높이와 폭을 설정합니다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 변경할 그리드의 폭\n\n```height``` - ```Number:Y``` - 변경할 그리드의 높이\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setGridSize(500,500); // 그리드의 width와 height을 500px 500px 로 설정한다.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "setNoResultMessageVisible": {
          "!type": "fn(visible: bool)",
          "!doc": "noResultMessageVisible 값을 동적으로 설정한다.\n\n**Parameters:**\n\n```visible``` - ```Boolean:Y``` - [true,false] noResultMessageVisible에 설정될 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "modifyAllStatus": {
          "!type": "fn(status: string)",
          "!doc": "모든 행의 상태를 status으로 변경 합니다.\n\n**Parameters:**\n\n```status``` - ```String:Y``` - 변경할 상태 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"). status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.modifyAllStatus('D'); // 모든 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "getRealRowIndex": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 대한 실제 데이터의 rowIndex를 리턴한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 현재 표시되고 있는 셀의 행 번호\n\n**Since:**\n\n2.0_1.3566B.20131112.110724\n\n**Sample:**\n\n```javascript\ngrid1.getRealRowIndex(3); // 3번째 row에 대한 실제 rowIndex를 리턴한다.\n```\n\n"
        },
        "insertRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행에 새로운 행을 삽입합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행을 새로 삽입할 행번호\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.insertRow(0); // 첫번째 행에 새로운 행을 삽입한다.\n```\n\n"
        },
        "setCellData": {
          "!type": "fn(rowIndex: number, colIndex: string, data: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 값을 data로 바꿔줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n```data``` - ```String:Y``` - 셀에 넣어줄 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellData(0, \"a\", data); // 첫 번째 row, \"a\" column에 해당하는 cell의 값을 data로 바꾼다.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getHeaderColor": {
          "!type": "fn(headerId: string)",
          "!doc": "그리드의 헤더 셀에 적용된 글씨 색상값을 가져옵니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n**Return:**\n\n```String``` - 그리드의 헤더 셀에 적용된 글씨 색상값\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\nvar headerFontColor = grid1.getHeaderColor(\"column2\");\n```\n\n"
        },
        "moveFooterColumn": {
          "!type": "fn(fromIdx: string, toIdx: string)",
          "!doc": "footer 컬럼을 fromIdx 위치로 부터 toIdx 이전의 위치로 이동.\n\n**Parameters:**\n\n```fromIdx``` - ```String:Y``` - 이동 대상 footer 컬럼의 id 또는 index\n\n```toIdx``` - ```String:Y``` - 이동 목적지의 오른쪽에 위치한 footer 컬럼의 id 또는 index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.moveFooterColumn(\"column5, \"column2\");\n // 실행결과: column5가 column2의 바로 왼쪽, 혹은 column2 이전의 위치로 이동한다.\n```\n\n"
        },
        "setCellColor": {
          "!type": "fn(rowIndex: number, colIndex: string, color: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 글자색으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 설정할 행 번호\n\n```colIndex``` - ```String:Y``` - 글자색을 설정할 열 번호 혹은 컬럼 아이디\n\n```color``` - ```String:Y``` - 글자색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setCellColor(0, 'a', '#0000FF'); // 첫번째 행 a컬럼의 글자색을 파랑으로 설정한다.\n```\n\n"
        },
        "getChildrenRowIndexArray": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 자식 행들의 rowIndex를 배열로 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 자식을 찾으려는 행의 번호\n\n**Since:**\n\n2.0_1.3170B.20130708.184524\n\n**Sample:**\n\n```javascript\nvar rowIdx = 0;\nvar childrenArr = grid1.getChildrenRowIndexArray(rowIdx); // 해당 rowIdx가 그리드에 존재하는 경우, childrenArr는 자식 행들의 배열이다.\n```\n\n"
        },
        "mergeByRowRec": {
          "!type": "fn(options: +Object)",
          "!doc": "mergeByRow를 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByCol을 수행한다.\n\n가로 병합이 더 우선순위가 높다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowBackgroundColor": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 배경색을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 반환할 행 번호\n\n**Return:**\n\n```String``` - 해당 행에 지정된 배경색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowBackgroundColor(0); // returnValue는 첫번째 행의 배경색.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "grid 셀에 동적으로 적용한 사용자 class 이름을 반환합니다\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String:Y``` - 셀에 적용된 사용자 class이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowColor": {
          "!type": "fn(rowIndex: number, color: string)",
          "!doc": "rowIndex에 해당하는 행에 param으로 들어온 color를 글자색으로 설정합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 설정할 행 번호\n\n```color``` - ```String:Y``` - 글자색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setRowColor(0, \"#0000FF\"); // 첫번째 행의 글자색을 파랑으로 한다.\n```\n\n"
        },
        "getColumnVisible": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 visible여부를 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - visible여부를 반환할 colunm의 index\n\n**Return:**\n\n```Boolean``` - column의 visible여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getColumnVisible(\"a\"); // returnValue의 값은 id가 \"a\"인 컬럼의 visible 여부\n```\n\n"
        },
        "initGrid": {
          "!type": "fn()",
          "!doc": "실행중인 그리드를 초기화 합니다. 전체 데이터 삭제 후, 필터처리, 컬럼 기본정보(selectbox의 nodeset 등)를 초기화 합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.initGrid();\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getSortableArr": {
          "!type": "fn()",
          "!doc": "header의 각 컬럼이 sortable한지 여부를 array로 반환한다.\n\n**Return:**\n\n```Array``` - 각 컬럼의 sortable 여부를 Boolean으로 이루어진 array 형태로 반환\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeSplitFocusedCell": {
          "!type": "fn()",
          "!doc": "포커스를 받은 셀의 병합을 분리한다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n (6,6),(6,7),(7,6),(7,7)이 병합된 셀에 포커스를 둔 채로 아래를 실행\n grid1.mergeFocusedCell();  \n // 실행결과 : (6,6), (6,7), (7,6), (7,7)셀로 분할.\n```\n\n"
        },
        "setAutoFit": {
          "!type": "fn(options: +Object)",
          "!doc": "그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그려줍니다. autoFit옵션이 lastColumn경우 마지막 컬럼의 폭만 변경이 되고, allColumn이면 전체 컬럼을 폭을 균일하게 변경합니다.\n\n**Parameters:**\n\n```options``` - ```Object:N``` - JSON형태로 저장된 그리드의 setAutoFit 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.type|<String:N>|autoFit옵션 값(lastColumn일 경우 마지막 컬럼의 폭만 변경, allcolumn일 경우 전체 컬럼의 폭을 균일하게 변경)|\n|options.minWidth|<Number:N>|그리드의 최소 넓이의 px값 (lastColumn일때는 적용되지 않음)|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar options = {\n    type : \"allColumn\",\n    minWidth : 480\n}       \ngrid1.setAutoFit( options );\ngrid의 width가 480px보다 작아질 경우에는 각 컬럼의 width의 함은 480px로 고정되며, 480px에 맞게 각 컬럼 width가 변경. \ngrid의 width가 480px보다 큰 경우는 grid의 width에 맞게 각 컬럼 width가 변경.\n```\n\n"
        },
        "getUnmatchedData": {
          "!type": "fn(colIndex: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 data를 배열로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 data를 가지고 있는 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnArr = grid1.getUnmatchedData( 'c', '영화', true, 0, lastRowIndex ); // returnArr는 그리드 전체에서 c컬럼의 값이 \"영화\" 가 아닌 행의 데이터 배열.\n```\n\n"
        },
        "mergeClear": {
          "!type": "fn()",
          "!doc": "동적으로 병합된 셀들의 병합을 모두 해제한다. \n\nmergeCell 또는 mergeCells등의 API에 의해 동적으로 병합된 셀들의 병합만 해제한다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFocusedColumnID": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀이 속한 column의 ID를 반환합니다.\n\n**Return:**\n\n```String``` - 포커스가 위치한 셀이 속한 column의 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getFocusedColumnID(); // returnValue는 포커스가 위치한 셀이 속한 column의 ID.\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "setCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number, className: string)",
          "!doc": "grid 셀에 동적으로 사용자 class를 적용합니다\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n```className``` - ```String:Y``` - td에 적용할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "sort": {
          "!type": "fn(bodyColumnID: string, sortType: number)",
          "!doc": "bodyColumnID에 해당하는 열을 정렬해줍니다.\n\n**Parameters:**\n\n```bodyColumnID``` - ```String:Y``` - 정렬시킬 열의 아이디\n\n```sortType``` - ```Number:Y``` - 정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.sort('date', 0); // date컬럼의 값을 기준으로 오름차순으로 정렬한다.\nsort함수를 사용시, dataType에 상관없이 text로 간주하여 정렬이 된다.\nnumber 타입의 컬럼을 정렬해야 하는 경우에는 multisort 사용을 권장한다.\n```\n\n"
        },
        "getMatchedIndex": {
          "!type": "fn(colIndex: string, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 index를 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Object``` - 범위안에 일치하는 index를 가지고 있는 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnArr = grid1.getMatchedIndex( 'c', '영화', true, 0, lastRowIndex );  // returnArr는 그리드 전체에서 c컬럼의 값이 \"영화\" 인 행 Index의 배열.\n```\n\n"
        },
        "mergeCellsFixedCols": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "fixedColumn 영역 내에서 mergeCells를 실행한다.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정한다. 설정 관련 string은 아래와 같다.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제한다.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 merge한다\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 merge한다.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행한다\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행한다.\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지. 이 API를 호출할 경우 keepMerge 속성이 강제로 true가 된다.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한. 이 API를 호출할 경우 fixedCols 속성이 강제로 true가 된다.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "clearSort": {
          "!type": "fn()",
          "!doc": "그리드의 모든 정렬을 취소해줍니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.clearSort(); // 정렬을 취소한다.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setColumnBackgroundColor": {
          "!type": "fn(colIndex: string, color: string)",
          "!doc": "colIndex에 해당하는 열에 param으로 들어온 color를 배경색으로 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 배경색을 설정할 열 번호 혹은 컬럼 아이디\n\n```color``` - ```String:Y``` - 배경색으로 설정할 색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setColumnBackgroundColor('a', '#0000FF'); // a컬럼의 배경색을 파랑으로 설정한다.\n```\n\n"
        },
        "getInsertedIndex": {
          "!type": "fn()",
          "!doc": "삽입 상태인 행의 번호를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 삽입 상태인 행의 번호의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getInsertedIndex(); // returnArr는 삽입 상태(2, C)의 행들의 배열.\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setGridReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "그리드의 읽기 전용 속성을 설정합니다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - 그리드의 읽기 전용 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setGridReadOnly(true); // 그리드를 읽기 전용으로 설정한다.\n```\n\n"
        },
        "setDrillDownDragDrop": {
          "!type": "fn(value: bool)",
          "!doc": "drillDown컬럼이 포함된 grid 에서 dataDragDrop=true 설정하고 setDrillDownDragDrop함수에 파라미터로 \n\ntrue로 설정값을 넘겨주고 실행 drilldown drag drop이 동작한다.\n\n**Parameters:**\n\n```value``` - ```Boolean:Y``` - drilldown컬럼이 포함된 grid에서 drilldown  drag drop을 동작하게 하는 여부\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.setDrillDownDragDrop(true);\n //실행 결과 : 데이터들이 드래그 앤 드랍으로 이동 가능하다.\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "mergeByRow": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 row 내에서 같은 데이터가 연속적으로 나타나는경우 이들을 모두 병합한다. (가로병합)\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderBackgroundColor": {
          "!type": "fn(headerId: string, color: string)",
          "!doc": "그리드의 헤더 셀의 배경 색상을 지정합니다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n```color``` - ```String:Y``` - background에 지정할 색상\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStartRowNumber": {
          "!type": "fn(startRowNumber: number)",
          "!doc": "startRowNumber에 해당하는 인덱스를 행번호의 시작점으로 설정합니다.\n\n**Parameters:**\n\n```startRowNumber``` - ```Number:Y``` - 행의 번호를 시작할 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setStartRowNumber(9); // 첫 줄이 10부터 나오게 설정.\ngrid1.setStartRowNumber(0); // 다시 첫 줄이 1부터 나오게 설정.\n```\n\n"
        },
        "getAllData": {
          "!type": "fn()",
          "!doc": "그리드의 모든 data를 배열로 반환합니다.\n\n**Return:**\n\n```Object``` - 그리드의 data 배열 (1차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 전체 행이 20 Row인 경우.\nvar returnArr = grid1.getAllData();\nreturnArr.length 는 100이다.\nreturnArr[0] 은 첫번째 행의 a컬럼의 값. \nreturnArr[1] 은 첫번째 행의 b컬럼의 값.\n... \nreturnArr[5] 는 두번째 행의 a컬럼의 값.\n...\n```\n\n"
        },
        "getOpenStatus": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - openStatus를 가져오려는 행의 번호\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\nvar rowIdx = 0;\ngrid1.getOpenStatus(rowIdx); // 해당 rowIdx가 그리드에 존재하는 경우, 해당 행의 openStatus값을 반환한다.\n```\n\n"
        },
        "getSortableStatus": {
          "!type": "fn()",
          "!doc": "sorting된 컬럼의 순서대로 해당 컬럼의 header 정보를 담은 object를 array로 반환한다. sorting된 컬럼이 없을 경우 빈 array를 반환한다.\n\n반환된 array의 각 object는 colID, dataType, sortOrder를 담고 있으며 sortOrder가 1인 경우 오름정렬이고, -1인 경우는 내림정렬이다.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setDisplayFormatter": {
          "!type": "fn(colIndex: number, displayFormatter: string)",
          "!doc": "그리드의 컬럼에 포맷터 함수를 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 그리드 컬럼의 인덱스\n\n```displayFormatter``` - ```String:Y``` - 컬럼에 적용할 포맷터 함수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nfunction setBoldFont(value){\n    return \"<i>\"+value+\"<\/i>\";\n}\ngrid1.setDisplayFormatter(\"a\", setBoldFont); // id가 \"a\"인 컬럼에 italic 효과 추가\n```\n\n"
        },
        "setHeaderSortImage": {
          "!type": "fn(headerId: string, order: number, sortOrd: number)",
          "!doc": "header에 나타나는 sort 이미지를 조절한다\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - 이미지를 조절한 header의 ID\n\n```order``` - ```Number:Y``` - sort 순서를 나타내는 숫자 값(오름차순이면 1, 내림차순이면 -1, sort를 하지 않는 상태이면 0)\n\n```sortOrd``` - ```Number:N``` - multisort의 경우 sort의 우선순위를 나타내는 숫자 값. 하위호환성을 위해 이 값이 설정되어있지않으면 기본값은 0\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 'name' 컬럼을 오름차순으로 sort하며, id가 'hName'인 헤더에 sortImage를 오름차순으로 설정한다.\ngrid1.sort( \"name\", 1 );\ngrid1.setHeaderSortImage('hName', 1);\n// multisort의 경우 세번째 인자로 sort우선순위를 나타내는 숫자값을 전달하면 그림 아래에 해당 숫자가 표시된다.\ngrid1.setHeaderSortImage('column2', -1, 3);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getCheckedData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환합니다. 해당 컬럼이 checkbox가 아닐경우 비어있는 배열을 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - checkbox여부를 검사할 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```Object``` - data를 저장한 배열 (2차원 배열)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getCheckedData('a'); // returnArr는 'a' 컬럼 중 선택된 행의 데이터 배열.\n```\n\n"
        },
        "setFixedColumn": {
          "!type": "fn(fixedColumn: number)",
          "!doc": "고정된 컬럼 영역을 설정합니다.\n\n**Parameters:**\n\n```fixedColumn``` - ```Number:Y``` - 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setFixedColumn(2); // 앞에서 2개 컬럼을 고정시킨다.\n```\n\n"
        },
        "spanAll": {
          "!type": "fn(openFlag: bool)",
          "!doc": "drilldown을 사용하는 grid에서 전체 데이터를 모두 펼치거나 모두 접는다. 인자로 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다.\n\n**Parameters:**\n\n```openFlag``` - ```Boolean||Number:Y``` - [true, false]open 여부, 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.spanAll(true); // 접혀 있는 데이터를 모두 펼친다.\ngrid1.spanAll(2); // depth가 2까지인 데이터를 모두 펼친다.\n```\n\n"
        },
        "getRowIndexByStatus": {
          "!type": "fn(statusStr: string)",
          "!doc": "statusStr과 상태가 일치하는 행의 번호를 배열로 반환합니다.\n\n**Parameters:**\n\n```statusStr``` - ```String:Y``` - 상태가 일치하는 행을 찾기 위한 문자열\n\n**Return:**\n\n```Object``` - statusStr과 상태가 일치하는 행의 번호의 배열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnArr = grid1.getRowIndexByStatus('CUD'); // returnArr 는 그리드에서 삽입, 갱신, 삭제 상태인 행들의 rowIndex 배열.\n```\n\n"
        },
        "isEditing": {
          "!type": "fn()",
          "!doc": "그리드가 현재 편집중 인지 여부를 반환합니다.\n\n**Return:**\n\n```Boolean``` - 그리드가 현재 편집중 인지 여부\n\n**Since:**\n\n2.0_1.3742B.20131231.102003\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeFocusedMultiCell": {
          "!type": "fn(startRow: number, startCol: number, endRow: number, endCol: number)",
          "!doc": "직사각형 영역만큼 cell의 focus를 해제한다.\n\n**Parameters:**\n\n```startRow``` - ```Number:Y``` - 해제할 포커스영역 시작지점의 row값. 즉, 포커스 해제영역 왼쪽 최상단 셀의 rowIndex.\n\n```startCol``` - ```Number:Y``` - 해제할 포커스영역 시작지점의 column값. 즉, 포커스 해제영역 왼쪽 최상단 셀의 colIndex\n\n```endRow``` - ```Number:Y``` - 해제할 포커스영역 종료지점의 row값. 즉, 포커스 해제영역 우측 최하단 셀의 rowIndex\n\n```endCol``` - ```Number:Y``` - 해제할 포커스영역 종료지점 column값. 즉, 포커스 해제영역 우측 최하단 셀의 colIndex\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.removeFocusedMultiCell(3,2,4,3);\n // 실행결과 : (3,2), (3,3), (4,2), (4,3)셀의 포커스가 해제된다. 포커스가 걸려있지 않았던 셀은 아무 동작을 하지 않는다.\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(colIndex: number, displayFormat: string)",
          "!doc": "그리드의 컬럼에 포맷을 설정합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 그리드 컬럼의 인덱스\n\n```displayFormat``` - ```String:Y``` - 컬럼에 적용할 포맷\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\ngrid1.setDisplayFormat(\"a\", \"#,###\"); // id가 \"a\"인 컬럼의 format을 \"#,###\"로 설정\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number)",
          "!doc": "type에 따라 disabled 속성을 반환합니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - disabled 속성을 가져올 type (grid, row, column, cell, all 총 5개)\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행 번호\n\n```colIndex``` - ```Number:Y``` - disabled속성을 가져올 열 번호\n\n**Return:**\n\n```Boolean``` - 해당 type에 적용된 disabled속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getDisabled(\"grid\"); // returnValue는 그리드 전체에 적용된 disabled값.\nvar returnValue = grid1.getDisabled(\"row\", 0); // returnValue는 첫번째 행에 적용된 disabled값.\nvar returnValue = grid1.getDisabled(\"cell\", 0, 4); // returnValue는 첫번째 행의 다섯번째 열의 셀에 적용된 disabled값.\nvar returnValue = grid1.getDisabled(\"all\", 0, 4); // returnValue는 첫번째 행의 다섯번째 열의 셀에 최종적으로 적용된 disabled값.\n```\n\n"
        },
        "getMatchedXML": {
          "!type": "fn(colIndex: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 data를 XML로 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 데이터를 검사할 열번호 혹은 컬럼 아이디\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 번호\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 번호\n\n**Return:**\n\n```Xml element``` - 범위안의 data를 가지고 있는 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar lastRowIndex = grid1.getRowCount();\nvar returnXMLStr = WebSquare.xml.indent(grid1.getMatchedXML( 'c', '영화', true, 0, lastRowIndex )); // returnXMLStr 은 그리드 전체에서 c컬럼의 값이 \"영화\" 인 행의 데이터 XML 문자열.\n```\n\n"
        },
        "getOverflowX": {
          "!type": "fn()",
          "!doc": "그리드의 overflowX의 설정을 반환합니다.\n\n**Return:**\n\n```String``` - 현재 그리드의 overflowX의 설정\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getOverflowX(); // returnValue 값은 현재 그리드의 overflowX 설정 값\n```<br />overflowX 속성값을 설정하지 않은 경우는 기본값은 auto이다.\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "getOverflowY": {
          "!type": "fn()",
          "!doc": "그리드의 overflowY의 설정을 반환합니다.\n\n**Return:**\n\n```String``` - 현재 그리드의 overflowY의 설정\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getOverflowY(); // returnValue 값은 현재 그리드의 overflowY 설정 값\n```<br />overflowY 속성값을 설정하지 않은 경우는 기본값은 auto이다.\n\n"
        },
        "getUpdatedXML": {
          "!type": "fn()",
          "!doc": "갱신 상태인 행들의 데이터를 XML로 반환합니다.\n\n**Return:**\n\n```Xml Element``` - 갱신 상태인 행들의 데이터 XML\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnXMLStr = WebSquare.xml.indent(grid1.getUpdatedXML()); // returnXMLStr 은 갱신 상태(1, U)의 행들의 데이터 XML 문자열.\n```\n\n"
        },
        "getRowColor": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 글자색을 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 반환할 행 번호\n\n**Return:**\n\n```String``` - 행당 행의 글자색\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getRowColor(0); // returnValue는 첫번째 행의 글자색.\n```\n\n"
        },
        "mergeByRestricRow": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 row 내에서 연속적으로 데이터가 같으면서 동시에 자신의 위쪽에 위치한 row가 merge된 경우 해당 row들을 merge한다\n\nn+1행에서 n행을 upperRow으로 지정한 형태이다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음 (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowXML": {
          "!type": "fn(rowIndex: number, rowData: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 rowData를 넣어줍니다. overwrite가 false인 경우에 행을 만들어서 넣어줍니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 번호\n\n```rowData``` - ```XML element:Y``` - 행에 넣을 xml데이터\n\n```overwrite``` - ```Boolean:N``` - 덮어쓰는 여부의 옵션 없으면 false\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nid가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample ) \nbaseNode : gridData , repeatNode : vector , valueNode : value 으로 되어 있다. \nvar xmlStr = '<vector>' +\n    '<a value = \"20120101\"/>' +\n    '<b value = \"23456\"/>' +\n    '<c value = \"Inswave\"/>' +\n    '<d value = \"new WebSquare\"/>' +\n    '<e value = \"new sample\"/>' +\n    '<\/vector>';\nvar xmlDoc = WebSquare.xml.parse(xmlStr);\ngrid1.setRowXML(0, xmlDoc); // grid의 첫번째 행에 xmlDoc의 데이터가 추가된다.\n```\n\n"
        },
        "setBottomRowIndex": {
          "!type": "fn(bottomRowIndex: number)",
          "!doc": "그리드의 세로 스크롤 위치를 이동하여 최하단에 bottomRowIndex 해당하는 row가 위치하도록 조정합니다.\n\n**Parameters:**\n\n```bottomRowIndex``` - ```Number:Y``` - 최하단에 위치할 rowIndex\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\ngrid1.setTopRowIndex(10); // 그리드의 세로 스크롤을 맨 아래로 이동하여 최하단에 rowIndex가 10인 row가 위치하도록 조정\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number)",
          "!doc": "type에 따라 readOnly 속성을 반환합니다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - readOnly 속성을 가져올 type (grid, row, column, cell, all 총 5개)\n\n```rowIndex``` - ```Number:Y``` - readOnly속성을 가져올 행 번호\n\n```colIndex``` - ```Number:Y``` - readOnly속성을 가져올 열 번호\n\n**Return:**\n\n```Boolean``` - 해당 type에 적용된 readOnly속성값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getReadOnly(\"grid\"); // returnValue는 그리드 전체에 적용된 readOnly값.\nvar returnValue = grid1.getReadOnly(\"row\", 0); // returnValue는 첫번째 행에 적용된 readOnly값.\nvar returnValue = grid1.getReadOnly(\"cell\", 0, 4); // returnValue는 첫번째 행의 다섯번째 열의 셀에 적용된 readOnly값.\nvar returnValue = grid1.getReadOnly(\"all\", 0, 4); // returnValue는 첫번째 행의 다섯번째 열의 셀에 최종적으로 적용된 readOnly값.\n```\n\n"
        },
        "setFooterValue": {
          "!type": "fn(footerId: string, data: string)",
          "!doc": "footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다.\n\n**Parameters:**\n\n```footerId``` - ```string:Y``` - footer의 아이디 혹은 인덱스\n\n```data``` - ```string:Y``` - footer에 넣을 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRangeXML": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to-1 까지의 범위의 행의 data를 xml로 반환합니다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 번호\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 번호\n\n**Return:**\n\n```Xml Element``` - rowIndex에 해당하는 행의 xml데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// id가 a,b,c,d,e인 5개 컬럼이 존재하는 그리드에서 a컬럼의 dataType이 date이고 b컬럼의 dataType이 number이며 각각의 displayFormat이 yyyy.MM.dd, #,###인 경우.\n// 첫번째 행의 각 컬럼의 데이터는 다음과 같다. ( 20120101 , 23456 , Inswave , WebSquare , sample )\nvar returnXMLStr = WebSquare.xml.indent(grid1.getRangeXML(0, 1));\nbaseNode : gridData , repeatNode : vector , valueNode : value 일 경우,\nreturnXMLStr은 다음과 같다.\n<gridData>\n    <vector status=\"0\" statusValue=\"R\" id=\"0\">\n        <a value = \"20120101\"/>\n        <b value = \"23456\"/>\n        <c value = \"Inswave\"/>\n        <d value = \"WebSquare\"/>\n        <e value = \"sample\"/>\n    <\/vector>\n<\/gridData>\n```\n\n"
        },
        "getBottomRowIndex": {
          "!type": "fn()",
          "!doc": "현재 그리드에 그려진 최하단 row의 rowIndex를 반환합니다. 그려진 row가 없으면 -1을 반환합니다.\n\n**Return:**\n\n```Number``` - 최하단 row의 rowIndex\n\n**Since:**\n\n2.0_1.2884A.20130401.104932\n\n**Sample:**\n\n```javascript\nvar returnValue = grid1.getBottomRowIndex(); // returnValue는 스크롤 변화에 따라 현재 그리드에 보이는 최하단 행의 index.\n```\n\n"
        }
      },
      "anchor": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "컴포넌트의 disabled 속성을 설정.\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nanchor1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. \n\nDataCollection과 연동시 data:라는 prefix를 반드시 붙여야 함. 명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n//dataMap1의 name key와 anchor1 컴포넌트의 value를 바인딩는 경우:\nanchor1.setRef(\"data:dataMap1.name\");\n\n//InstanceData의 res/userData/name 과 연동:\nanchor1.setRef(\"res/userData/name\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getHref": {
          "!type": "fn()",
          "!doc": "href 속성에 정의 된 값을 반환.\n\n**Return:**\n\n```String``` - href 속성의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// href속성이 정의 되지 않는 경우\nvar returnValue = anchor1.getHref();\n// (반환 값 예시) \"javascript:void(null);\"\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "setHref": {
          "!type": "fn(href: string)",
          "!doc": "href 속성의 값을 설정한다.\n\n**Parameters:**\n\n```href``` - ```String:Y``` - url 정보\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\nanchor1.setHref(\"http://www.inswave.com\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "컴포넌트의 현재 값을 반환.\n\n**Return:**\n\n```String``` - 현재 설정된 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예시)\nvar returnValue = anchor1.getValue();\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "인자로 받은 값을 컴포넌트에 설정.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 설정할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// 기본 Anchor의 경우, 밑줄(underline)이 있는 텍스트를 생성.\nanchor1.setValue(\"WebSquare\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "dataList": {
        "getFilteredRowIndex": {
          "!type": "fn(realRowIndex: number)",
          "!doc": "필터링된 상태의 행 인덱스를 반환.\n\n**Parameters:**\n\n```realRowIndex``` - ```Number:Y``` - 필터링되지 않은 상태의 행 인덱스.\n\n**Return:**\n\n```Number``` - 필터링된 된 상태의 행 인덱스\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setJSON": {
          "!type": "fn(jsonData: +Object, append: string)",
          "!doc": "JSON Data를 설정(set)하거나 추가(append). (행의 상태는 초기상태인 R로 변경됨.)\n\n**Parameters:**\n\n```jsonData``` - ```Array:Y``` - JSON 데이터를 담고 있는 배열\n\n```append``` - ```String:N``` - 추가(append) 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|\"false\"|(기본 값) : DataList의 데이터를 주어진 데이터로 새로 설정(set).|null|\n|\"true\"|기존 DataList의 데이터에 추가(append).|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//JSON 형태의 2건의 list data를 set.\nvar tmpArr = [{\"name\":\"손예진\",\"dept\":\"인사\"},{\"name\":\"전지현\",\"dept\":\"IT\"}];\ndataList1.setJSON( tmpArr );\n```\n\n"
        },
        "getCellAllData": {
          "!type": "fn(realRowIndex: number, colInfo: number)",
          "!doc": "필터링 되지 않은 rowIndex를 기준으로 getCellData를 실행한다\n\n**Parameters:**\n\n```realRowIndex``` - ```Number:Y``` - 필터링되지 않은 기준의 rowIndex\n\n```colInfo``` - ```Number||String:Y``` - 셀의 컬럼 index 혹은 컬럼의 ID\n\n**Return:**\n\n```String``` - 셀의 데이터\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n// 1,2번 행이 filtering되어 감춰진 경우\nvar retVal1 = dataList1.getCellData(3,\"name\"); // dataList에서 5번째 행, name열의 값을 가져온다.\nvar retVal2 = dataList1.getCellAllData(3, \"name\"); // dataList에서 3번째 행, name열의 값을 가져온다.\n```\n\n"
        },
        "getModifiedJSON": {
          "!type": "fn(options: +Object)",
          "!doc": "데이터가 삽입, 갱신, 삭제, 제거 된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 JSON으로 변환하여 1차원 배열에 담아 반환한다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 데이터 변경(삽입, 갱신, 삭제, 제거) 행들의 데이터의 반환 순서를 설정한다.\n\n|property|type|description|\n|:-|:-|:-|\n|options.DB|<Boolean:N>|[default:false, true]서버에서 데이타를 관리 하기 위해 제거된 행(E)을 먼저 반환을 한다.|\n|options.saveRemovedData|<Boolean:N>|[default:true, false]제거된 행(E)을 제외하고 반환을 하려면 false로 설정한다.|\n\n**Return:**\n\n```Array``` - 삽입, 갱신, 삭제된 행들의 JSON 데이터가 담긴 1차원 Array\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnJSON1 = dataList1.getModifiedJSON();\n//return 예시 )\n[\n    { \"dept\": \"\", \"name\": \"\", \"rowStatus\": \"C\" },\n    { \"dept\": \"인사\", \"name\": \"손예진\", \"rowStatus\": \"D\" },\n    { \"dept\": \"인사\", \"name\": \"수정\", \"rowStatus\": \"U\" },\n    { \"dept\": \"홍보\", \"name\": \"송강호\", \"rowStatus\": \"E\" }\n]\n\nvar returnJSON2 = dataList1.getModifiedJSON({saveRemovedData:false});\n//return 예시 )\n[\n    { \"dept\": \"\", \"name\": \"\", \"rowStatus\": \"C\" },\n    { \"dept\": \"인사\", \"name\": \"손예진\", \"rowStatus\": \"D\" },\n    { \"dept\": \"인사\", \"name\": \"수정\", \"rowStatus\": \"U\" }\n]\n```\n\n"
        },
        "getDeletedData": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E,V)인 행들의 데이터가 담긴 2차원 배열.\n\n**Return:**\n\n```Array``` - 삭제 상태인 행들의 2차원 데이터 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getDeletedArray();\n//return 예시 )\n[[ \"서울\" , \"송강호\" ],[ \"서울\" , \"전지현\" ]]\n```\n\n"
        },
        "getRowData": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 배열로 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 index\n\n**Return:**\n\n```Array``` - rowIndex에 해당하는 행의 데이터의 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 이름과 생년월일 컬럼이 정의 된 경우\n\nvar rsData = dataList1.getRowData( 0 );\n//return 예시 ) [\"아이유\", \"19930516\"]\n```\n\n"
        },
        "undeleteRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 삭제 상태(D,V)를 취소하고 직전 상태값으로 변경한다.\n\nremoveRow와 같은 API로 삭제(상태값이 E)한 row는 취소가 되지 않는다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제를 취소할 행 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//1번째 row의 delete 상태를 취소.(직전 상태값으로 변경된다)\ndataList1.undeleteRow(0);\n```\n\n"
        },
        "getFusionChartSimpleData": {
          "!type": "fn(chartType: string, labelNode: string, seriesNode: string, valueNode: string)",
          "!doc": "DataList의 데이터를 fusionChart의 simple모드인 singleSerise, multiSeries 차트의 JSON데이터로 반환한다.\n\n**Parameters:**\n\n```chartType``` - ```String:Y``` - fusionChart의 차트유형\n\n```labelNode``` - ```String:Y``` - fusionChart의 lable 데이터로 사용할 DataList column의 ID값\n\n```seriesNode``` - ```String:Y``` - fusionChart의 series 데이터로 사용할 DataList column의 ID값\n\n```valueNode``` - ```String:Y``` - fusionChart의 value 데이터로 사용할 DataList column의 ID값\n\n**Return:**\n\n```JSON``` - fusionChart_Data JSON으로 변환 된 fusionChart data로 singleSerise와 multiSeries 데이터 형태가 다르다. sample 예시 참조.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 DataList가 정의 되어 있는 경우\n<w2:dataList id=\"dc_chart\" baseNode=\"list\" style=\"\" repeatNode=\"map\">\n    <w2:columnInfo>\n        <w2:column id=\"series\" name=\"series\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"label\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"value\" name=\"value\" dataType=\"number\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <series><![CDATA[상반기]]><\/series>\n            <label><![CDATA[2013]]><\/label>\n            <value><![CDATA[390]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <series><![CDATA[하반기]]><\/series>\n            <label><![CDATA[2013]]><\/label>\n            <value><![CDATA[440]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <series><![CDATA[상반기]]><\/series>\n            <label><![CDATA[2014]]><\/label>\n            <value><![CDATA[420]]><\/value>\n        <\/w2:row>\n        <w2:row>\n            <series><![CDATA[하반기]]><\/series>\n            <label><![CDATA[2014]]><\/label>\n            <value><![CDATA[450]]><\/value>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n//singleSerise chart인 경우\nvar tmpChartData = dc_chart.getFusionChartSimpleData(\"column2D\",\"label\",\"series\",\"value\");\n//return 예시 )\n {\n    \"data\": [\n        { \"label\": \"2013\", \"value\": \"390\" },\n        { \"label\": \"2013\", \"value\": \"440\" },\n        { \"label\": \"2014\", \"value\": \"420\" },\n        { \"label\": \"2014\", \"value\": \"450\" }\n    ]\n}\n\nmultiSeries chart\nvar tmpChartData2 = dc_chart.getFusionChartSimpleData(\"MSColumn2D\",\"label\",\"series\",\"value\");\n//return 예시 )\n{\n    \"categories\": [\n        {\n            \"category\": [ { \"label\": \"2013\" }, { \"label\": \"2014\" } ]\n        }\n    ],\n    \"dataset\": [\n        {\n            \"data\": [ { \"value\": \"390\" }, { \"value\": \"420\" } ],\n            \"seriesname\": \"상반기\"\n        },\n        {\n            \"data\": [ { \"value\": \"440\" }, { \"value\": \"450\" } ],\n            \"seriesname\": \"하반기\"\n        }\n    ]\n}\n```\n\n"
        },
        "removeRows": {
          "!type": "fn(rowIndexArr: +Object)",
          "!doc": "다건의 row를 index가 담긴 배열을 통해 한번에 삭제하고 가지고 있던 data를 2차원 배열로 반환한다.\n\n**Parameters:**\n\n```rowIndexArr``` - ```Array:Y``` - 삭제할 행들의 번호를 저장하는 배열\n\n**Return:**\n\n```Array``` - 삭제한 행들이 가지고 있던 2차원 배열 data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//부서와 이름이 정의 된 dataList의 경우\n\n//4번째와 5번째의 row를 삭제한다.\nvar rsData = dataList1.removeRows([3,4])\n//return 예시 ) [[\"홍보\",\"이광수\"],[\"인사\",\"류승룡\"]]\n```\n\n"
        },
        "deleteRows": {
          "!type": "fn(rowIndexArr: +Object)",
          "!doc": "다건의 row를 index가 담긴 배열을 통해 한번에 삭제(D)로 변경하고 가지고 있던 data를 2차원 배열로 반환한다.\n\n**Parameters:**\n\n```rowIndexArr``` - ```Array:Y``` - 삭제할 행들의 번호를 저장하는 배열\n\n**Return:**\n\n```Array``` - 삭제한 행들이 가지고 있던 2차원 배열 data\n\n**Since:**\n\n5.0_2.3486B.20190213.174135\n\n**Sample:**\n\n```javascript\n//부서와 이름이 정의 된 dataList의 경우\n\n//4번째와 5번째의 row를 삭제한다.\nvar rsData = dataList1.deleteRows([3,4])\n//return 예시 ) [[\"홍보\",\"이광수\"],[\"인사\",\"류승룡\"]]\n```\n\n"
        },
        "getVoidIndex": {
          "!type": "fn()",
          "!doc": "삽입 후 삭제 상태(4,V)인 행의 index를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 삽입 후 삭제 상태(4,V)인 행의 index를 담은 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnArr = dataList1.getVoidIndex();\n//return 예시 - 총 2건 ) [0,1]\n```\n\n"
        },
        "removeAll": {
          "!type": "fn()",
          "!doc": "DataList의 모든 데이터를 삭제하고 삭제 된 Data를 1차원 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 삭제한 행들의 데이터가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//이름과 부서가 정의 된 DataList의 경우\n\nvar returnArr = dataList1.removeAll();\n//return 예시 - 총 5건 삭제 )[\"인사\", \"손예진\", \"홍보\", \"송강호\", \"IT\", \"전지현\", \"인사\", \"류승룡\", \"홍보\", \"이광수\"]\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "dataList의 이벤트를 동적으로 할당한다.\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 동적으로 할당할 이벤트의 이름\n\n```function``` - ```Function:Y``` - 동적으로 할당 할 이벤트의 핸들러 함수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList의 id가 dataList1 인 경우\ndataList1.bind(\"onsetdata\", function(e){ alert(\"date setting\");});\n\n//event 함수를 commObj.fn_dcDataChage 으로 정의 한 경우\ndataList1.bind(\"oncelldatachange\", commObj.fn_dcDataChage );\n```\n\n"
        },
        "getRecursiveRowIndex": {
          "!type": "fn()",
          "!doc": "depthColumn 사용 시 Row Index 하위의 모든 Row의 인덱스를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - Row Index 하위의 모든 Row의 인덱스 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "rowMoveDown": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 row을 하나 아래로 내려준다. dataList가 drillDown grid에 바인된 경우 비권장.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//두 번째 row를 한 칸 아래로 이동 ( 두번째 row와 세번째 row의 위치가 바뀜 )\ndataList1.rowMoveDown(1);\n```\n\n"
        },
        "getUpdatedData": {
          "!type": "fn()",
          "!doc": "갱신 상태(1,U)인 행들의 배열 데이터를 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 갱신 상태(1,U)인 행들의 배열 데이터 (2차원 배열)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dept와 name이 정의 된 DataList의 경우\n\n//갱신 상태(U)의 데이터 반환 (총2건)  \nvar rsData = dataList1.getUpdatedData();\n//return 예시 ) [[\"인사\",\"수정\"],[\"홍보\",\"수정2\"]]\n```\n\n"
        },
        "getVoidArray": {
          "!type": "fn()",
          "!doc": "삽입 후 삭제 상태(4,V)인 행들의 정보가 담긴 JSON을 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnJsonArr = dataList1.getVoidArray();\n//return 예시 )\n{\n    \"columnInfo\":[\"dept\",\"name\"]\n    ,\"data\":[\"\",\"\"]\n}\n```\n\n"
        },
        "getMatchedData": {
          "!type": "fn(colInfo: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 data를 2차원 배열로 반환한다.\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 또는 컬럼 ID\n\n```dataValue``` - ```String:Y``` - colIndex해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:N``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - 검색 된 row의 배열 데이터가 담긴 배열.(2차원 배열)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getMatchedData(\"dept\",\"인사\");\n//return 예시 ) [[\"인사\",\"손예진\"],[\"인사\",\"류승룡\"]]\n```\n\n"
        },
        "getOnlyDeletedXML": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E)행들의 데이터를 XML로 반환한다.\n\n**Return:**\n\n```XML``` - 삭제 상태인 행들의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getOnlyDeletedXML()\n\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"3\">\n        <dept>홍보<\/dept>\n        <name>송강호<\/name>\n        <rowStatus statusValue=\"3\">D<\/rowStatus>\n    <\/map>\n    <map index=\"removed\">\n        <dept>IT<\/dept>\n        <name>전지현<\/name>\n        <rowStatus statusValue=\"5\">E<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "rowMoveUp": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 row를 하나 위로 올려준다. dataList가 drillDown grid에 바인된 경우 비권장.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//두 번째 row를 한 칸 위로 이동 ( 첫번째 row와 두번째 row의 위치가 바뀜 )\ndataList1.rowMoveUp(1);\n```\n\n"
        },
        "getRowXML": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 data를 XML로 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n**Return:**\n\n```XML``` - 행의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getRowXML(0);\n\n//return 예시 )\n<map index=\"0\">\n    <name>정형돈<\/name>\n    <birthday>19780207<\/birthday>\n    <rowStatus statusValue=\"0\">R<\/rowStatus>\n<\/map>\n```\n\n"
        },
        "getRowCount": {
          "!type": "fn()",
          "!doc": "화면에 보여지는 row의 건수를 반환하며 필터가 걸려있거나 GridView에 drilldown이 적용되어 있는 경우 접혀져 있는 데이터의 행의 수는 포함되지 않는다.\n\n전체 데이터의 row건수는 getTotalRow API를 사용한다.\n\n**Return:**\n\n```Number``` - row의 건수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nvar tmpRowCount = dataList1.getRowCount();\n```\n\n"
        },
        "getTotalCol": {
          "!type": "fn()",
          "!doc": "DataList에 정의 된 컬럼수를 반환한다.\n\n**Return:**\n\n```Number``` - DataList의 컬럼수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedIndex": {
          "!type": "fn()",
          "!doc": "변경 상태(상태값:C,U,D)행들의 index를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 변경 상태 행들의 index가 담긴 1차원배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getModifiedIndex();\n//return 예시 ) [1,2,3]\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "dataList 객체의 id를 반환한다. 객체의 id 속성과 동일한 값을 반환한다.\n\n**Return:**\n\n```String``` - dataList 객체의 id를 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOnlyDeletedData": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E)행들의 배열 데이터를 배열에 담아 반환한다.(2차원 배열)\n\n**Return:**\n\n```Array``` - 삭제 상태행들의 배열 데이터를 담은 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getOnlyDeletedData();\n//return 예시 ) [[\"홍보\",\"송강호\"],[\"IT\",\"전지현\"]]\n```\n\n"
        },
        "getModifiedData": {
          "!type": "fn()",
          "!doc": "변경 상태(상태값:C,U,D,E)행들의 데이터를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 변경 상태 행들의 데이터가 담긴 2차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getModifiedData();\n//return 예시 ) [[\"\",\"행추가\"],[\"인사\",\"행수정\"],[\"홍보\",\"송강호\"],[\"IT\",\"전지현\"]]\n```\n\n"
        },
        "getRowPosition": {
          "!type": "fn()",
          "!doc": "바인딩된 DataList의 현재 행 위치(인덱스)를 확인.\n\n**Return:**\n\n```Number:Y``` - rowPosition값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n // gridView1이 dataList1과 바인딩되어 있는 상태에서 gridView의 (3,2) cell을 클릭한 경우\n dataList1.getRowPosition(); \n // 위 예제의 실행 결과는 3.\n\n // treeview2가 dataList2와 바인딩된 상태에서 index5값이 5인 node를 클릭한 경우 (node.index === 5)\n dataList1.getRowPosition(); \n // 위 예제의 실행 결과는 5.\n```\n\n"
        },
        "reform": {
          "!type": "fn()",
          "!doc": "DataList의 originalData를 현재의 데이터로 바꿔주고 모든 행의 상태를 초기화(R)한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.reform(); // 모든 행의 상태가 초기상태 (0, R)로 변경된다.\n```\n\n"
        },
        "getOnlyDeletedJSON": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E)행들의 JSON 데이터를 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 삭제 상태인 행들의 JSON 데이터를 담은 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getOnlyDeletedJSON();\n//return 예시 ) \n[\n    {\"dept\":\"홍보\",\"name\":\"송강호\",\"rowStatus\":\"D\"}\n    ,{\"dept\":\"IT\",\"name\":\"전지현\",\"rowStatus\":\"E\"}\n]\n```\n\n"
        },
        "setCellAllData": {
          "!type": "fn(realRowIndex: number, colIndex: number, data: string)",
          "!doc": "필터링 되지 않은 rowIndex를 기준으로 setCellData를 실행한다. 그 후 필터 상태를 갱신한다.\n\n**Parameters:**\n\n```realRowIndex``` - ```Number:Y``` - 필터링되지 않은 기준의 rowIndex\n\n```colIndex``` - ```Number||String:Y``` - 컬럼 index 또는 id\n\n```data``` - ```String:Y``` - 셀에 넣어줄 데이터\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n// 1,2번 행이 filtering되어 감춰진 경우\ndataList1.setCellData(3,\"name\", \"100\"); // dataList에서 5번째 행, name열에 100이라는 값을 설정한다. \ndataList1.setCellAllData(3, \"name\", \"100\"); // dataList에서 3번째 행, name열에 100이라는 값을 설정한다. 그 후 필터 상태를 갱신하여 UI를 다시 그린다.\n```\n\n"
        },
        "getUpdatedJSON": {
          "!type": "fn()",
          "!doc": "갱신 상태(1,U)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 갱신 상태(1,U)인 행들의 JSON 데이터가 담긴 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getUpdatedJSON();\n//return 예시 ) \n[\n    {\"dept\":\"인사\",\"name\":\"수정\",\"rowStatus\":\"U\"}\n    ,{\"dept\":\"홍보\",\"name\":\"수정2\",\"rowStatus\":\"U\"}\n]\n```\n\n"
        },
        "getColumnIndex": {
          "!type": "fn(colID: string)",
          "!doc": "DataList에 정의 된 컬럼의 ID를 받아 컬럼의 index를 반환한다.\n\n**Parameters:**\n\n```colID``` - ```String:Y``` - 그리드 컬럼 id\n\n**Return:**\n\n```Number``` - 그리드 컬럼의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList 정의 예시\n<w2:dataList id=\"dataList1\">\n        <w2:columnInfo>\n            <w2:column id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:column>\n            <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <\/w2:columnInfo>\n<\/w2:dataList>\n\nvar colIdx = dataList1.getColumnIndex(\"name\");\n//return 예시 ) 1\n```\n\n"
        },
        "setBroadcast": {
          "!type": "fn(flag: bool, refresh: bool)",
          "!doc": "dataList 변경시 binding된 컴포넌트에 변경 여부를 알려줄지를 설정\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - [true, false]설정 여부\n\n```refresh``` - ```Boolean:Y``` - [true, false]refresh 여부\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n dataList1.setBroadcast(false);         // broadcast flag를 false로 설정한다. false로 설정된 이후에는 dataList가 변경되더라도 binding된 컴포넌트들이 갱신되지 않는다.\n dataList1.setBroadcast(true);          // true로 설정되면 dataList가 변경될 때 binding된 컴포넌트들이 갱신된다. 단 refresh 인자를 true로 설정하지 않을 경우 즉시 컴포넌트들을 갱신하지는 않는다. \n dataList1.setBroadcast(true, true);    // dataList와 binding된 컴포넌트들을 즉시 갱신함과 동시에 broadcast flag를 true로 설정한다.\n```\n\n"
        },
        "setRowData": {
          "!type": "fn(rowIndex: number, rowData: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 1건(row)의 배역 데이터를 넣는다.\n\noverwrite가 false인 경우에 행을 생성한다.\n\ngridView와 바인딩된 경우 함수 실행 후에 스크롤 위치가 유지된다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 index\n\n```rowData``` - ```Array:Y``` - DataList에 정의 된 컬럼의 순서대로 데이터가 담긴 1차원 배열\n\n```overwrite``` - ```Boolean:N``` - [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, dept 컬럼이 정의 된 경우\n\n//1번째 row의 데이터를 아래의 데이터로 변경한다.\ndataList1.setRowData(0,[\"조진웅\",\"보안감시\"],true);\n```\n\n"
        },
        "getDeletedXML": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E,V)인 행들의 데이터를 XML로 반환한다.\n\n**Return:**\n\n```XML``` - 삭제 상태인 행들의 XML.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getDeletedXML();\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <addr><\/addr>\n        <name><\/name>\n        <rowStatus statusValue=\"4\">V<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <addr>서울시<\/addr>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"3\">D<\/rowStatus>\n    <\/map>\n    <map index=\"removed\">\n        <addr>서울시<\/addr>\n        <name>송강호<\/name>\n        <rowStatus statusValue=\"5\">E<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe의 scope객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 전역 window객체를 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe객체의 scope객체 또는 전역window객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataList1이 있는 경우\n var scope = dataList1.getScopeWindow();\n scope.wframe11 === dataList1.getScope(); // true\n```\n\n"
        },
        "setIgnoreStatus": {
          "!type": "fn(flag: bool)",
          "!doc": "dataList column의 ignoreStatus 속성을 동적으로 제어한다. ignoreStatus가 true이면 해당 column의 값이 변경되어도 status가 변하지 않는다.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - [true, false]설정 여부\n\n**Since:**\n\n5.0_5.4773B.20221129.091303\n\n**Sample:**\n\n```javascript\n dataList1.setIgnoreStatus(\"col1\", true); // API 실행 이후 col1 컬럼값이 변경되어도 status 상태가 변경되지 않음.\n dataList1.setIgnoreStatus(\"col1\", false); // API 실행 이후 col1 컬럼값이 변경되면 status 상태가 변경됨.\n dataList1.setIgnoreStatus(\"col1\"); // 무효. 아무런 동작을 하지 않음.\n```\n\n"
        },
        "getColData": {
          "!type": "fn(colInfo: number)",
          "!doc": "컬럼의 index 또는 ID에 해당하는 열의 데이터(filter나 sort가 적용 되지 않은)를 배열로 반환한다.\n\n관련 함수 : getFilteredColData (filter나 sort가 적용된 컬럼 데이터를 반환)\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 가져올 열 index 혹은 컬럼 ID\n\n**Return:**\n\n```Array``` - 열의 데이터가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnArr =  dataList1.getColData('name'); // name 컬럼의 데이터 배열.\n//return 예시 ) [ \"손예진\" , \"이광수\" , \"류승룡\" ]\n```\n\n"
        },
        "setRowNumData": {
          "!type": "fn(flag: bool)",
          "!doc": "DataList의 get관련 API의 return 데이터의 type이 JSON, XML일 경우 row의 number값을 추가 할지 설정.\n\n해당 값은 GridView의 rowNumVisible 속성을 true로 설정하면 나오는 값과 동일하며 rowNum이라는 컬럼(key)명에 할당된다.\n\nData의 get관련 API 예시 - getAllJSON, getRowJSON, getAllXML, getRowXML 등\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - [true, false]설정 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, dept가 정의 된 경우\n\n//별도의 설정 없이 getRowJSON API를 실행\ndataList1.getRowJSON(0);\n//return 예시 ) {\"dept\":\"인사\",\"name\":\"손예진\",\"rowStatus\":\"R\"}\n\n//rowNum 필드 추가 후 getRowJSON API를 실행\ndataList1.setRowNumData(true);\ndataList1.getRowJSON(0);\n//return 예시 ) {\"dept\":\"인사\",\"name\":\"손예진\",\"rowStatus\":\"R\",\"rowNum\":1}\n```\n\n"
        },
        "setRowPosition": {
          "!type": "fn(position: number, noEvent: bool)",
          "!doc": "DataList와 연동된 컴포넌트에서 선택할 행의 위치를 설정합니다.\n\n단, ref 속성을 통해 연동되는 Input과 같은 단일 컴포넌트와 바인딩된 경우에만 사용하십시오. \n\nGridView와 바인딩된 경우, 셀 선택은 GridView의 setFocusedCell을 사용해야 합니다.\n\n참고로, GridView의 setFocusedCell를 통해 셀을 선택할 경우 화면 상의 포커스도 함께 이동합니다.\n\nGridView 화면 상의 포커스 이동 없이 DataList의 값만 선택하고 싶다면 본 API를 사용하십시오.\n\n**Parameters:**\n\n```position``` - ```Number:N``` - 선택 할(focused)row index\n\n```noEvent``` - ```Boolean:N``` - onrowpositionchange이벤트를 설정해 줄것인지에 대한 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataCollection에 아래와 같이 DataList를 정의 한 경우\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"dept\" name=\"부서\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\">\n        <w2:row>\n            <name><![CDATA[손예진]]><\/name>\n            <dept><![CDATA[인사]]><\/dept>\n        <\/w2:row>\n        <w2:row>\n            <name><![CDATA[송강호]]><\/name>\n            <dept><![CDATA[홍보]]><\/dept>\n        <\/w2:row>\n        <w2:row>\n            <name><![CDATA[전지현]]><\/name>\n            <dept><![CDATA[IT]]><\/dept>\n        <\/w2:row>\n        <w2:row>\n            <name><![CDATA[류승룡]]><\/name>\n            <dept><![CDATA[인사]]><\/dept>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n\n//body 영역에 아래와 같이 Input 컴포넌트의 ref 속성를 \"data:dataList1.name\" 이 정의.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" ref=\"data:dataList1.name\"><\/xf:input>\n\n//초기 로딩 시에는 input에 값이 없음\n\n//dataList의 1번째 row에 position적용 \ndataList1.setRowPosition(0);\n//input의 display 예시 ) 손예진\n\n//dataList의 3번째 row에 position적용 \ndataList1.setRowPosition(2);\n//input의 display 예시 ) 전지현\n```\n\n"
        },
        "getDataRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 데이터를 컬럼의 ID를 key로 하는 Hash형태로 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 index.\n\n**Return:**\n\n```Object``` - rowIndex에 해당하는 행의 Hash형태의 객체.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList 정의 예시\n<w2:dataList id=\"dataList1\">\n        <w2:columnInfo>\n            <w2:column id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:column>\n            <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <addr><![CDATA[서울]]><\/addr>\n            <name><![CDATA[손예진]]><\/name>\n        <\/w2:row>\n        <w2:row>\n            <addr><![CDATA[서울]]><\/addr>\n            <name><![CDATA[류승룡]]><\/name>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\nvar rowData = dataList1.getDataRow(1);\nvar tmpName = rowData.name;     //return 예시 ) \"류승룡\" \nvar tmpAddr = rowData.addr;     //return 예시 ) \"서울\"\n\n//row의 data를 전체적으로 확인하고 싶을 때.   \nfor(var tmpKeyNm in rowData){\n    $p.log(  tmpKeyNm +  ' : ' + rowData[tmpKeyNm] );\n}\n//출력 예시 )\nname : 류승룡\naddr : 서울\n```\n\n"
        },
        "getRangeData": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 data를 1차원 배열로 반환한다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 index\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - 범위안의 data를 가지고 있는 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getRangeData(0,2);\n\n//return 예시 ) [\"인사\",\"손예진\",\"홍보\",\"송강호\",\"IT\",\"전지현\"]\n```\n\n"
        },
        "getColumnName": {
          "!type": "fn(columnInfo: string)",
          "!doc": "DataList에 정의 된 컬럼의 index 또는 ID 를 받아 컬럼에 정의 된 name을 반환한다.\n\n**Parameters:**\n\n```columnInfo``` - ```String||Number:Y``` - 컬럼의 ID 또는 index\n\n**Return:**\n\n```String``` - 컬럼의 name\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList 정의 예시\n<w2:dataList id=\"dataList1\">\n        <w2:columnInfo>\n            <w2:column id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:column>\n            <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <\/w2:columnInfo>\n<\/w2:dataList>\n\nvar colName = dataList1.getColumnName(\"name\");\n//return 예시 ) \"이름\"\n```\n\n"
        },
        "multisort": {
          "!type": "fn(options: +Object)",
          "!doc": "option에 따라서 여러개의 컬럼을 정렬한다.\n\n컬럼의 dataType 속성을 기준으로 정렬되므로 숫자형태인 경우 dataType속성을 number로 정의해야한다.\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - 정렬에 대한 옵션을 가지고 있는 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|options.sortIndex|<String:Y>|정렬해 줄 컬럼의 id 혹은 index. 여러 열을 나열시에 빈칸(space)을 구분자로 한다.|\n|options.sortOrder|<String:Y>|정렬방법 (1:오름차순 -1:내림차순). 여러 열에 대한 정렬방법을 나열시에 빈칸(space)을 구분자로 한다.|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name 컬럼을 내림차순으로 첫번째 정렬 후 dept 컬럼을 오름차순으로 정렬\nvar options = {};\noptions.sortIndex = \"name dept\";\noptions.sortOrder = \"-1 1\";\n\ndataList1.multisort( options );\n```\n\n"
        },
        "rowMoveUpFiltered": {
          "!type": "fn(rowIndex: number)",
          "!doc": "화면에 보이는 정렬된 순서를 기준으로 rowIndex에 해당하는 row를 하나 위로 올려준다. dataList가 drillDown grid에 바인된 경우 비권장.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_5.4854B.20230323.080754\n\n**Sample:**\n\n```javascript\n//두 번째 row를 한 칸 위로 이동 ( 첫번째 row와 두번째 row의 위치가 바뀜 )\ndataList1.rowMoveUpFiltered(1);\n```\n\n"
        },
        "getInsertedXML": {
          "!type": "fn()",
          "!doc": "삽입 상태(상태값:C)인 행들의 데이터를 XML로 반환한다.\n\n**Return:**\n\n```XML``` - 삽입 상태인 행들의 XML.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getInsertedXML();\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <addr>미공개<\/addr>\n        <name>익명1<\/name>\n        <rowStatus statusValue=\"2\">C<\/rowStatus>\n    <\/map>\n    <map index=\"2\">\n        <addr>서울시<\/addr>\n        <name>이광수<\/name>\n        <rowStatus statusValue=\"2\">C<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "setXML": {
          "!type": "fn(xmlData: +Object, append: string)",
          "!doc": "XML Data를 설정(set)하거나 추가(append). (행의 상태는 초기상태인 R로 변경됨.)\n\n**Parameters:**\n\n```xmlData``` - ```XML:Y``` - XML 데이터\n\n```append``` - ```String:N``` - 추가(append) 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|\"false\"|(기본 값) : DataList의 데이터를 주어진 데이터로 새로 설정(set).|null|\n|\"true\"|기존 DataList의 데이터에 추가(append).|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// XML 문자열 생성\nvar tmpXMLStr = \"\";\ntmpXMLStr += \"<list>\";\ntmpXMLStr += \"<map><name>전지현<\/name><dept>IT<\/dept><\/map>\";\ntmpXMLStr += \"<map><name>류승룡<\/name><dept>인사<\/dept><\/map>\";\ntmpXMLStr += \"<\/list>\";\n\n// XML 데이터 생성\nvar tmpXML = WebSquare.xml.parse(tmpXMLStr);\n\n// XML 형태의 2건의 list data를 set.\ndataList1.setXML (tmpXML);\n```\n\n"
        },
        "removeColumnFilter": {
          "!type": "fn(col: number)",
          "!doc": "col에 해당하는 컬럼에 적용된 filter를 삭제한다.\n\n주의 - 여러 컬럼에 setColumnFilter를 사용한 경우, 해제되지 않는 filter의 operationType(AND, OR 조건)에 따른 결과를 유의하여야 한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - filter를 삭제할 컬럼의 index 또는 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.removeColumnFilter( 'dept' ); // dept 컬럼에 적용된 필터링을 해제한다.\n```\n\n"
        },
        "getTotalRow": {
          "!type": "fn()",
          "!doc": "dataList의 전체 row수를 반환한다.\n\n필터가 걸려 있거나, drilldown이 적용되어 접혀있는 row가 있더라도 모두 포함한 수를 반환한다.\n\n필터 적용이 되어있는 row의 건수는 getRowCount API를 사용한다.\n\n**Return:**\n\n```Number``` - 전체 row수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getMatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 matchCol에 해당하는 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 값을 1차원 배열로 반환한다.\n\n**Parameters:**\n\n```matchCol``` - ```Number||String:Y``` - 데이터를 검색 할 컬럼 index 또는 컬럼 ID\n\n```dataValue``` - ```String:Y``` - matchCol에 해당하는 값과 비교 할 data\n\n```targetCol``` - ```Number||String:Y``` - 꺼내올 데이터의 컬럼 index 또는 컬럼 ID.\n\n```exactMatch``` - ```Boolean:N``` - [default:true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - targetCol에 해당하는 data가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData =dataList1.getMatchedColumnData(\"dept\",\"인사\",\"name\");\n//return 예시 )[\"손예진\" , \"류승룡\"]\n```\n\n"
        },
        "modifyMatchedStatus": {
          "!type": "fn(col: number, dataValue: string, status: string)",
          "!doc": "col에 해당하는 컬럼의 데이터와 dataValue의 값이 일치된 행의 상태를 변경한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - 검사할 컬럼의 index 또는 id\n\n```dataValue``` - ```String:Y``` - 비교값\n\n```status``` - ```String:Y``` - 변경할 상태값. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// dept 컬럼의 데이터가 'IT'인 행들의 상태를 갱신 상태(U)로 변경한다.\ndataList1.modifyMatchedStatus('dept', 'IT', 'U');\n```\n\n"
        },
        "getDeletedJSON": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E,V)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 삭제 상태인 행들의 JSON 데이터가 담긴 1차원 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getDeletedJSON();\n//return 예시)\n[\n    { \"addr\": \"\" , \"name\": \"\", \"rowStatus\": \"V\" }\n    , { \"addr\": \"서울시\", \"name\": \"손예진\", \"rowStatus\": \"D\" }\n    , { \"addr\": \"서울시\", \"name\": \"송강호\", \"rowStatus\": \"E\" }\n]\n```\n\n"
        },
        "setColumnFilter": {
          "!type": "fn(filterOptions: +Object)",
          "!doc": "colIndex에 해당하는 컬럼에 필터링 적용.\n\n**Parameters:**\n\n```filterOptions``` - ```JSON:Y``` - 필터링 옵션.\n\n|property|type|description|\n|:-|:-|:-|\n|filterOptions.type|<String:Y>|[row, func, regExp] 필터 타입. (\"row\": 데이터를 기준으로 indexOf로 검색. \"regExp\":  정규표현식. \"func\": 사용자 정의 함수.)|\n|filterOptions.colIndex|<String:Y>|필터를 적용할 컬럼의 인덱스 혹은 ID.|\n|filterOptions.key|<String:Y>|필터의 적용 Data로 type에 정의 한 값에 따라 달라짐. (\"row\": 비교할 string 값. \"regExp\":  regExp 객체. \"func\": 사용자 정의 함수.)|\n|filterOptions.condition|<String:Y>|[and, or] 이전 필터 데이터와의 병합 조건. 초기에는 \"and\"로 정의를 해야함.|\n|filterOptions.exactMatch|<Boolean:N>|[true, false] row filter에서 equal 조건 검색 수행. (\"true\": equal 조건 검색. \"false\" (기본 값): like 조건 검색.)|\n|filterOptions.param|<Object:Y>|key의 값이 \"func\"일 때 함수로 넘길 파라미터.|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (필터 적용 예시 - dataList와 gridView가 연동된 경우)\n   \n// (1) type : \"row\" (key로 넘어온 문자열에 대해 indexOf를 이용하여 필터를 적용.) \n\n        // (예제) GridView의 dept 컬럼의 값이 \"IT\"를 포함된 행만 표시. (like 검색)\n\n                dataList1.setColumnFilter( \n                        {type:'row', colIndex:'dept', key:\"IT\", condition:'and'}\n                    );\n\n        // (예제) GridView의 dept 컬럼의 값이 \"IT\"인 데이터만 표시. (equal 검색)\n\n                dataList1.setColumnFilter( \n                        {type:'row', colIndex:'dept', key:\"IT\", condition:'and', exactMatch:true}\n                    );\n\n        // (예제) dept 컬럼의 값이 \"IT\" 혹은 \"홍보\"인 데이터만 표시.  (condition을 or로 변경.)\n                dataList1.setColumnFilter( \n                        {type:'row', colIndex:'dept', key:\"홍보\", condition:'or'}\n                    );\n\n//위의 방법은 효율이 좋지 않으므로 아래와 같이 사용자정의 필터 또는 정규표현식을 이용하여 한번에 적용할 것을 권장.\n\n// (2) type : \"func\" (개발자가 직접 데이터의 필터를 적용.)\n\n        // (예제) 사용자 정의 필터 - cellData가 \"IT\"와 \"인사\"를 적용\n        // cellData는 웹스퀘어 엔진에서 넘겨주는 cell의 데이터로 colIndex에 설정한 컬럼의 데이터.\n        // tmpParam은 setColumnFilter API를 호출 할 때 파라메터로 넘겨주는 param의 값.\n        // rowIdx는 웹스퀘어 엔진에서 넘겨주는 row의 index 값.\n\n            var fn_tmpDeptFilter = function(cellData, tmpParam, rowIdx){\n                if(cellData.indexOf(\"IT\") > -1){\n                    return true;\n                }else if(cellData.indexOf(\"인사\") > -1){\n                    return true;\n                }\n                return false;   //return이 true인 경우 적용하고 false인 경우 skip한다.\n            }   \n\n        // (예제) dept컬럼의 데이터가 \"IT\"이거나 \"인사\"인 데이터만 표시.\n        // function에 별도의 parameter는 추가하지 않음.\n\n            dataList1.setColumnFilter( \n                {type:'func', colIndex:'dept', key:fn_tmpDeptFilter, condition:'and'}\n            );\n \n// (3) type : \"regExp\" (정규 표현식을 이용하여 필터를 적용.) \n\n        // (예제) dept 컬럼의 값이 \"IT\" 혹은 \"홍보\"인 데이터만 표시.\n\n                dataList1.setColumnFilter( \n                    {type:'regExp', colIndex:'dept', key:/IT|홍보/gi, condition:'and'}\n                );\n\n```\n\n"
        },
        "setData": {
          "!type": "fn(arr: +Object, append: bool, columnArr: +Object, rowStatus: +Object)",
          "!doc": "1차원 배열 데이터를 set 또는 append 한다. (행의 상태는 초기상태인 R로 변경된다. 데이터의 순서를 지정해주는 columnArr를 사용할 경우, append는 항상 넣어줘야한다.)\n\n**Parameters:**\n\n```arr``` - ```Array||String:Y``` - 1차원 배열 또는 배열 형태의 문자열(소스 안쪽에서 array로 변환)\n\n```append``` - ```Boolean:N``` - [default:false, true]append 여부\n\n```columnArr``` - ```Array||String:N``` - 데이터를 셋팅할 컬럼의 id가 담긴 배열 또는 배열 형태의 문자열(소스 안쪽에서 array로 변환)\n\n```rowStatus``` - ```Array:N``` - 셋팅할 데이터의 rowStatus들을 담은 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, dept 컬럼이 정의 된 경우\n\n//2건(row)의 데이터 set.\ndataList1.setData([\"송지효\",\"홍보\",\"김상중\",\"준법감시\"]);\n \n//2건(row)의 데이터 중 name 컬럼의 데이터를 set하고 name을 제외한 나머지 컬럼은 빈 값(\"\")을 set.\ndataList1.setData([\"송지효\",\"김상중\"],false,[\"name\"]);\n \n//2건(row)의 데이터 중 name 컬럼의 데이터만 set하고 2건의 rowStatus를 변경.\ndataList1.setData([\"송지효\",\"김상중\"],false,[\"name\"],[\"U\", \"D\"]);\n\n//server에서 배열 형태의 문자열을 받은 경우 (java에서 db의 값을 꺼내 값과 값을 \"%||%\"로 append하여 생성한다)  \nvar tmpStr = \"송지효%||%홍보%||%김상중%||%준법감시\";\nvar tmpArr = tmpStr.split(\"%||%\");\ndataList1.setData(tmpArr);\n\n//server에서 배열 형태의 문자열을 받은 경우 다음과 같은 형태일 때 문자열을 배열로 자동변환해준다.\nvar tmpStr = \"[\\\"송지효\\\",\\\"홍보\\\",\\\"김상중\\\",\\\"준법감시\\\"]\";\ndataList1.setData(tmpStr);\n```\n\n"
        },
        "getUnmatchedIndex": {
          "!type": "fn(col: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 index를 배열로 반환한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - 데이터를 검사할 컬럼의 index 또는 id\n\n```dataValue``` - ```String:Y``` - col에 해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - [true,false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 시작할 행의 index\n\n```lastRowIndex``` - ```Number:Y``` - 끝낼 행의 index\n\n**Return:**\n\n```Array``` - 범위안에 일치하는 index를 가지고 있는 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//row의 index가 0부터 10까지의 데이터 중에서 birthday의 값중에 \"198\" 문자열이 없는 행의 index가 담긴 배열 반환\nvar returnArr = dataList1.getUnmatchedIndex(\"birthday\",\"198\",false,0,10)\n//return 예시 )[0,1,2,5]\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "dataList에 등록 된 이벤트를 발생시킨다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트명\n\n```array``` - ```Object:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1에 oncelldatachange이벤트를 발생시킨다.\ndataList1.trigger(\"oncelldatachange\");\n\n//dataList1에 oncelldatachange이벤트를 발생시키고 핸들러 함수에 아래와 같은 인자(paramJSON)를 전달하여 호출한다. \nvar paramJSON = {rowIndex:5,colID:\"col1\",oldValue:10,newValue:20};\ndataList1.trigger(\"oncelldatachange\", [ paramJSON ]);\n```\n\n"
        },
        "getAllXML": {
          "!type": "fn()",
          "!doc": "DataList의 전체 data를 XML로 반환한다.\n\n관련 함수 : getAllFilteredXML (filter를 무시하고 모든 데이터를 반환)\n\n**Return:**\n\n```XML``` - 전체 data가 담긴 XML\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// id가 name ,addr인 2개 컬럼을 정의 한 DataList\nvar returnXMLStr = dataList1.getAllXML();\n//DataList의 XML관련 속성(baseNode,repeatNode 등)을 지정하지 않은 경우.\n\n//return 예시 - string으로 변환 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <addr>서울<\/addr>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <addr>서울<\/addr>\n        <name>이광수<\/name>\n        <rowStatus statusValue=\"1\">U<\/rowStatus>\n    <\/map>\n    <map index=\"2\">\n        <addr>서울<\/addr>\n        <name>류승룡<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "getMatchedJSON": {
          "!type": "fn(colInfo: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 JSON 데이터를 배열에 담아 반환한다.\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 검색할 열 index 또는 id\n\n```dataValue``` - ```String:Y``` - colInfo 해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:N``` - [default:true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 시작 행의 index\n\n```lastRowIndex``` - ```Number:N``` - 끝 행의 index\n\n**Return:**\n\n```Array``` - 범위안의 JSON 데이터를 가지고 있는 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1의 dept 컬럼의 Data가 \"인사\"인 row의 data를 JSON Array으로 반환\nvar tmpRsData = dataList1.getMatchedJSON(\"dept\",\"인사\");\n\n//return 예시 ) [{\"dept\":\"인사\",\"name\":\"손예진\",\"rowStatus\":\"R\"},{\"dept\":\"인사\",\"name\":\"류승룡\",\"rowStatus\":\"R\"}]\n```\n\n"
        },
        "modifyAllStatus": {
          "!type": "fn(status: string)",
          "!doc": "모든 행의 상태를 변경 한다.\n\n**Parameters:**\n\n```status``` - ```String:Y``` - 변경할 상태값 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"). status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.modifyAllStatus('D'); // 모든 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getRangeJSON": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 JSON data를 담은 1차원 배열.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 index\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 index\n\n**Return:**\n\n```Array``` - 범위에 해당하는 행의 JSON객체를 담은 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//1번째 row부터 3번째 row Data를 JSON으로 반환하여 array로 반환\nvar tmpRsData = dataList1.getRangeJSON(0,2);\n\n//return 예시 )\n[\n    {\"dept\":\"인사\",\"name\":\"손예진\",\"rowStatus\":\"R\"}\n    ,{\"dept\":\"홍보\",\"name\":\"송강호\",\"rowStatus\":\"R\"}\n    ,{\"dept\":\"IT\",\"name\":\"전지현\",\"rowStatus\":\"R\"}\n]\n```\n\n"
        },
        "getRealRowIndex": {
          "!type": "fn()",
          "!doc": "실제 Row Index를 반환한다.\n\n**Return:**\n\n```Number``` - 실제 Row Index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "insertRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 1건의 row는 삽입한다. 삽입 된 후 DataList의 oninsertrow 이벤트가 발생한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삽입할 행의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 첫번째 행에 새로운 행을 삽입한다.\ndataList1.insertRow(0);\n```\n\n"
        },
        "setCellData": {
          "!type": "fn(rowIndex: number, colIndex: number, data: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀에 data를 셋팅한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행 index\n\n```colIndex``` - ```Number||String:Y``` - 컬럼 index 또는 id\n\n```data``` - ```String:Y``` - 셀에 넣어줄 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//1번째 row의 name 컬럼에 값을 셋팅\ndataList1.setCellData(0, \"name\", \"전지현\");\n```\n\n"
        },
        "getRowStatus": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 상태를 코드(문자)로 반환한다. (초기상태:R, 갱신:U, 삽입:C, 삭제:D, 삽입 후 삭제:V)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n**Return:**\n\n```String``` - 행의 상태코드 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = dataList1.getRowStatus(0); // 첫 번째 행의 rowStatus 값(문자)를 반환한다.\n//return 예시 ) \"R\"\n```\n\n"
        },
        "getUnmatchedJSON": {
          "!type": "fn(col: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 data를 JSON으로 변환하여 배열에 담아 반환한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - 데이터를 검색할 컬럼의 index 또는 id\n\n```dataValue``` - ```String:Y``` - col에 해당하는 컬럼의 데이터와 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - [default:true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 시작 행의 index\n\n```lastRowIndex``` - ```Number:Y``` - 끝 행의 index\n\n**Return:**\n\n```Array``` - 조건에 일치하는 row에 해당하는 JSON Data를 가지고 있는 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1의 index가 0번째 10까지의 데이터 중 birthday의 값중에 \"198\" 문자열이 없는 행의 JSON데이터를 배열로 반환\nvar returnData = dataList1.getUnmatchedJSON(\"birthday\",\"198\",false,0,10))\n\n//return 예시 )\n[\n    {\"name\":\"아이유\",\"birthday\":\"19930516\",\"rowStatus\":\"R\"}\n    ,{\"name\":\"정형돈\",\"birthday\":\"19780207\",\"rowStatus\":\"R\"}\n    ,{\"name\":\"유승호\",\"birthday\":\"19930817\",\"rowStatus\":\"R\"}\n    ,{\"name\":\"김현아\",\"birthday\":\"19920606\",\"rowStatus\":\"R\"}\n]\n```\n\n"
        },
        "getRangeArray": {
          "!type": "fn(fromIdx: number, toIdx: number)",
          "!doc": "fromIdx부터 toIdx 까지 범위의 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.\n\n**Parameters:**\n\n```fromIdx``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 index\n\n```toIdx``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//row의 index가 0번째 ~ 2번째인 row의 data 꺼내오기\nvar tmpRsData = dataList1.getRangeArray(0,2);\n\n//return 예시 )\n{\n    \"columnInfo\":[\"dept\",\"name\"]\n    ,\"data\":[\"인사\",\"손예진\",\"홍보\",\"송강호\",\"IT\",\"전지현\"]\n}\n```\n\n"
        },
        "getAllFilteredData": {
          "!type": "fn()",
          "!doc": "filter가 적용된 데이터 전체를 array로 반환한다. \n\n관련 함수 : getAllData (filter를 무시하고 모든 데이터를 반환)\n\n**Return:**\n\n```Array``` - filter가 적용된 데이터 전체\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnDefaultValue": {
          "!type": "fn(colIndex: number, defaultValue: string)",
          "!doc": "colIndex에 해당하는 열의 기본값을 defaultValue로 설정한다.\n\ninsertRow API 또는 초기 data를 set할 때 컬럼에 값이 할당되지 않을 때 dafaultValue의 값을 할당한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 열의 index 또는 id\n\n```defaultValue``` - ```String:Y``` - 열에 설정할 기본값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name 컬럼의 기본값을 \"필수입력\"으로 설정.\ndataList1.setColumnDefaultValue('name', '필수입력');\n\n//위와 같이 API를 호출 한 뒤 아래와 같이 insertRow API를 호출하면 name의 컬럼에 \"필수입력\"의 값이 설정된다.\ndataList1.insertRow(0);\n```\n\n"
        },
        "getCellData": {
          "!type": "fn(rowIndex: number, colInfo: number)",
          "!doc": "rowIndex와 colInfo( 컬럼의 index 또는 ID )에 해당하는 셀의 데이터를 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 index\n\n```colInfo``` - ```Number||String:Y``` - 셀의 컬럼 index 혹은 컬럼의 ID\n\n**Return:**\n\n```String``` - 셀의 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 첫 번째 row의 \"name\" column에 해당하는 cell의 데이터를 반환\nvar returnValue = dataList1.getCellData(0, \"name\");\n```\n\n"
        },
        "getOnlyDeletedIndex": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D)행등의 index를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 삭제 상태인 행들의 index를 담은 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getOnlyDeletedIndex();\n//return 예시 ) [3]\n```\n\n"
        },
        "getInsertedArray": {
          "!type": "fn()",
          "!doc": "삽입 상태(상태값:C)인 행들의 정보가 담긴 JSON.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getInsertedArray();\n//return 예시 )\n{\n    \"columnInfo\": [ \"addr\", \"name\" ],\n    \"data\": [ \"서울\", \"신규회원\" ]\n}\n```\n\n"
        },
        "getFilterList": {
          "!type": "fn()",
          "!doc": "필터링된 dataList의 컬럼 별 필터링 상태를 반환. \n```javascript\n(관련 함수) \n setColumnFilter (현재 필터링 상태를 저장하고, 필터링을 해제한 후, 다시 이전 필터링 상태로 돌아갈 때 유용)\n```\n\n\n\n**Return:**\n\n```Array``` - dataList에 적용된 필터들을 배열로 저장한 객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var currentFilter = dataList1.getFilterList(); // 현재 필터링 상태를 저장.\n dataList1.clearFilter(); // 필터링을 해제.\n for(var i = 0; i < currentFilter.length; i++) \n    {dataList1.setColumnFilter(currentFilter[i]);} // 이전 필터링 상태로 돌아감. \n \n // 혹은, GridView가 \n // useFilterList=\"true\" 및 useFilterListSync = \"true\" 설정을 사용할 경우, \n // 이전 필터링 상태로 돌아가려면 아래 예제 사용. \n\n for(var i = 0; i < currentFilter.length; i++) \n    {dataList1.setColumnFilter (\n        {type: currentFilter[i].type, \n        colIndex: currentFilter[i].colIndex, \n        key: currentFilter[i].key, \n        condition: currentFilter[i].condition, \n        exactMatch: true});}\n\n```\n\n"
        },
        "getFusionChartData": {
          "!type": "fn(chartType: string, labelNode: string, seriesColumns: string)",
          "!doc": "dataList를 fusionChart의 json데이터로 반환한다.\n\n**Parameters:**\n\n```chartType``` - ```String:Y``` - fusionChart의 차트타입\n\n```labelNode``` - ```String:Y``` - fusionChart의 lable 데이터로 사용할 DataCollection의 column의 ID값\n\n```seriesColumns``` - ```String:Y``` - fusionChart의 series 데이터로 사용할 DataCollection column 정보로 배열형식의 문자열\n\n**Return:**\n\n```JSON``` - fusionChart_Data 변환된 fusionChart data(json)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 DataList가 정의 된 경우\n<w2:dataList id=\"dc_chart\" baseNode=\"list\" style=\"\" repeatNode=\"map\"\n    valueAttribute=\"\">\n    <w2:columnInfo>\n        <w2:column id=\"category1\" name=\"대분류\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"category2\" name=\"중분류\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"row3_1\" name=\"row3_1\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"row3_2\" name=\"row3_2\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data xmlns=\"\" use=\"true\">\n        <w2:row>\n            <category1><![CDATA[소설]]><\/category1>\n            <category2><![CDATA[한국소설]]><\/category2>\n            <row3_1><![CDATA[100]]><\/row3_1>\n            <row3_2><![CDATA[200]]><\/row3_2>\n        <\/w2:row>\n        <w2:row>\n            <category1><![CDATA[소설]]><\/category1>\n            <category2><![CDATA[영미소설]]><\/category2>\n            <row3_1><![CDATA[100]]><\/row3_1>\n            <row3_2><![CDATA[400]]><\/row3_2>\n        <\/w2:row>\n        <w2:row>\n            <category1><![CDATA[시/에세이]]><\/category1>\n            <category2><![CDATA[에세이]]><\/category2>\n            <row3_1><![CDATA[400]]><\/row3_1>\n            <row3_2><![CDATA[100]]><\/row3_2>\n        <\/w2:row>\n        <w2:row>\n            <category1><![CDATA[시/에세이]]><\/category1>\n            <category2><![CDATA[시]]><\/category2>\n            <row3_1><![CDATA[200]]><\/row3_1>\n            <row3_2><![CDATA[500]]><\/row3_2>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\nvar rsData = dc_chart.getFusionChartData(\"MSColumn2D\",\"category2\",\"[['row3_1','row3_2']]\");\n//return 예시)\n{\n    \"categories\": [\n        { \"category\": [  \n            { \"label\": \"한국소설\" }, { \"label\": \"영미소설\" }, { \"label\": \"에세이\" }, { \"label\": \"시\" } ] }\n        ],\n    \"dataset\": [\n        {\n            \"data\": [ { \"value\": \"100\" }, { \"value\": \"100\" }, { \"value\": \"400\" }, { \"value\": \"200\" } ],\n            \"seriesname\": \"row3_1\" \n        },\n        {\n            \"data\": [ { \"value\": \"200\" }, { \"value\": \"400\" }, { \"value\": \"100\" }, { \"value\": \"500\" } ],\n            \"seriesname\": \"row3_2\"\n        }\n    ]\n}\n```\n\n"
        },
        "getOption": {
          "!type": "fn(attr: string)",
          "!doc": "속성명으로 dataList에 정의 된 속성의 값을 반환한다.\n\n**Parameters:**\n\n```attr``` - ```String:Y``` - 속성명.\n\n**Return:**\n\n```String``` - dataList에 정의 된 속성의 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList 정의 예시\n<w2:dataList id=\"dataList1\" baseNode=\"list\">\n        <w2:columnInfo>\n            <w2:column id=\"dept\" name=\"부서\" dataType=\"text\"><\/w2:column>\n            <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <\/w2:columnInfo>\n<\/w2:dataList>\n\nvar tmpAttr = dataList1.getOption(\"baseNode\");\n//return 예시 ) \"list\"\n```\n\n"
        },
        "insertXML": {
          "!type": "fn(rowIndex: number, dataObj: +Object)",
          "!doc": "rowIndex에 다건의 row를 XML 데이터로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n```dataObj``` - ```XML:Y``` - 데이터를 담고 있는 XML\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, birthday id를 가진 컬럼이 정의 된 경우\n\n//XML String\nvar xmlStr = \"<list><map><name>아이유<\/name><birthday>19930516<\/birthday><\/map><\/list>\";\n//XML 데이터 생성\nvar dataObj = WebSquare.xml.parse(xmlStr);\n\n//0번째 index에 1건의 row을 삽입.\ninsertXML(0, dataObj)\n```\n\n"
        },
        "insertData": {
          "!type": "fn(rowIndex: number, dataObj: +Object)",
          "!doc": "rowIndex에 다건의 row를 1차원 Array로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n```dataObj``` - ```Array:Y``` - 데이터를 담고 있는 1차원 Array\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, birthday id를 가진 컬럼이 정의 된 경우\n\n//0번째 index에 2건의 row을 삽입.\ndataList1.insertData( 0, [\"아이유\", \"19930516\" ,\"정형돈\" ,\"19780207\"] );\n```\n\n"
        },
        "rowMoveDownFiltered": {
          "!type": "fn(rowIndex: number)",
          "!doc": "화면에 보이는 정렬된 순서를 기준으로 rowIndex에 해당하는 row을 하나 아래로 내려준다. dataList가 drillDown grid에 바인된 경우 비권장.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n**Since:**\n\n5.0_5.4854B.20230323.080754\n\n**Sample:**\n\n```javascript\n//두 번째 row를 한 칸 아래로 이동 ( 두번째 row와 세번째 row의 위치가 바뀜 )\ndataList1.rowMoveDownFiltered(1);\n```\n\n"
        },
        "getAllFilteredXML": {
          "!type": "fn()",
          "!doc": "filter가 적용된 데이터 전체를 XML로 반환한다. \n\n관련 함수 : getAllXML (filter를 무시하고 모든 데이터를 반환)\n\n**Return:**\n\n```XML``` - filter가 적용된 데이터 전체\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOnlyDeletedArray": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E)행들의 정보를 담은 JSON을 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getOnlyDeletedArray();\n//return 예시 )\n{\n    \"columnInfo\": [ \"addr\", \"name\" ],\n    \"data\": [ \"서울\", \"송강호\", \"서울\", \"전지현\" ]\n}\n```\n\n"
        },
        "getColumnDistinctDataArray": {
          "!type": "fn(column: number)",
          "!doc": "지정한 Index 또는 ID에 해당하는 컬럼에서 중복된 데이터를 제거한 후, 오름차순으로 정렬된 data를 배열로 반환.\n\n**Parameters:**\n\n```column``` - ```Number||String:Y``` - 컬럼의 Index 또는 ID\n\n**Return:**\n\n```Array``` - 중복된 데이터를 제거한 컬럼 데이터.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getModifiedXML": {
          "!type": "fn(options: +Object)",
          "!doc": "데이터가 삽입, 갱신, 삭제, 제거 된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 XML로 반환한다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 데이터 변경(삽입, 갱신, 삭제, 제거) 행들의 반환될 데이터를 설정한다.\n\n|property|type|description|\n|:-|:-|:-|\n|options.saveRemovedData|<Boolean:N>|default:true, false]제거된 행(E)을 제외하고 반환을 하려면 false로 설정한다.|\n\n**Return:**\n\n```Xml``` - 삽입, 갱신, 삭제된 행들의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnXML1 = dataList1.getModifiedXML();\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <dept><\/dept>\n        <name><\/name>\n        <rowStatus statusValue=\"2\">C<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <dept>인사<\/dept>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"3\">D<\/rowStatus>\n    <\/map>\n    <map index=\"3\">\n        <dept>인사<\/dept>\n        <name>수정<\/name>\n        <rowStatus statusValue=\"1\">U<\/rowStatus>\n    <\/map>\n    <map index=\"removed\">\n        <dept>홍보<\/dept>\n        <name>송강호<\/name>\n        <rowStatus statusValue=\"5\">E<\/rowStatus>\n    <\/map>\n<\/list>\n\nvar returnXML2 = dataList1.getModifiedXML({saveRemovedData:false});\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <dept><\/dept>\n        <name><\/name>\n        <rowStatus statusValue=\"2\">C<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <dept>인사<\/dept>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"3\">D<\/rowStatus>\n    <\/map>\n    <map index=\"3\">\n        <dept>인사<\/dept>\n        <name>수정<\/name>\n        <rowStatus statusValue=\"1\">U<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "getVoidData": {
          "!type": "fn()",
          "!doc": "삽입 후 삭제 상태(4,V)인 행들을 배열 데이터를 배열에 담에 반환한다.\n\n**Return:**\n\n```Array``` - 삽입 후 삭제 상태인 행들의 배열 데이터가 담긴 배열 (2차원 배열)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar  raData = dataList1.getVoidData();\n//return 예시 - 총 2건 ) [ [\"0\",\"\",\"\"],[\"0\",\"\",\"\"] ]\n```\n\n"
        },
        "clearFilter": {
          "!type": "fn()",
          "!doc": "현재 dataList에 적용된 필터링을 모두 해제.\n```javascript\n(관련 함수) \n setColumnFilter (컬럼 별로 필터링을 설정.)\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n// gridView의 'dept' 컬럼을 IT로 필터링.\n// gridView의 'dept' 컬럼이 IT인 행만 표시됨. \n dataList1.setColumnFilter( {type:'row', colIndex:'dept', key:\"IT\", condition:'and'});\n\n// 필터링을 해제. \n// gridView의 'dept'컬럼의 모든 데이터를 표시.  \n dataList1.clearFilter();\n```\n\n"
        },
        "getUnmatchedData": {
          "!type": "fn(col: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 data를 배열 변환하여 배열에 담아 반환한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 또는 id\n\n```dataValue``` - ```String:Y``` - col해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - 범위안에 일치하는 배열 데이터를 가진 배열로(2차원 배열)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 birthday컬럼이 정의 된 DataList의 경우\n\n//row의 index가 0부터 10까지의 데이터 중에서 birthday의 값중에 \"198\" 문자열이 없는 행의 데이터를 배열로 변환하여 배열에 담아 return.\nvar rsData = dataList1.getUnmatchedData(\"birthday\",\"198\",false,0,10)\n//return 예시 ) [[\"아이유\",\"19930516\"],[\"정형돈\",\"19780207\"],[\"유승호\",\"19930817\"],[\"김현아\",\"19920606\"]]\n```\n\n"
        },
        "getAllFilteredJSON": {
          "!type": "fn()",
          "!doc": "filter가 적용된 데이터 전체를 JSON이 담긴 배열로 반환한다. \n\n관련 함수 : getAllJSON (filter를 무시하고 모든 데이터를 반환)\n\n**Return:**\n\n```Array``` - filter가 적용된 데이터 전체\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getInfo": {
          "!type": "fn()",
          "!doc": "dataList의 세부 정보를 조회한다.\n\n**Return:**\n\n```JSON``` - {dataListInfo : dataList의 attribute값, columnInfo : 각 colummn의 attribute들을 모아둔 object} 형태의 json객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\ndataList1.getInfo();\n```\n\n"
        },
        "getColumnInfo": {
          "!type": "fn(columnID: string)",
          "!doc": "dataList 특정 column의 세부 정보를 조회한다.\n\n**Parameters:**\n\n```columnID``` - ```String:Y``` - 조회하고자 하는 column의 id\n\n**Return:**\n\n```JSON``` - 해당 컬럼의 attribute를 표현한 json객체\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\ndataList1.getColumnInfo(\"column2\");\n```\n\n"
        },
        "setRowArray": {
          "!type": "fn(rowIndex: number, dataObj: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 1건(row)의 배열 데이터를 넣는다.\n\noverwrite가 false인 경우에 행을 생성한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 index\n\n```dataObj``` - ```JSON:Y``` - 행에 넣을 데이터의 정보를 가진 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|dataObj.columnInfo|<Array:Y>|데이터를 넣을 컬럼의 id를 가진 1차원 배열|\n|dataObj.data|<Array:Y>|columnInfo에 넣은 컬럼 순서대로 데이터를 담은 1차원 배열 (1건의 row만 처리 됨)|\n\n\n```overwrite``` - ```Boolean:N``` - [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name, dept, addr 컬럼을 가진 dataList가 정의 된 경우\n\n//row 데이터 및 정보 생성\nvar dataObj = {};\ndataObj.columnInfo = [\"name\",\"dept\"];\ndataObj.data = [\"차승원\", \"홍보\"];\n\n//1번째 row에 name과 dept 컬럼의 데이터만 set.\ndataList1.setRowArray(0, dataObj);  //overwirte의 값이 없으므로 1번째에 insert 된다.\n```\n\n"
        },
        "keepRowPosition": {
          "!type": "fn()",
          "!doc": "JSON Data를 append할 때 이전에 설정된 rowPosition값을 유지할지 여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "sort": {
          "!type": "fn(bodyColumnID: string, sortType: number)",
          "!doc": "단건의 컬럼을 정렬한다. (다건의 경우 multisort API를 이용)\n\n 본 API는 dataType에 상관없이 text로 간주하여 정렬이 된다. (number 타입의 경우 multisort API를 이용)\n\n**Parameters:**\n\n```bodyColumnID``` - ```String:Y``` - 컬럼의 id\n\n```sortType``` - ```Number:Y``` - [0,1,2]정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name컬럼의 값을 기준으로 오름차순으로 정렬한다.\ndataList1.sort('name', 0);\n```\n\n"
        },
        "getMatchedIndex": {
          "!type": "fn(conInfo: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 conInfo의 값이 dataValue와 같은 행들의 index를 반환한다.\n\n**Parameters:**\n\n```conInfo``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 혹은 컬럼 ID\n\n```dataValue``` - ```String:Y``` - conInfo 해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:N``` - [default:true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - 범위안에 일치하는 index를 담은 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getMatchedIndex(\"dept\",\"인사\");\n//return 예시 ) [0,3]\n```\n\n"
        },
        "getUnmatchedArray": {
          "!type": "fn(col: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위중에서 데이터가 dataValue와 다른 행들의 정보를 JSON으로 변환하여 반환한다.\n\n**Parameters:**\n\n```col``` - ```Number:Y``` - 컬럼 index 또는 id\n\n```dataValue``` - ```String:Y``` - 비교 data\n\n```exactMatch``` - ```Boolean:Y``` - [true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 시작할 행 index\n\n```lastRowIndex``` - ```Number:Y``` - 끝낼 행 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 birthday 컬럼이 정의 된 dataList의 경우\n\n//row의 index가 0부터 10까지의 데이터 중에서 birthday의 값중에 \"198\" 문자열이 없는 데이터를 반환\nvar rsData = dataList1.getUnmatchedArray( 'birthday', '198', false, 0, 10 ));\n//return 예시 )\n{\n    \"columnInfo\":[\"name\",\"birthday\"]\n    ,\"data\":[\"아이유\",\"19930516\",\"정형돈\",\"19780207\",\"유승호\",\"19930817\",\"김현아\",\"19920606\"]\n}\n```\n\n"
        },
        "removeColumnFilterAll": {
          "!type": "fn()",
          "!doc": "모든 컬럼에 적용된 filter를 삭제한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.removeColumnFilterAll(); // 전체 필터링을 해제한다.\n```\n\n"
        },
        "setArray": {
          "!type": "fn(jsonData: +Object, append: string)",
          "!doc": "1차원 배열의 데이터를 columnInfo의 컬럼 순서대로 DataList에 set한다.(행의 상태는 초기상태인 R로 변경된다.)\n\n**Parameters:**\n\n```jsonData``` - ```JSON:Y``` - 컬럼 정보와 1차원 배열 데이터를 담고 있는 JSON\n\n|property|type|description|\n|:-|:-|:-|\n|columnInfo|<Array:Y>|데이터를 셋팅할 컬럼의 순서|\n|data|<Array:Y>|columnInfo에 따른 컬럼의 데이터로 전체 데이터를 1차원 배열에 담는다|\n\n\n```append``` - ```String:N``` - [default:false, true]append 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, dept, phone의 순서대로 컬럼이 정의 된 경우\n\n//dataList에 총 3건(row)의 데이터를 name과 dept의 컬럼에만 data를 기존 데이터를 삭제하고 set. \nvar tmpColInfoArr = [\"dept\",\"name\"];\nvar tmpDataArr = [\"IT\",\"손예진\",\"홍보\",\"이광수\",\"인사\",\"전지현\"]; //data의 순서를 tmpColInfoArr의 컬럼 순서로 맞춘다\ndataList1.setArray( {\"columnInfo\":tmpColInfoArr, \"data\":tmpDataArr} );\n```\n\n"
        },
        "insertJSON": {
          "!type": "fn(rowIndex: number, dataObj: +Object)",
          "!doc": "rowIndex에 다건의 row를 JSON객체로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - row의 index\n\n```dataObj``` - ```Array:Y``` - row에 해당하는 JSON객체는 담고 있는 1차원 array\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name, birthday id를 가진 컬럼이 정의 된 경우\n\n//dataList에 insert 할 데이터 정의\nvar tmpData = [{\"name\":\"아이유\",\"birthday\":\"19930516\"},{\"name\":\"정형돈\",\"birthday\":\"19780207\"}];\n\n//0번째 index에 2건의 row을 삽입.\ndataList1.insertJSON( 0, tmpData );\n```\n\n"
        },
        "deleteRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowInex에 해당하는 행이 삭제되지 않으며 상태 값만 삭제(D)로 변경된다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제상태로 변경 할 행의 index.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 첫 번째 row의 rowStatus 값을 delete 상태로 변경. (rowStatus: \"D\")\ndataList1.deleteRow(0);\n```\n\n"
        },
        "getParentRowIndex": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환합니다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 부모를 찾으려는 행의 번호\n\n**Return:**\n\n```Number``` - 부모 Row의 Index를 반환한다\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getMatchedArray": {
          "!type": "fn(colInfo: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo에 해당하는 값이 dataValue와 같은 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 혹은 컬럼 ID\n\n```dataValue``` - ```String:Y``` - colInfo 해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:N``` - [default:true, false] 정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getMatchedArray(\"dept\",\"인사\");\n//return 예시 )\n{\n    \"columnInfo\":[\"dept\",\"name\"]\n    ,\"data\":[\"인사\",\"손예진\",\"인사\",\"류승룡\"]\n}\n```\n\n"
        },
        "clearSort": {
          "!type": "fn()",
          "!doc": "Data의 정렬을 취소하며 GridView 컴포넌트의 정렬도 함께 취소된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\ndataList1.clearSort();// 정렬을 취소.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "dataList의 이벤트를 동적으로 제거한다.\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트의 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1에 등록된 oncelldatachange이벤트에 등록한 핸들러 중에 func1 이벤트 핸들러를 제거\ndataList1.unbind(\"oncelldatachange\", func1);\n\n//dataList1에 등록된 모든 이벤트를 제거\ndataList1.unbind();\n```\n\n"
        },
        "getInsertedIndex": {
          "!type": "fn()",
          "!doc": "삽입 상태(상태값:C)인 행의 index를 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 삽입 상태인 행 index가 담긴 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getInsertedIndex();\n//return 예시 ) [ 0 , 2 ]\n```\n\n"
        },
        "getAllJSON": {
          "!type": "fn()",
          "!doc": "DataList의 1row의 값을 JSON으로 변환하여 전체 data를 1차원 배열에 담아 반환한다.\n\n관련 함수 : getAllFilteredJSON (filter가 적용된 전체 데이터를 반환)\n\n**Return:**\n\n```Array``` - JSON이 담긴 1차원 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// id가 name, addr인 2개 컬럼을 정의 한 DataList\nvar rsData = dataList1.getAllJSON());\n//reutrn 예시 - string으로 변환 )\n[ {name:\"손예진\" ,addr:\"서울\"} , {name:\"이광수\" ,addr:\"서울\"} , {name:\"류승룡\" ,addr:\"서울\"} ]\n```\n\n"
        },
        "getVoidJSON": {
          "!type": "fn()",
          "!doc": "삽입 후 삭제 상태(4,V)인 행들의 JSON 데이터를 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 삽입 후 삭제 상태(4,V)인 행들의 JSON 데이터가 담긴 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnJsonStr = dataList1.getVoidJSON();\n//return 예시 - 총 2건 )\n[\n    {\"dept\":\"\",\"name\":\"\",\"rowStatus\":\"V\"}\n    ,{\"dept\":\"\",\"name\":\"\",\"rowStatus\":\"V\"}\n]\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "컴포넌트가 scope=true인 wframe의 자식 컴포넌트일 때 해당 부모 wframe 객체를 반환하는 함수  \n```javascript\n scope=true인 wframe의 자식 컴포넌트가 아닐 경우 null을 반환한다.\n```\n\n\n\n**Return:**\n\n```Object``` - wframe 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n // 메인페이지에 wframe1이 있고 wframe1안에 wframe11이 있고 그 안에 dataList1이 있는 경우\n dataList1.getScope(); // wframe11 객체를 반환한다.\n```\n\n"
        },
        "undoAll": {
          "!type": "fn()",
          "!doc": "전체 데이터를 초기 설정 된 데이터(originalData)로 바꾸고 행의 상태를 초기화(R) 시킨다.\n\n초기 설정 된 데이터란 setJSON, setXML 등과 같은 API들을 통해 설정 된 데이터가 이에 속한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//모든 갱신되거나 삭제된 데이터를 되돌리고 초기 설정 데이터(originalData)로 변경한다.\ndataList1.undoAll();\n```\n\n"
        },
        "getUnmatchedXML": {
          "!type": "fn(col: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 데이터를 XML로 반환한다.\n\n**Parameters:**\n\n```col``` - ```Number||String:Y``` - 데이터를 검사할 컬럼의 index 또는 id\n\n```dataValue``` - ```String:Y``` - col에 해당하는 컬럼의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:Y``` - [true,false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 시작 행의 index\n\n```lastRowIndex``` - ```Number:Y``` - 마지막 행의 index\n\n**Return:**\n\n```XML``` - 범위안에 일치하는 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1의 index가 0번째 10까지의 데이터 중 birthday의 값중에 \"198\" 문자열이 없는 행의 데이터를 XML로 반환\nvar returnData = dataList1.getUnmatchedXML(\"birthday\",\"198\",false,0,10);\n//return 예시 )\n<list id=\"dc_tmpUserData\">\n    <map index=\"0\">\n        <name>아이유<\/name>\n        <birthday>19930516<\/birthday>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <name>정형돈<\/name>\n        <birthday>19780207<\/birthday>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"2\">\n        <name>유승호<\/name>\n        <birthday>19930817<\/birthday>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"5\">\n        <name>김현아<\/name>\n        <birthday>19920606<\/birthday>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "getUpdatedIndex": {
          "!type": "fn()",
          "!doc": "갱신 상태(1,U)인 행의 index를 배열로 반환한다.\n\n**Return:**\n\n```Array``` - 갱신 상태(1,U)인 행의 index를 담은 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//갱신 상태(U)의 index 반환 (총2건)\nvar rsData = dataList1.getUpdatedIndex();\n//return 예시 ) [3,4]\n```\n\n"
        },
        "redo": {
          "!type": "fn()",
          "!doc": "데이터를 변경된 시점 최근 한단계로 되돌린다.\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n// 데이터를 변경된 시점 최근 한단계로 되돌린다.\ndataList1.redo();\n```\n\n"
        },
        "getAllArray": {
          "!type": "fn()",
          "!doc": "DataList의 전체 data를 column의 정보와 1차원 배열로 변환 된 실 Data를 JSON에 담아 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// id가 name,addr인 2개 컬럼을 정의 한 DataList\nvar returnJSONArr = dataList1.getAllArray();\n\n//return 예시 - string으로 변환 ) \n{\n    \"columnInfo\":[\"name\",\"addr\"]\n    , \"data\":[\"손예진\",\"서울\",\"이광수\",\"서울\",\"류승룡\",\"서울\"]\n}\n```\n\n"
        },
        "getUnmatchedColumnData": {
          "!type": "fn(matchCol: number, dataValue: string, targetCol: number, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "matchCol에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 컬럼의 데이터들를 배열로 반환한다.\n\n**Parameters:**\n\n```matchCol``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 또는 id\n\n```dataValue``` - ```String:Y``` - matchCol에 해당하는 컬럼의 데이터와 비교할 문자열\n\n```targetCol``` - ```Number||String:Y``` - 데이터를 가져올 컬럼 index 또는 id\n\n```exactMatch``` - ```Boolean:Y``` - [true,false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:Y``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```Array``` - targetCol에 해당하는 컬럼의 데이터를 가지고 있는 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//row의 index가 0부터 10까지의 데이터 중에서 birthday의 값중에 \"198\" 문자열이 없는 행의 name 데이터를 반환\nvar rsData = dataList1.getUnmatchedColumnData(\"birthday\",\"198\",\"name\",false,0,10)\n//return 예시) [\"아이유\",\"정형돈\",\"유승호\",\"김현아\"]\n```\n\n"
        },
        "getUpdatedArray": {
          "!type": "fn()",
          "!doc": "갱신 상태(1,U)인 행들의 데이터의 정보는 JSON으로 반환한다.\n\n반환값의 columnInfo는 컬럼의 id가 담긴 배열을, data는 columnInfo에 명시된 컬럼의 순서대로 해당하는 데이터를 담은 배열이다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dept와 name이 정의 된 DataList의 경우\n\n//갱신 상태(U)의 데이터 반환 (총2건)  \nvar rsData = dataList1.getUpdatedArray());\n//return 예시 )\n{\n    \"columnInfo\":[\"dept\",\"name\"]\n    ,\"data\":[\"인사\",\"수정\",\"홍보\",\"수정2\"]\n}\n```\n\n"
        },
        "getFilteredColData": {
          "!type": "fn(colInfo: number)",
          "!doc": "filter 및 sort가 적용된 열의 데이터를 배열로 반환.\n```javascript\n(관련 함수)\n getColData (filter나 sort가 적용되지 않은 열의 전체 데이터를 반환)\n```\n\n\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 가져올 열 index 혹은 컬럼 ID\n\n**Return:**\n\n```Array``` - 열의 데이터가 담긴 1차원 배열 (filter 및 sort가 적용된 데이터)\n\n**Since:**\n\n5.0_2.3798B.20190909.171404\n\n**Sample:**\n\n```javascript\nvar returnArr = dataList1.getFilteredColData('name'); // name 컬럼의 데이터 배열.\n// (반환 예) [ \"손예진\" , \"이광수\"] (\"류승룡\" 은 filter가 적용되어 반환되지 않음.)\n```\n\n"
        },
        "initRowStatus": {
          "!type": "fn()",
          "!doc": "dataList의 상태를 모두 R로 변경한다. modifyAllStatus(R)과 비교시 onrowstatuschange이벤트를 발생하지 않는점을 제외하고 동작이 같다.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n dataList1.initRowStatus(); // dataList의 상태가 모두 \"R\"로 변경된다. onrowstatuschange 이벤트는 발생하지 않는다.\n```\n\n"
        },
        "getAllData": {
          "!type": "fn()",
          "!doc": "DataList의 전체 data를 1차원 배열로 반환한다.\n\n관련 함수 : getAllFilteredData (filter가 적용된 전체 데이터를 반환)\n\n**Return:**\n\n```Array``` - data가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// id가 name, addr인 2개 컬럼을 정의 한 DataList일 때.\nvar returnArr = dataList1.getAllData();\n\n//return 예시 ) [\"손예진\",\"서울\",\"이광수\",\"서울\",\"류승룡\",\"서울\"]\n```\n\n"
        },
        "getModifiedArray": {
          "!type": "fn()",
          "!doc": "변경 상태(상태값:C,U,D,E)행들의 정보가 담긴 JSON.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getModifiedArray()\n//return 예시 )\n{\n    \"columnInfo\": [ \"dept\", \"name\" ]\n    , \"data\": [ \"부서미지정\", \"행추가\", \"인사\", \"수정함\", \"홍보\", \"송강호\", \"IT\", \"전지현\" ]\n}\n```\n\n"
        },
        "getColumnID": {
          "!type": "fn(colIndex: number)",
          "!doc": "DataList에 정의 된 컬럼의 index를 받아 컬럼의 ID를 반환한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - DataList에 정의 된  컬럼 index.\n\n**Return:**\n\n```String``` - 컬럼의 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList 정의 예시\n<w2:dataList id=\"dataList1\">\n        <w2:columnInfo>\n            <w2:column id=\"addr\" name=\"주소\" dataType=\"text\"><\/w2:column>\n            <w2:column id=\"name\" name=\"이름\" dataType=\"text\"><\/w2:column>\n        <\/w2:columnInfo>\n<\/w2:dataList>\n\nvar colID = dataList1.getColumnID(0);\n//return 예시 ) \"addr\"\n```\n\n"
        },
        "getObjectType": {
          "!type": "fn()",
          "!doc": "dataCollection의 Type을 반환한다.\n\n**Return:**\n\n```String``` - [dataMap, dataList, linkedDataList] dataCollection의 타입을 반환한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar dcType = dataList1.getObjectType();\nreturn 예시 ) \"dataList\"\n```\n\n"
        },
        "removeRange": {
          "!type": "fn(startIdx: number, endIdx: number)",
          "!doc": "startIdx와 endIdx사이의 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다.\n\n**Parameters:**\n\n```startIdx``` - ```Number:Y``` - 데이터를 삭제할 범위의 시작 행\n\n```endIdx``` - ```Number:Y``` - 데이터를 삭제할 범위의 끝 행\n\n**Return:**\n\n```Array``` - 삭제된 범위 사이의 데이터 2차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//부서와 이름 컬럼이 정의 된 DataList의 경우\n\n//1번째와 2번째 row 삭제 \nvar returnArr = dataList1.removeRange(0, 1);\n//return 예시 ) [[\"IT\",\"전지현\"],[\"홍보\",\"송강호\"]]\n```\n\n"
        },
        "getRowStatusValue": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 상태를 숫자로 반환한다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n**Return:**\n\n```Number``` - 행의 상태 숫자값 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = dataList1.getRowStatusValue(0); // 첫 번째 행의 rowStatus 값(숫자)를 반환한다.\n//return 예시 ) 0\n```\n\n"
        },
        "removeRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 삭제할 행의 index\n\n**Return:**\n\n```Array``` - 삭제한 행이 가지고 있던 data 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 첫 번째 행을 삭제한다.\nvar returnArr = dataList1.removeRow(0);\n//return 예시 ) [\"IT\",\"전지현\"]\n```\n\n"
        },
        "getRowArray": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행들의 정보가 담긴 JSON을 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//0번째 row의 data객체\nvar tmpRsData = dataList1.getRowArray(0);\n\n//return 예시 )\n{\n    \"columnInfo\":[\"dept\",\"name\"]\n    ,\"data\":[\"인사\",\"손예진\"]\n}\n```\n\n"
        },
        "getInsertedJSON": {
          "!type": "fn()",
          "!doc": "삽입 상태(상태값:C)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.\n\n**Return:**\n\n```Array``` - 삽입 상태인 행들의 JSON 데이터가 담긴 1차원 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getInsertedJSON());\n//return 예시)\n[\n    { \"addr\": \"서울시\" , \"name\": \"손예진\", \"rowStatus\": \"C\" }\n    , { \"addr\": \"서울시\", \"name\": \"익명1\", \"rowStatus\": \"C\" }\n]\n```\n\n"
        },
        "setRowJSON": {
          "!type": "fn(rowIndex: number, rowData: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 1건(row)의 JSON 데이터를 넣는다.\n\noverwrite가 false인 경우에 행을 생성한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 index\n\n```rowData``` - ```JSON:Y``` - 행에 넣을 JSON객체 데이터\n\n```overwrite``` - ```Boolean:N``` - [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 name,dept 컬럼이 정의 된 경우\n \n//1번째 row에 name컬럼의 값만 있는 JSON 데이터 set\ndataList1.setRowJSON(0, {\"name\":\"여진구\"} );\n```\n\n"
        },
        "getOriginalCellData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colInfo에 해당하는 셀의 초기 데이터(최초에 설정된 데이터)를 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 초기 행 index\n\n```colIndex``` - ```String||Number:Y``` - 컬럼의 ID 또는 컬럼의 index\n\n**Return:**\n\n```String``` - 셀의 초기 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\nvar tmpRsData = dataList1.getOriginalCellData(0, \"name\");\n```\n\n"
        },
        "getRowJSON": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 data를 JSON객체로 반환한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 데이터를 가져올 행 index\n\n**Return:**\n\n```JSON``` - 해당 행의 JSON객체 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//name과 birthday 컬럼이 정의 된 dataList의 경우\n\nvar returnData = dataList1.getRowJSON(0);\n//return 예시 ) {\"name\":\"아이유\",\"birthday\":\"19930516\",\"rowStatus\":\"R\"}\n```\n\n"
        },
        "getVoidXML": {
          "!type": "fn()",
          "!doc": "삽입후 삭제 상태(4,V)인 행들의 데이터를 XML로 반환한다.\n\n**Return:**\n\n```XML``` - 삽입 후 삭제 상태(4,V)인 행들의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnXMLStr = dataList1.getVoidXML();\n//return 예시 - 총 2건 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <dept><\/dept>\n        <name><\/name>\n        <rowStatus statusValue=\"4\">V<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <dept><\/dept>\n        <name><\/name>\n        <rowStatus statusValue=\"4\">V<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "restore": {
          "!type": "fn()",
          "!doc": "데이터를 이전 한단계로 되돌린다.\n\n**Since:**\n\n5.0_1.3356B.20181116.131540\n\n**Sample:**\n\n```javascript\n// 데이터 변경 시점을 이전단계로 되돌린다.\ndataList1.restore();\n```\n\n"
        },
        "getRowIndexByStatus": {
          "!type": "fn(statusStr: string)",
          "!doc": "상태값(코드)가 일치하는 행의 index를 배열로 반환한다.\n\n단, 상태코드가 E인 경우는 반환되지 않는다.(removeRow와 같은 API를 호출 한 경우가 이에 해당된다.)\n\n상태코드가 여러개의 경우 CU와 같이 상태코드를 붙여 파라메터로 넘기면 된다.\n\n**Parameters:**\n\n```statusStr``` - ```String:Y``` - [C,U,D,V,R]상태코드 문자열로 대문자로 표현.\n\n**Return:**\n\n```Array``` - statusStr과 상태가 일치하는 행의 index가 담긴 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dataList1에서 삽입, 갱신, 삭제 상태인 행들의 rowIndex 배열\nvar returnArr = dataList1.getRowIndexByStatus('CUD');\n\n//return 예시 ) [1,3]\n```\n\n"
        },
        "getDeletedIndex": {
          "!type": "fn()",
          "!doc": "삭제 상태(D,V,3,4)인 행의 index를 배열로 반환한다. (remove API로 삭제 된 E상태의 행은 반환되지 않는다)\n\n**Return:**\n\n```Array``` - 삭제 상태(D,V,3,4)인 행의 index가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnArr = dataList1.getDeletedIndex();\n//reutrn 예시 ) [0, 2]\n```\n\n"
        },
        "setMatchIgnoreCase": {
          "!type": "fn(flag: bool)",
          "!doc": "getMatched류 (getMatchedJSON, getMatchedIndex 등)의 API 호출 시 대소문자를 구별하지 않을지 (true) 구별할지(false)를 설정하는 함수\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 대소문자 구별 : false , 대소문자 무시 : true\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ndataList1.setMatchIgnoreCase(true);\ndataList1.getMatchedIndex(\"ab\");\n// 실행결과 :  dataList1의 data중 ab 또는 Ab 또는 aB 또는 AB가 포함된 데이터들의 index를 반환한다.\n```\n\n"
        },
        "modifyRowStatus": {
          "!type": "fn(rowIndex: number, status: string)",
          "!doc": "rowIndex에 해당하는 행의 상태를 변경한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 상태를 변경할 행의 index\n\n```status``` - ```String:Y``` - 변경할 상태값. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.modifyRowStatus(0, 'D'); // 첫번째 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getDeletedArray": {
          "!type": "fn()",
          "!doc": "삭제 상태(상태값:D,E,V)인 행들의 정보가 담긴 JSON.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getDeletedArray();\n//return 예시 )\n{\n    \"columnInfo\": [ \"addr\", \"name\" ],\n    \"data\": [ \"서울\", \"송강호\", \"서울\", \"전지현\" ]\n}\n```\n\n"
        },
        "getMatchedXML": {
          "!type": "fn(colInfo: number, dataValue: string, exactMatch: bool, stRowIndex: number, lastRowIndex: number)",
          "!doc": "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 data를 XML로 반환한다.\n\n**Parameters:**\n\n```colInfo``` - ```Number||String:Y``` - 데이터를 검사할 컬럼 index 혹은 컬럼 ID\n\n```dataValue``` - ```String:Y``` - colInfo 해당하는 열의 값과 비교할 data\n\n```exactMatch``` - ```Boolean:N``` - [default:true, false]정확히 일치하는지 여부\n\n```stRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 시작할 행 index\n\n```lastRowIndex``` - ```Number:N``` - 데이터를 가져오는 것을 끝낼 행 index\n\n**Return:**\n\n```XML``` - 범위안의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getMatchedXML(\"dept\",\"인사\");\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <dept>인사<\/dept>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"3\">\n        <dept>인사<\/dept>\n        <name>류승룡<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "undoRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 row의 data와 상태값을 직전 data와 상태값으로 변경한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - data를 변경할 행의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 첫 번째 row의 data를 복구\ndataList1.undoRow(0); \n\n```\n\n"
        },
        "getUpdatedXML": {
          "!type": "fn()",
          "!doc": "갱신 상태(1,U)인 행들의 데이터를 XML로 반환한다.\n\n**Return:**\n\n```XML``` - 갱신 상태(1,U)인 행들의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//dept와 name이 컬럼이 정의 된 dataList의 경우\n\nvar rsData = dataList1.getUpdatedXML()\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"3\">\n        <dept>인사<\/dept>\n        <name>수정<\/name>\n        <rowStatus statusValue=\"1\">U<\/rowStatus>\n    <\/map>\n    <map index=\"4\">\n        <dept>홍보<\/dept>\n        <name>수정2<\/name>\n        <rowStatus statusValue=\"1\">U<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "setRowXML": {
          "!type": "fn(rowIndex: number, XML: +Object, overwrite: bool)",
          "!doc": "rowIndex에 해당하는 행에 1건(row)의 XML 데이터를 넣는다.\n\noverwrite가 false인 경우에 행을 생성한다.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - rowData를 넣어줄 행 index\n\n```XML``` - ```XML element:Y``` - rowData 행에 넣을 XML 데이터\n\n```overwrite``` - ```Boolean:N``` - [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//XML 데이터 문자열 조합\nvar tmpXMLStr = \"<map><name>전지현<\/name><dept>IT<\/dept><\/map>\";\n\n//XML 데이터 생성\nvar xmlDoc = WebSquare.xml.parse(tmpXMLStr);\n\n//dataList의 1번째 행에 1건의 XML 데이터 set.\ndataList1.setRowXML(0, xmlDoc);\n```\n\n"
        },
        "getRangeXML": {
          "!type": "fn(from: number, to: number)",
          "!doc": "from부터 to 까지의 범위의 행의 data를 XML로 반환한다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 데이터를 가져오는 범위의 시작 행 index\n\n```to``` - ```Number:Y``` - 데이터를 가져오는 범위의 끝 행 index\n\n**Return:**\n\n```XML``` - 범위에 해당하는 행의 XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar tmpRsData = dataList1.getRangeXML(0,2);\n\n//return 예시 )\n<list id=\"dataList1\">\n    <map index=\"0\">\n        <dept>인사<\/dept>\n        <name>손예진<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"1\">\n        <dept>홍보<\/dept>\n        <name>송강호<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n    <map index=\"2\">\n        <dept>IT<\/dept>\n        <name>전지현<\/name>\n        <rowStatus statusValue=\"0\">R<\/rowStatus>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "modifyRangeStatus": {
          "!type": "fn(from: number, to: number, status: string)",
          "!doc": "from부터 to까지의 범위의 행들의 상태를 변경 한다.\n\n**Parameters:**\n\n```from``` - ```Number:Y``` - 변경할 범위의 시작 행의 index\n\n```to``` - ```Number:Y``` - 변경할 범위의  끝의 index\n\n```status``` - ```String:Y``` - 변경할 상태값 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"). status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ndataList1.modifyRangeStatus(1 , 3, 'D'); // 두번째, 세번째 행을 삭제 상태로 변경한다.\n```\n\n"
        },
        "getInsertedData": {
          "!type": "fn()",
          "!doc": "삽입 상태(상태값:C)인 행들의 데이터가 담긴 2차원 배열.\n\n**Return:**\n\n```Array``` - 삽입 상태인 행들의 2차원 데이터 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar rsData = dataList1.getInsertedData();\n//return 예시 )\n[ [ \"서울\" , \"신규회원1\" ] , [ \"서울\" , \"신규회원2\" ] ]\n```\n\n"
        }
      },
      "selectbox": {
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nselectbox1.getDataListInfo();\n```\n\n"
        },
        "removeAll": {
          "!type": "fn(isInitialize: bool)",
          "!doc": "모든 항목을 삭제하는 기능. \n\nchooseOption 및 allOption 항목이 정의 된 경우 isInitialize값을 true로 적용하면 해당 항목은 삭제되지 않음.\n\n**Parameters:**\n\n```isInitialize``` - ```Boolean:N``` - chooseOption 및 allOption 항목의 삭제 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|chooseOption 및 allOption 항목을 삭제하지 않음.|null|\n|\"false\"|(기본 값): chooseOption 및 allOption 항목을 삭제함.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// chooseOption, allOption의 항목을 포함한 모든 항목이 삭제\nselectbox1.removeAll();\n\n// chooseOption, allOption의 항목을 제외한 항목이 삭제\nselectbox1.removeAll(true);\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setDelimiter": {
          "!type": "fn(delimiter: string)",
          "!doc": "delimiter 속성을 설정한다.\n\n**Parameters:**\n\n```delimiter``` - ```String:Y``` - value와 label을 함께 표시할 때 사용하는 구분자\n\n**Since:**\n\n5.0_4.4780B.20221216.152932\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisplayMode": {
          "!type": "fn(displayMode: string)",
          "!doc": "displayMode 속성을 설정한다.\n\n**Parameters:**\n\n```displayMode``` - ```String:Y``` - 선택 항목의 표현 방법 (\"value\", \"label\", \"value delim label\", \"label delim value\")\n\n**Since:**\n\n5.0_4.5109B.20231213.165007\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getText": {
          "!type": "fn(isOriginal: bool)",
          "!doc": "현재 선택된 항목의 label을 반환.\n\n**Parameters:**\n\n```isOriginal``` - ```Boolean:N``` - label 값 종류. [default:true, false]\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|formatter가 적용되지 않은 label 값 반환.|null|\n|\"false\"|formatter가 적용 된 label 값 반환.|null|\n\n**Return:**\n\n```String``` - 현재 선택된 항목의 label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// label이 \"남성\"인 항목이 선택 된 경우\nvar returnValue = selectbox1.getText();\n// (반환 값) \"남성\"\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "setTitle": {
          "!type": "fn(title: string)",
          "!doc": "컴포넌트의 title 속성을 설정.\n\n**Parameters:**\n\n```title``` - ```String:Y``` - 속성으로 설정할 값.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n // title 속성을 \"test\"로 설정하는 예제\n\n selectbox1.setTitle(\"test\");\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "setEnableColumn": {
          "!type": "fn(columnId: string, enableColumnFalseValue: string)",
          "!doc": "enableColumn 속성을 동적으로 설정.\n\nenableColumn 속성으로 설정된 컬럼은 Select와 바인딩된 DataList의 컬럼 중 선택 항목으로의 disable 여부에 대한 설정 값을 가지고 있음.\n\nenableColumn 속성은 Select의 선택 항목 목록 중 특정 항목을 disable 시키기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n enableColumn\n enableColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - enableColumn으로 설정할 컬럼의 ID. (disable 시킬 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```enableColumnFalseValue``` - ```String:N``` - 목록을 disable 시키기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_5.4774B.20221202.165615\n\n**Sample:**\n\n```javascript\n// Select는 DataList와 바인딩되어 있음.\nselect1.setEnableColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Select의 선택 목록에 disable 처리되어 표시됨.\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 항목의 인덱스를 반환. chooseOption 및 allOption 속성이 적용된 경우 해당 항목도 인덱스에 포함됨.\n\n**Return:**\n\n```Number``` - 선택된 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// SelectBox가 chooseOption 속성을 사용하는 경우,\n<xf:select1 id=\"selectbox1\" chooseOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\"disabledClass=\" w2selectbox_disabled\" appearance=\"minimal\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = selectbox1.getSelectedIndex();\n// (반환 값) 1\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "changeChooseOption": {
          "!type": "fn(newValue: string, newLabel: string)",
          "!doc": "chooseOption 속성을 변경.\n```javascript\n(관련 속성)\nchooseOption\n```\n\n\n\n**Parameters:**\n\n```newValue``` - ```String:Y``` - 변경할 chooseOption의 value\n\n```newLabel``` - ```String:Y``` - 변경할 chooseOption의 label\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제) value \"0\", label \"선택\"으로 변경\nselectbox1.changeChooseOption(\"0\",\"선택\");\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "getItemCount": {
          "!type": "fn()",
          "!doc": "선택 항목 개수를 반환. chooseOption, allOption 속성이 적용 된 경우 해당 항목도 개수에 포함됨.\n\n**Return:**\n\n```Number``` - 항목 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 selectBox가 chooseOption 속성을 사용하는 경우,\n// 항목의 개수는 선택 항목 개수와 chooseOption 개수를 더한 값.\n<xf:select1 id=\"selectbox1\" chooseOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\"disabledClass=\" w2selectbox_disabled\" appearance=\"minimal\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = selectbox1.getItemCount();\n// (반환 값) 3\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getNextTabID": {
          "!type": "fn()",
          "!doc": "nextTabID 속성의 설정 값을 반환.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar nextTabID = selectbox1.getNextTabID();\n```\n\n"
        },
        "addItem": {
          "!type": "fn(value: string, label: string, index: number, refresh: bool)",
          "!doc": "선택 항목을 추가. index를 지정하지 않으면 하위로 추가됨.\n\n단, chooseOption 및 allOption 속성을 사용할 경우 해당 항목도 index에 포함됨.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 항목의 value\n\n```label``` - ```String:Y``` - 항목의 label\n\n```index``` - ```Number:N``` - 항목의 index\n\n```refresh``` - ```Boolean:N``` - 항목이 dataList(또는 instance)와 연동된 경우, dataList(instance)의 자동 갱신 여부. 값이 명시되지 않은 경우(undefined) selectbox의 dataListAutoRefresh 속성 값을 따름.\n\n**Return:**\n\n```Number``` - 추가된 항목의 index\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 항목을 추가하지 않고 chooseOption 속성을 true로 정의한 경우\n<xf:select1 chooseOption=\"true\" id=\"selectbox1\" style=\"position: relative;width: 148px;height: 21px;\" disabledClass=\"w2selectbox_disabled\" appearance=\"minimal\">\n    <xf:choices><\/xf:choices>\n<\/xf:select1>\n\n// index를 지정하지 않고 항목 추가\nselectbox1.addItem( 'M', '남성' );    //\"-선택-\" 항목 하위로(제일 마지막에) 추가된다. 항목의 순서는 \"-선택-\",\"남성\" 가 된다.\n// (반환 값) 1\n\n//index를 0으로 지정하여 항목 추가\nselectbox1.addItem( 'F', '여성' );    //0번째에 항목이 추가되어 \"-선택-\" 항목 위에 추가된다. 항목의 순서는 \"여성\",\"-선택-\",\"남성\" 가 된다.\n// (반환 값) 0\n```\n\n"
        },
        "setGridItemset": {
          "!type": "fn(obj: +Object)",
          "!doc": "바인딩된 gridViewItemset을 변경. \n\n기존에 존재하는 gridViewItemset을 삭제하고 새로 구성.\n\n**Parameters:**\n\n```obj``` - ```JSON||XML:Y``` - 새로 구성할 gridViewItemset에 대한 정보를 담은 객체. (JSON 혹은 XML 객체만 가능.)\n\n|property|type|description|\n|:-|:-|:-|\n|obj.nodeset|<String>|DataList의 id. \"data:\"로 시작해야 함.|\n|obj.label|<String>|label로 지정할 컬럼의 ID.|\n|obj.value|<String>|value로 지정할 컬럼의 ID.|\n|obj.width|<Number>|gridViewItemset의 가로 길이.|\n|obj.height|<Number>|gridViewItemset의 세로 길이.|\n|obj.item|<Array>|각 컬럼의 설정을 담은 JSON 배열.|\n\n**Since:**\n\n5.0_2.3486B.20190213.174135\n\n**Sample:**\n\n```javascript\nvar obj = {\n        \"nodeset\" : \"data:dataList2\",\n        \"label\" : \"col1\",\n        \"value\" : \"col2\",\n        \"width\" : 400,\n        \"height\" : 300, \n        \"item\" : [{\"ref\" : \"col1\", \"header\" : \"label\"},{\"ref\" : \"col2\", \"header\" : \"value\"},{\"ref\" : \"col3\", \"header\" : \"dummy\"}]\n        };\nselectbox1.setGridItemset(obj);\n```\n\n"
        },
        "setNextTabID": {
          "!type": "fn(componentID: string, componentScope: string)",
          "!doc": "nextTabID 속성을 설정.\n\n두번째 인자로 nextTabID에 해당하는 컴포넌트가 위치한 frame의 ID를 넘겨주면 scope를 설정할 수 있음.\n```javascript\n(관련 속성)\nnextTabID\n```\n\n\n\n**Parameters:**\n\n```componentID``` - ```String:Y``` - nextTabID로 설정할 컴포넌트의 ID\n\n```componentScope``` - ```String:N``` - nextTabID로 설정할 컴포넌트의 scope\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nselectbox1.setNextTabID(\"input2\", \"wframe1\");\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. DataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n2.0_1.3134B.20130625.183609\n\n**Sample:**\n\n```javascript\n// dataMap1의 hobby key와 selectbox1 컴포넌트의 value를 바인딩하는 경우\nselectbox1.setRef(\"data:dataMap1.hobby\");\n\n// InstanceData의 \"res/userData/hobby\"와 연동 할 경우.\nselectbox1.setRef(\"res/userData/hobby\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setVisibleColumn": {
          "!type": "fn(columnId: string, visibleColumnFalseValue: string)",
          "!doc": "visibleColumn 속성을 동적으로 설정.\n\nvisibleColumn 속성으로 설정된 컬럼은 Select와 바인딩된 DataList의 컬럼 중 선택 항목으로의 표시 여부에 대한 설정 값을 가지고 있음.\n\nvisibleColumn 속성은 Select의 선택 항목 목록 중 특정 항목을 감추기 위한 용도로 사용됨.\n\nselectedIndex는 영향을 받지 않고 항상 전체 목록을 기준으로 동작.\n```javascript\n(관련 속성)  \n visibleColumn\n visibleColumnFalseValue\n```\n\n\n\n**Parameters:**\n\n```columnId``` - ```String:Y``` - visibleColumn으로 설정할 컬럼의 ID. (감출 항목에 대한 데이터를 가지고 있는 컬럼)\n\n```visibleColumnFalseValue``` - ```String:N``` - 목록을 감추기 위한 조건에 해당하는 값.\n\n**Since:**\n\n5.0_2.3747B.20190731.184739\n\n**Sample:**\n\n```javascript\n// Select는 DataList와 바인딩되어 있음.\nselect1.setVisibleColumn(col3, false);\n// (실행 결과) DataList에서 col3 컬럼의 값을 false로 갖는 행은 Select의 선택 목록에 표시되지 않음.\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "showChooseOption": {
          "!type": "fn(chooseOption: bool)",
          "!doc": "chooseOption을 설정.\n\n**Parameters:**\n\n```chooseOption``` - ```boolean:Y``` - 설정값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// (예제)\nselectbox1.showChooseOption(true);\n```\n\n"
        },
        "validate": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n(유효성 검증 속성)\n mandatory\n```\n\n\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// chooseOption 및 mandatory 속성을 지정.\n<xf:select1 id=\"selectbox1\" chooseOption=\"true\" mandatory=\"true\">\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnValue = selectbox1.validate();\n// (반환 값) - false 사용자가 아무 것도 선택하지 않은 상태. (\"-선택-\"(chooseOption=\"true\")이 선택된 상태))\n// (반환 값)- true (SelectBox에서 항목을 선택한 상태)\n\n// displaymessage=\"true\" 속성을 지정하고 유효성 검사에서 false가 반환될 경우,\n// 엔진에서 내부에서 설정한 \"필수 입력 항목입니다\"가 표시됨.\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "선택된 항목의 value 값을 반환.\n\n**Return:**\n\n```String``` - 선택된 항목의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// value가 \"M\"인 항목이 선택 된 경우.\n var returnValue = selectbox1.getValue();\n// (반환 값) \"M\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "컴포넌트를 화면에서 보이지 않도록 숨김.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "validateObject": {
          "!type": "fn()",
          "!doc": "컴포넌트의 유효성 관련 속성값을 통해 유효성 검사를 실행.\n```javascript\n(관련 속성)\n displaymessage=true\n\n(유효성 관련 속성)\n mandatory\n minLength\n maxLength \n minByteLength\n maxByteLength\n```\n\n\n\n**Since:**\n\n5.0_1.2816B.20171013.201819\n\n**Sample:**\n\n```javascript\n//아래와 같이 chooseOption과 mandatory 속성이 적용 된 selectbox가 정의 된 경우.\n<xf:select1 disabledClass=\"w2selectbox_disabled\" appearance=\"minimal\" direction=\"auto\" chooseOption=\"true\" id=\"selectbox1\"\nstyle=\"position: absolute;width:229px;height:66px;left:692px;top:268px;\" mandatory=\"true\" chooseOptionLabel=\"-선택-\">\n    <xf:choices>\n        <xf:itemset nodeset=\"data:dataList3\">\n            <xf:label ref=\"label\"><\/xf:label>\n            <xf:value ref=\"value\"><\/xf:value>\n        <\/xf:itemset>\n    <\/xf:choices>\n<\/xf:select1>\n\nvar returnObj = selectbox1.validateObject();\n// (반환 값 - selectbox의 값이 없을 경우 ) returnObj 객체 반환 \n\nreturnObj.callerId = \"selectbox1\" returnObj.type = \"mandatory\" returnObj.value = \"\"\n// (반환 값 - selectbox의 값이 있을 경우) 비어있는 객체가 반환\n\n// displaymessage=\"true\" 설정을 사용할 경우, 검사에 실패하면 Engine에 설정된 메시지가 alert으로 표시됨. \n// (alert 메세지 예시) 필수 입력 항목입니다\n```\n\n"
        },
        "deleteItem": {
          "!type": "fn(idx: number, refresh: bool)",
          "!doc": "주어진 index에 해당하는 항목을 삭제. chooseOpion 및 allOption 속성이 true인 경우, 해당 항목도 index에 포함됨.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 삭제할 항목의 index\n\n```refresh``` - ```Boolean:N``` - 항목이 dataList(또는 instance)와 연동된 경우, dataList(instance)의 자동 갱신 여부. 값이 명시되지 않은 경우(undefined) selectbox의 dataListAutoRefresh 속성 값을 따름.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 chooseOption 속성과 항목이 정의 된 경우\n<xf:select1 id=\"selectbox1\" chooseOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\"disabledClass=\" w2selectbox_disabled\" appearance=\"minimal\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\n// 1번째 index 항목 삭제\nvar returnValue = selectbox1.deleteItem(1); \n// 0번째 index의 항목은 chooseOption 속성 설정으로 인한 \"-선택-\"임으로 그 하위의 \"남성\"가 삭제. \n// (반환 값) {label: \"남성\", value: \"M\"}\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "파라메터로 넘어온 값에 해당하는 선택 항목을 선택.  \n\n여러 항목을 한번에 설정할 경우 공백(space)를 이용하여 구분. 주어진 값에 대한 선택 항목이 없는 경우, 아무 동작이 일어나지 않음.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 항목의 value\n\n**Return:**\n\n```Boolean``` - 설정 결과\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// label이 \"남성\"이고 value가 \"M\"인 항목이 정의 된 경우\nselectbox1.setValue(\"M\");   \n// (결과) \"남성\" 항목이 선택됨.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setNodeSet": {
          "!type": "fn(nodeset: string, label: string, value: string)",
          "!doc": "선택 항목 목록을 설정. \n\nDataList와 바인딩할 경우 nodeset 파라미터는 data:로 시작해야 함.\n\n**Parameters:**\n\n```nodeset``` - ```String:Y``` - DataList의 ID. \"data:\"로 시작해야 함. (혹은 InstanceData의 XPath)\n\n```label``` - ```String:N``` - label로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 label에 설정할 nodeset 하위의 XPath)\n\n```value``` - ```String:N``` - value로 설정할 컬럼의 ID. 할당하지 않으면 기존 값이 그대로 적용됨. (혹은 value에 설정할 nodeset 하위의 XPath)\n\n**Since:**\n\n2.0_1.2076A.20120604.165715\n\n**Sample:**\n\n```javascript\n// DataList 정의.\n<w2:dataList id=\"dataList1\">\n    <w2:columnInfo>\n        <w2:column id=\"lbl\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"code\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n    <w2:data use=\"true\">\n        <w2:row>\n            <lbl><![CDATA[zero]]><\/lbl>\n            <code><![CDATA[0]]><\/code>\n        <\/w2:row>\n        <w2:row>\n            <lbl><![CDATA[one]]><\/lbl>\n            <code><![CDATA[1]]><\/code>\n        <\/w2:row>\n    <\/w2:data>\n<\/w2:dataList>\n\n// (예제 1) DataList1과 바인딩하고 label은 lbl 컬럼을, value는 code컬럼을 사용.   \nselectbox1.setNodeSet('data:dataList1','lbl','code');\n\n// (예제 2) DataList2와 바인딩하고 label 및 value는 예전 컬럼 정보를 사용. \nselectbox1.setNodeSet('data:dataList2');    \n// (결과) 기존에 할당된 label의 lbl과 value의 code는 그대로 유지되고 dataList만 변경됨.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(idx: number)",
          "!doc": "주어진 인덱스에 해당하는 항목을 선택/해제(토글링)하는 작업을 수행. \n\nchooseOption 및 allOption 속성이 정의 된 경우 해당 항목도 인덱스에 포함됨.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 항목의 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// SelectBox가 chooseOption 속성을 사용하는 경우,\n<xf:select1 id=\"selectbox1\" chooseOption=\"true\" style=\"position: relative;width: 148px;height: 21px;\"disabledClass=\" w2selectbox_disabled\" appearance=\"minimal\" >\n    <xf:choices>\n        <xf:item>\n            <xf:label><![CDATA[남성]]><\/xf:label>\n            <xf:value><![CDATA[M]]><\/xf:value>\n        <\/xf:item>\n        <xf:item>\n            <xf:label><![CDATA[여성]]><\/xf:label>\n            <xf:value><![CDATA[F]]><\/xf:value>\n        <\/xf:item>\n    <\/xf:choices>\n<\/xf:select1>\n\n// 아래를 실행하면, chooseOption=\"true\"임으로 \"남성\" 항목이 선택됨.\nselectbox1.setSelectedIndex(1);\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        },
        "setText": {
          "!type": "fn(lbl: string, isOriginal: bool)",
          "!doc": "lbl 파라메터와 같은 label을 가지는 항목을 선택.\n\n**Parameters:**\n\n```lbl``` - ```String:Y``` - 선택하고자 하는 항목의 label\n\n```isOriginal``` - ```Boolean:N``` - format이 적용되지 않은 원래 값으로 label을 찾을 것인지에 대한 여부. [default:true, false]\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|(기본 값) : format이 적용되지 않은 값을 사용.|null|\n|\"false\"|format이 적용된 값을 사용.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// label이 \"남성\"로 정의 된 경우.\nselectbox1.getText('남성');\n```\n\n"
        }
      },
      "pageList": {
        "pageLeft": {
          "!type": "fn()",
          "!doc": "pageSize 기준으로 이전 페이지 번호의 첫번째 페이지를 선택.  \n\npageSize=10이고 현재 23 페이지에 있을 때, pageLeft();를 실행하면 페이지 번호 11로 이동.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// pageSize=\"10\"이고 현재 23 페이지에 있을 때,\n pageList1.pageLeft();\n// (결과) 페이지 번호 11로 이동.\n```\n\n"
        },
        "getLabel": {
          "!type": "fn(idx: number)",
          "!doc": "인덱스에 해당하는 label을 반환.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 페이지의 인덱스\n\n**Return:**\n\n```String``` - 주어진 인덱스에 해당하는  label\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n var returnValue = pageList1.getLabel(1);\n// returnValue는 1.\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "getCount": {
          "!type": "fn()",
          "!doc": "PageList의 전체 페이지 수를 반환.\n\n**Return:**\n\n```Number:Y``` - 전체 페이지 수\n\n**Since:**\n\n2.0_1.3742B.20131231.102003\n\n**Sample:**\n\n```javascript\n// 전체 페이지 수 확인\n pageList1.getCount();\n```\n\n"
        },
        "setCount": {
          "!type": "fn(count: number, flag: bool)",
          "!doc": "PageList의 전체 페이지 수를 새로 지정.  \n\n변경된 전체 페이지 수를 기준으로 PageList가 갱신됨.\n\nAPI 호출시 페이지가 첫페이지로 초기화 됨.\n\n**Parameters:**\n\n```count``` - ```Number:Y``` - 새로 지정할 전체 페이지 수\n\n```flag``` - ```Boolean:N``` - 이전 출력 형태 유지 유무\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|유지.|null|\n|\"false\"|(기본 값) :  1 페이지로 갱신.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n pageList1.setCount(100);\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "getPageSize": {
          "!type": "fn()",
          "!doc": "pageSize를 조회.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// pageList1의 pageSize를 확인\n pageList1.getPageSize();\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "moveRight": {
          "!type": "fn()",
          "!doc": "선택된 인덱스를 1만큼 증가시킴.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 현재 페이지가 3 페이지인 경우, 아래를 실행.\n pageList1.moveRight();\n// (결과) 3 페이지에서 4 페이지로 이동.\n```\n\n"
        },
        "setIdxClass": {
          "!type": "fn(idx: number)",
          "!doc": "setSelectedIndex와 같은 역할을 하는 함수.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 선택하려는 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n pageList1.setIdxClass(5);\n// (결과) 5번째 페이지를 선택.\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 인덱스를 반환.\n\n**Return:**\n\n```Number``` - 현재 선택된 인덱스.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 5번째 페이지가 선택된 경우,\n var returnValue = pageList1.getSelectedIndex();\n// returnValue는 5.\n```\n\n"
        },
        "moveLeft": {
          "!type": "fn()",
          "!doc": "선택된 인덱스를 1만큼 감소시킴.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 현재 페이지가 3페이지인 경우, 아래를 수행.\n pageList1.moveLeft();\n// (결과) 3페이지에서 2페이지로 이동.\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "pageRight": {
          "!type": "fn()",
          "!doc": "pageSize 기준으로 다음 페이지 번호의 첫번째 페이지를 선택.  \n\npageSize=10이고 현재 23 페이지에 있을 때, pageLeft();를 실행하면 페이지 번호 31로 이동.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// pageSize=\"10\"이고 현재 23 페이지에 있을 때,\n pageList1.pageRight();\n// (결과) 페이지 번호 31로 이동.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "setValue": {
          "!type": "fn(value: string)",
          "!doc": "setSelectedIndex와 같은 역할을 하는 함수.\n\n**Parameters:**\n\n```value``` - ```String:Y``` - 선택하려는 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n pageList1.setValue(5);\n// (결과) 5번째 페이지를 선택.\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(idx: number)",
          "!doc": "페이지의 선택된 인덱스를 변경.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 선택하려는 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n pageList1.setSelectedIndex(5);\n// (결과) 5번째 페이지를 선택.\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "gridView": {
        "getAllDisplayXML": {
          "!type": "fn()",
          "!doc": "화면에 보이는 data를 XML로 반환한다.(displayFormat등이 적용 된 data)\n\n본 API는 filter는 무시되며 filter가 반영 된 Data는 getAllVisibleXML API를 사용.\n\n**Return:**\n\n```XML``` - XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setBlockSelect": {
          "!type": "fn(colIndex: number, flag: number)",
          "!doc": "그리드의 컬럼의 blockSelect 값을 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```flag``` - ```number:Y``` - 컬럼에 적용할 값\n\n**Since:**\n\n5.0_4.4573B.20220107.145147\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.setBlockSelect(\"a\", true); // id가 \"a\"인 컬럼에 blockSelect를 true로 변경\n```\n\n"
        },
        "getCellPosition": {
          "!type": "fn(row: number, colIndex: string, propertyName: string)",
          "!doc": "셀의 위치 정보(top 또는 left)를 반환.\n\n**Parameters:**\n\n```row``` - ```Number:Y``` - 셀의 행 index (세로 스크롤 위치와는 무관하게 현재 그리드에서 최상단 행에 위치한 셀의 행 index를 0으로 보고 계산.)\n\n```colIndex``` - ```String||Number:Y``` - 셀의 컬럼 index 또는 id\n\n```propertyName``` - ```String:Y``` - [top, left] 반환 할 위치 정보명\n\n**Return:**\n\n```Number``` - 셀의 위치 정보(top이나 left)의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnClass": {
          "!type": "fn(colIndex: number)",
          "!doc": "column에 동적으로 적용된 사용자 class를 반환\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 열번호 또는 컬럼 아이디\n\n**Return:**\n\n```String:Y``` - 컬럼에 적용된 사용자 class이름\n\n**Since:**\n\n5.0_5.4666B.20220705.144534\n\n**Sample:**\n\n```javascript\n gridView1.getColumnClass(\"col1\"); // col1 열에 적용된 class 이름을 가져온다. 적용된 class가 없으면 undefined를 반환.\n```\n\n"
        },
        "getUncheckedJSON": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 JSON으로 변환하여 배열에 담아 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - ckeckbox여부를 검사할 열 index 또는 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellDisplayData": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환.\n\ndisplayFormat등이 적용 된 data.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String||Number:Y``` - 셀의 컬럼 index 또는 id\n\n**Return:**\n\n```String``` - rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFocusedRowStatus": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀이 속한 row의 상태를 상태문자로 반환.\n```javascript\n(상태값의 세부 내용)\n 초기상태 : R \n 갱신 : U \n 삽입 : C \n 삭제 : D \n 삽입 후 삭제 : V\n```\n\n\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderNodeSet": {
          "!type": "fn(headerId: string, nodeset: string, label: string, value: string)",
          "!doc": "header의 inputType이 select의 경우 적용되며 list의 nodeSet을 설정한다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 id\n\n```nodeset``` - ```String:N``` - 변경하려는 nodeset값으로 \"data:\"라는 prefix 뒤에 dataList id를 정의.\n\n```label``` - ```String:N``` - 변경하려는 label로 dataList의 컬럼 id\n\n```value``` - ```String:N``` - 변경하려는 value로 dataList의 컬럼 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 DataList와 gridView가 정의 된 경우\n//DataList - id가 dc_genderCode이고 disp id를 가진 컬럼은 사용자가 보는 label 값이, code id를 가진 컬럼은 value가 되는 값이 정의. \n//gridView - header 컬럼의 inputType이 select이고 header의 id가 hGender 가 정의.\n\n//gridView의 hGender 헤더의 selectbox list를 변경\ngridView1.setHeaderNodeSet(\"data:dc_genderCode\",\"disp\",\"code\");\n```\n\n"
        },
        "getRowDisabled": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행에 적용된 disabled 속성 값을 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행의 index\n\n**Return:**\n\n```Boolean``` - 해당 행에 적용된 disabled속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFooterStyle": {
          "!type": "fn(footerId: string, style: string, value: string)",
          "!doc": "footer cell의 스타일 속성을 설정.\n\n**Parameters:**\n\n```footerId``` - ```String||Number:Y``` - 그리드 footer cell의 id 또는 index (rowNum 컬럼은 \"$rowNum\", rowStatus 컬럼은 \"$rowStatus\"로 지정)\n\n```style``` - ```String:Y``` - 적용할 CSS 속성명\n\n```value``` - ```String:Y``` - 적용할 CSS 속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowNumColumnWidth": {
          "!type": "fn(size: number)",
          "!doc": "rowNum 컬럼의 폭을 변경한다.\n\n**Parameters:**\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭으로 px로 계산된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "clearGroupby": {
          "!type": "fn()",
          "!doc": "groupBy를 해제.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnIoFormat": {
          "!type": "fn(colIndex: number, ioFormat: string, dateMast: string)",
          "!doc": "컬럼의 ioFormat 속성을 설정. \n\ndataType이 date인 경우에만 동작.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```ioFormat``` - ```String:Y``` - 새로 설정할 ioFormat\n\n```dateMast``` - ```String:N``` - 새로 설정할 dateMask(displayFormat)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setScrollLeft": {
          "!type": "fn(left: number)",
          "!doc": "그리드의 가로 스크롤의 위치를 입력받은 값만큼 이동. (단위: px)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 가로스크롤의 scrollLeft값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTotalCol": {
          "!type": "fn()",
          "!doc": "전체 컬럼 개수를 반환.(rowNum 및 rowStatus 컬럼 제외)\n\n**Return:**\n\n```Number``` - (rowNum 및 rowStatus 컬럼을 제외한) 전체 컬럼 개수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderPosition": {
          "!type": "fn(headerId: string, propertyName: string)",
          "!doc": "header 셀의 위치 정보(top이나 left)를 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 Id\n\n```propertyName``` - ```String:Y``` - [top, left] 반환할 위치 정보의 이름\n\n**Return:**\n\n```Number``` - header의 위치 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTopRowIndex": {
          "!type": "fn()",
          "!doc": "현재 화면에 보여지는 최상단 row의 rowIndex를 반환. \n\nGridView에 표현 된 데이터가 없으면 -1을 반환.\n\n**Return:**\n\n```Number``` - 최상단 row의 rowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "showGroupbyZone": {
          "!type": "fn()",
          "!doc": "groupbyZone 영역을 (hideGroupbyZone에 의해 감춰진 경우) 다시 표시.\n\n**Since:**\n\n5.0_2.3381B.20181207.163817\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "showCustomFilter2": {
          "!type": "fn(headerID: string)",
          "!doc": "사용자 필터를 지정할 수 있는 사용자 지정 필터 팝업 창을 표시.\n\n**Parameters:**\n\n```headerID``` - ```String:Y``` - 사용자 필터를 적용할 컬럼의 헤더 ID\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCheckedIndex": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 check된 행의 index를 배열로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n**Return:**\n\n```Array``` - 행 index가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 정의 된 gridView가 정의되어 있고 checkbox의 컬럼의 ID가 chk 인 경우\n\nvar tmpRs = gridView1.getCheckedIndex(\"chk\");\n// (반환 예) [1,2,3]\n```\n\n"
        },
        "refreshRow": {
          "!type": "fn(rowIndex: number)",
          "!doc": "해당 인덱스의 row를 다시 렌더링.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeCol": {
          "!type": "fn(colIndex: number, flag: bool)",
          "!doc": "데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 컬럼을 제외하기 위해 사용.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 자동으로 merge하는 기능을 사용할지 말지를 지정할 대상 column.\n\n```flag``` - ```Boolean:Y``` -\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.mergeCol(1, false); // 2번째 column을 data를 통한 merge기능에서 제외.\n grid1.mergeByCol(); // 2번째 column을 제외하고 mergeByCol이 수행됨.\n```\n\n"
        },
        "getAllVisibleXML": {
          "!type": "fn()",
          "!doc": "현재 보이는 data를 XML로 반환.(filter 적용)\n\n**Return:**\n\n```XML``` - XML 데이터\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowNumVisible": {
          "!type": "fn(visibleColumnFalseValue: string)",
          "!doc": "GridView 속성 rowNumVisible=true 설정한 경우 number 컬럼 보여주기/숨기기 를 조정할 수 있는 기능\n\n**Parameters:**\n\n```visibleColumnFalseValue``` - ```String:N``` - 숨기기 조건에 해당하는 값.\n\n**Since:**\n\n5.0_4.5050B.20231016.161751\n\n**Sample:**\n\n```javascript\n// GridView 속성 rowNumVisible=\"true\" 설정하고, 아래와 같이 실행할 경우 number 컬럼 숨기기\ngridView1.setRowNumVisible(false);\n// GridView 속성 rowNumVisible=\"true\" 설정하고, 아래와 같이 실행할 경우 number 컬럼 보여주기\ngridView1.setRowNumVisible(true);\n```\n\n"
        },
        "setCellBackgroundColor": {
          "!type": "fn(rowIndex: number, colIndex: number, color: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 배경색을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 설정할 행 index\n\n```colIndex``` - ```Number||String:Y``` - 배경색을 설정할 열 index 또는 id\n\n```color``` - ```String:Y``` - 배경색으로 설정할 색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "advancedExcelDownload": {
          "!type": "fn(options: +Object, infoArr: +Object)",
          "!doc": "그리드의 데이터를 엑셀 파일로 저장. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON 형태로 저장된 그리드의 엑셀 다운로드 옵션. \n\n\n파일 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:Y>|[default: excel.xls] 다운로드하려는 파일의 이름. 필수 입력 값.|\n|options.sheetName|<String:N>|[default: sheet] Excel의 시트 이름.<\/xmp>|\n|다운로드|요청 관련 옵션|null|\n\n\n```infoArr``` - ```Object:N``` - 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열\n\n|property|type|description|\n|:-|:-|:-|\n|infoArr.rowIndex|<Number:N>|내용을 표시할 행번호|\n|infoArr.colIndex|<Number:N>|내용을 표시할 열번호|\n|infoArr.rowSpan|<Number:N>|병합할 행의 수|\n|infoArr.colSpan|<Number:N>|병합할 열의 수|\n|infoArr.text|<String:N>|표시할 내용|\n|infoArr.textAlign|<String:N>|표시할 내용의 정렬 방법 (left, center, right)|\n|infoArr.fontSize|<String:N>|font size 설정 (예: \"20px\")|\n|infoArr.fontName|<String:N>|font name 설정|\n|infoArr.color|<String:N>|font color 설정 (예: \"red\")|\n|infoArr.fontWeight|<String:N>|font weight 설정 (예: \"bold\")|\n|infoArr.drawBorder|<String:N>|cell의 border 지정 (예: true)|\n|infoArr.borderColor|<String:N>|cell의 border color를 지정 (예: \"#FF0000\", \"red\")|\n|infoArr.borderWidth|<String:N>|cell의 border width 지정 ( \"thin\", \"medium\", \"thick\")|\n|infoArr.wordWrap|<String:N>|cell의 줄 바꿈 기능 (예: \"true\")|\n|infoArr.bgColor|<String:N>|cell의 배경 color 설정 (예: \"red\")|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//별도의 옵션 없이 excel을 download 할 경우\nvar excelOpt = {};  //excel download 옵션\nexcelOpt.fileName = \"excelData.xls\";    //또는 xlsx 확장자 사용\n\ngridView1.advancedExcelDownload( excelOpt );\n```\n\n"
        },
        "getCellChecked": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "rowIndex와 colIndex로 해당하는 셀의 check 여부를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 index\n\n```colIndex``` - ```Number||String:Y``` - 셀의 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 셀의 check여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderSize": {
          "!type": "fn(headerId: string, sizeName: string)",
          "!doc": "header 셀의 크기 정보(width나 height)를 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 Id\n\n```sizeName``` - ```String:Y``` - [width, height]반환할 크기 정보의 이름\n\n**Return:**\n\n```Number``` - header의 크기값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSubtotalVisible": {
          "!type": "fn(flag: bool)",
          "!doc": "subtotal을 숨기거나 다시 표시.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - subtotal 표시 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|false|subtotal을 숨김.|null|\n|true|숨겨진 subtotal을 다시 표시.|null|\n\n**Since:**\n\n5.0_2.3928B.20200130.184003\n\n**Sample:**\n\n```javascript\n\n// subtotal 숨기기 \ngridView1.setSubtotalVisible(false);\n\n// subtotal 다시 표시\ngridView1.setSubtotalVisible(true);\n\n```\n\n"
        },
        "getHeaderIndex": {
          "!type": "fn(header: string)",
          "!doc": "header id로 header index를 반환.\n\n**Parameters:**\n\n```header``` - ```String:Y``` - id\n\n**Return:**\n\n```Number``` - header index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "advancedExcelUpload": {
          "!type": "fn(options: +Object)",
          "!doc": "엑셀 파일을 읽어 그리드의 데이터를 설정. (JDK 1.5 이상에서 사용 가능)\n\n업로드하는 엑셀 파일이 Excel 97 이상인 경우 지원. (Excel 5.0/7.0 미지원.)\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태로 저장된 그리드의 엑셀 업로드 옵션\n\n\n업로드 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.popupUrl|<String:N>|업로드시에 호출할 popup의 url|\n|options.delim|<String:N>|업로드시 데이터를 구분하는 구분자 (default: , )|\n|options.status|<String:N>|[default: R]업로드된 데이터의 초기 상태값, 설정하지 않으면 \"R\"로 설정되며 \"C\"값을 설정 가능.|\n|options.pwd|<String:N>|엑셀파일에 암호가 걸려 있는 경우, 비밀번호<\/xmp>|\n|업로드|데이터 관련 옵션|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//별도의 옵션 없이 excel을 upload 할 경우\ngridView1.advancedExcelUpload( {} );    // 별도의 옵션을 지정하지 않는 경우 빈 객체를 넘겨야 함.\n```\n\n"
        },
        "getColumnBackgroundColor": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 배경색을 반환. \n\nAPI로 별도의 backgroundColor를 지정하지 않은 경우 (empty string)을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 배경색을 반환할 열 index 또는 id\n\n**Return:**\n\n```String``` - 해당 열에 지정된 배경색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number, readOnlyFlag: bool)",
          "!doc": "type에 따라 readOnly 속성값을 설정.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - [grid, row, column, cell]readOnly 속성을 설정할 type\n\n```rowIndex``` - ```Number:Y``` - readOnly속성을 설정할 행 index\n\n```colIndex``` - ```Number||String:Y``` - readOnly속성을 설정할 열 index 또는 id\n\n```readOnlyFlag``` - ```Boolean:Y``` - [true, false]readOnly 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//이름, 성별, 나이가 정의된 gridView가 있고 각 column의 id가 name, gender, age 인 경우\n\n//gridView 전체에 readOnly을 적용할 경우\ngridView1.setReadOnly(\"grid\", true);\n\n//gridView 전체에 readOnly을 초기화할 경우 (cell, row, column의 readOnly도 초기화)\ngridView1.setReadOnly(\"grid\", \"clear\");\n\n//gridView 전체에 readOnly을 초기화 이후 적용할 경우 (cell, row, column의 readOnly도 초기화)\ngridView1.setReadOnly(\"grid\", true, \"clear\");\n \n//gridView의 1번째행에 readOnly을 적용할 경우\ngridView1.setReadOnly(\"row\",0,true);\n\n//gridView의 \"이름\"열에 readOnly을 적용할 경우\ngridView1.setReadOnly(\"column\",\"name\",true);\n\n//gridView의 1번째행의 \"나이\"열에 readOnly을 적용할 경우\ngridView1.setReadOnly(\"cell\",0,\"age\",true);\n```\n\n"
        },
        "setCellReadOnly": {
          "!type": "fn(rowIndex: number, colIndex: number, readOnly: bool)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly 속성을 설정할 행 index\n\n```colIndex``` - ```Number||String:Y``` - readonly 속성을 설정할 열 index 또는 id\n\n```readOnly``` - ```Boolean:Y``` - [true,false]readonly 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowVisible": {
          "!type": "fn(rowIndex: number, flag: bool)",
          "!doc": "특정 행의 표시/숨김 여부를 설정.  \n\n본 함수로 숨김 처리된 행은 clearRowVisible(); 함수를 사용하여 다시 표시 가능. \n```javascript\n(관련 함수)\n clearRowVisible();\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행 표시 여부를 설정할 row의 index.\n\n```flag``` - ```Boolean:Y``` - 해당 행의 표시 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|해당 행을 표시|null|\n|\"false\"|해당 행을 감춤.|null|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 30번째 행 숨기기\n gridView1.setRowVisible(30, false);\n```\n\n"
        },
        "setGridWidth": {
          "!type": "fn(width: number)",
          "!doc": "gridView의 넓이를 설정한다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 변경할 width값. px로 계산된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number, disableFlag: bool)",
          "!doc": "type에 따라 disabled 속성 값을 설정한다.\n\n**Parameters:**\n\n```type``` - ```String:Y``` - [grid, row, column, cell]disabled 속성을 설정할 type\n\n```rowIndex``` - ```Number:Y``` - disabled 속성을 설정할 행 index\n\n```colIndex``` - ```Number||String:Y``` - disabled 속성을 설정할 열 index 또는 id\n\n```disableFlag``` - ```Boolean:Y``` - disabled 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//이름, 성별, 나이가 정의된 gridView가 있고 각 column의 id가 name, gender, age 인 경우\n\n//gridView 전체에 disable을 적용 할 경우\ngridView1.setDisabled(\"grid\",true);\n\n//gridView의 1번째행에 disable을 적용 할 경우\ngridView1.setDisabled(\"row\",0,true);\n\n//gridView의 \"이름\"열에 disable을 적용 할 경우\ngridView1.setDisabled(\"column\",\"name\",true);\n\n//gridView의 1번째행의 \"나이\"열에 disable을 적용 할 경우\ngridView1.setDisabled(\"cell\",0,\"age\",true);\n```\n\n"
        },
        "drillTo": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행을 표현하기 위해 모든 조상 행들을 오픈.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 화면에 표현하려는 행의 인덱스\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getGroupbyData": {
          "!type": "fn(isJSON: bool)",
          "!doc": "현재 그룹핑된 정보를 반환.\n\n**Parameters:**\n\n```isJSON``` - ```Boolean:N``` - 반환 데이터 구조. false일 경우 string 형태로 반환.\n\n**Return:**\n\n```JSON||String:y``` - JSON 데이터\n\n**Since:**\n\n5.0_4.4502B.20210930.182853\n\n**Sample:**\n\n```javascript\nJSON 형태로 반환. groupby() option형태와 동일.\nvar data = gridView1.getGroupbyData();\n\nstring으로 반환\nvar data = gridView1.getGroupbyData(false);\n\n```\n\n"
        },
        "clearRowVisible": {
          "!type": "fn()",
          "!doc": "setRowVisible(); API를 이용하여 숨김 처리한 행을 모두 표시하도록 처리.\n```javascript\n(관련 함수)\n setRowVisible();\n```\n\n\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// setRowVisible로 숨김 처리한 행을 모두 표시.\n gridView1.clearRowVisible();\n```\n\n"
        },
        "getFixedColumnLastIndex": {
          "!type": "fn(includeDefaultColumn: bool)",
          "!doc": "그리드에 fixedColumn이 설정되어 있을 경우 fixedColumn 중 맨 오른쪽 끝에 해당하는 column의 index를 반환합니다.\n\n**Parameters:**\n\n```includeDefaultColumn``` - ```boolean:Y``` - rowNum 컬럼 및 rowStatus 컬럼 갯수 포함 여부. 기본은 포함.\n\n**Return:**\n\n```Number``` - 맨 오른쪽에 위치한 fixedColumn의 index\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnWidth": {
          "!type": "fn(colIndex: string, size: number)",
          "!doc": "컬럼의 width을 변경.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 폭을 변경할 column의 index 또는 id\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭으로 px단위로 계산됨.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderValue": {
          "!type": "fn(headerId: string)",
          "!doc": "header의 값을 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 id\n\n**Return:**\n\n```String``` - header의 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getAllFocusedRowIndex": {
          "!type": "fn()",
          "!doc": "포커스 된 셀들의 rowIndex를 반환한다. ctrl키를 이용하여 다중 cell을 선택한 경우 사용.\n\n**Return:**\n\n```Array``` - 포커스 된 셀들의 rowIndex를 담은 array\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n//ctrl키를 이용하여 다중 cell을 선택하였을 경우\ngridView1.getAllFocusedRowIndex();\n//(반환 예) [ 0 , 1 ]\n```\n\n"
        },
        "setColumnDisableEdit": {
          "!type": "fn(rowIndex: number, onoff: string)",
          "!doc": "inputType이 autoComplete인 경우 column의 disableEdit 속성을 변경.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```onoff``` - ```String:Y``` - disableEdit 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnOrder": {
          "!type": "fn(columnOrderArray: +Object)",
          "!doc": "주어진 array를 기준으로 컬럼 순서를 재설정하며 파라메터에 정의되지 않은 컬럼은 파라메터 컬럼 뒤쪽으로 위치함.\n\n**Parameters:**\n\n```columnOrderArray``` - ```Array:Y``` - 컬럼의 순서를 차례로 담은 배열(컬럼 index와 id 모두 사용 가능)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//이름, 성별, 나이, 생년월일이 정의 된 gridView가 정의되어 있고,\n// 각 body 컬럼의 id가 name, gender, age, birthday 인 경우\n\n//나이 컬럼과 성별 컬럼의 위치를 변경.\ngridView1.setColumnOrder([\"age\",\"gender\"]);\n//API 실행 후의 컬럼 순서는 나이, 성별, 이름, 생년월일 이 된다.\n```\n\n"
        },
        "mergeByRestricCol": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 column 내에서 연속적으로 데이터가 같으면서 동시에 자신의 왼쪽에 위치한 column이 merge된 경우 해당 row들을 병합. \n\nn+1컬럼에서 n컬럼을 upperColumn으로 지정한 형태.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n\n**Since:**\n\n5.0_4.5083A.20231109.121635\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getAllDisplayJSON": {
          "!type": "fn()",
          "!doc": "화면에 (displayFormat 등이 적용되어)출력된 데이터를 JSON으로 반환.\n\n데이터가 필터링된 경우, 필터링은 무시하고 전체 데이터를 JSON으로 반환. 필터링된 경우 소트상태 또한 무시.\n\n관련 함수: getAllVisibleJSON (필터링된 결과를 JSON으로 반환할 경우)\n\n비슷한 함수: getAllDisplayData (전체 데이터를 1차원 배열로 반환), getAllDisplayXML (전체 데이터를 XML로 반환)\n\n**Return:**\n\n```JSON``` - JSON 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ngridView1.getAllDisplayJSON();\n// (반환 예) [{\"col1\":\"아이유\",\"col2\":\"1993-05-16\"},{\"col1\":\"정형돈\",\"col2\":\"1978-02-07\"},{\"col1\":\"유승호\",\"col2\":\"1993-08-17\"},{\"col1\":\"김민희\",\"col2\":\"1982-03-01\"}]\n```\n\n"
        },
        "mergeCellsFixedRows": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "fixedRow 영역 내에서 mergeCells를 실행.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정. 설정 관련 string은 아래와 같음.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 병합.\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 병합.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행.\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행.\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지. 이 API를 호출할 경우 keepMerge 속성이 강제로 \"true\"로 설정됨.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한. 이 API를 호출할 경우 fixedRows 속성이 강제로 \"true\"로 설정됨.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnNodeSet": {
          "!type": "fn(colIndex: string)",
          "!doc": "inputType = select 또는 autoComplete인 경우, 연결된 NodeSet 정보를 반환. \n\n            setColumnNodeSet API와 대응.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 컬럼 ID 혹은 Index\n\n**Return:**\n\n```Object``` - itemsetObj colIndex에 해당하는 컬럼의 NodeSet정보를 담은 객체 <br />\n            해당 객체는 nodeset, label, value 등을 포함.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n var itemsetObj = gridView.getColumnNodeSet(\"col1\");\n var nodeset = itemsetObj.nodeset;\n var label = itemsetObj.label;\n var value = itemsetObj.value;\n```\n\n"
        },
        "redrawColumn": {
          "!type": "fn(colIndex: string, valid: bool)",
          "!doc": "col에 해당하는 열을 다시 그림. (Reset.)\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 컬럼의 id 또는 index\n\n```valid``` - ```Boolean:N``` - [default:true, false] inputType=\"select\"인 경우 selectbox와 cell의 value의 적합성에 따라 데이터를 처리 유무.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellDisableEdit": {
          "!type": "fn(rowIndex: number, colIndex: number, onoff: string)",
          "!doc": "inputType이 custom인 셀이 autoComplete인 경우 disableEdit 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```onoff``` - ```String:Y``` - disableEdit 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderColor": {
          "!type": "fn(headerId: string, color: string)",
          "!doc": "header 셀의 글씨 색상을 설정.\n\n**Parameters:**\n\n```headerId``` - ```String||Number:Y``` - header cell의 id 또는 index\n\n```color``` - ```String:Y``` - 글씨 색상\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFixedRightColumn": {
          "!type": "fn(count: number)",
          "!doc": "우측에 고정할 컬럼 수(fixedRightColun)를 동적으로 제어. \n```javascript\n(관련 속성)\n fixedRightColumn (오른쪽에 세로로 틀고정할 컬럼의 수)\n```\n\n\n\n**Parameters:**\n\n```count``` - ```Number:Y``` - 제일 우측에서부터 세로로 고정할 컬럼의 수. 2개의 컬럼을 고정할 경우 \"2\"를 지정.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 오른쪽 2개의 컬럼을 동적으로 고정\ngridView1.setFixedRightColumn(2); \n// 오른쪽 세로 틀고정을 해제\ngridView1.setFixedRightColumn(0);\n```\n\n"
        },
        "setHeaderDisabled": {
          "!type": "fn(headerId: number, disabled: bool)",
          "!doc": "header의 disalbled를 설정.\n\n**Parameters:**\n\n```headerId``` - ```Number||String:Y``` - header의 index 또는 id\n\n```disabled``` - ```Boolean:Y``` - [true, false]header의 disabled 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setGridHeight": {
          "!type": "fn(height: number)",
          "!doc": "gridView의 높이를 설정한다.\n\n**Parameters:**\n\n```height``` - ```Number:Y``` - 변경할 height값. px로 계산된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTotalRow": {
          "!type": "fn()",
          "!doc": "행의 개수를 반환.\n\n**Return:**\n\n```Number``` - 행의 개수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowReadOnly": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행에 적용된 readonly속성 값을 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly속성을 가져올 행 index\n\n**Return:**\n\n```Boolean``` - 해당 행에 적용된 readonly속성값으로 별도로 속성을 지정하지 않은 경우 \"\"(empty string)을 반환.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setImageSrc": {
          "!type": "fn(colIndex: number, src: string)",
          "!doc": "inputType이 textimage인 image를 동적으로 변경하기 함수.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```src``` - ```String:Y``` - colIndex에 해당하는 열에 적용할 image URL\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setSummary": {
          "!type": "fn(str: string)",
          "!doc": "gridView의 HTML summary 속성값을 설정.\n\n**Parameters:**\n\n```str``` - ```String:Y``` - summary 속성에 설정될 string\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "groupby": {
          "!type": "fn(Options: +Object)",
          "!doc": "둘 이상의 컬럼의 데이터를 그룹핑하여 그룹핑 결과(통계)만 표시.  \n\ncolumnMove 속성과 동시에 사용할 수 없음.\n\n**Parameters:**\n\n```Options``` - ```Object:N``` - 그룹핑 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.closeGroup|<Boolean:N>|그룹핑 결과물 숨김 상태|\n|options.rowNumHeader|<Boolean:N>|rowNumVisible=\"true\"인 경우, 전체 건수를 헤더에 표시|\n|options.rowNumFooter|<Boolean:N>|rowNumVisible=\"true\"인 경우, 전체 건수를 푸터에 표시|\n|options.rowStatusHeader|<Boolean:N>|rowStatusVisible=\"true\"인 경우, 전체 건수를 헤더에 표시|\n|options.rowStatusFooter|<Boolean:N>|rowStatusVisible=\"true\"인 경우, 전체 건수를 푸터에 표시|\n|options.groupbyHeader|<Object:N>|전체 건수를 헤더에 표현하는 방식 설정|\n|options.groupbyFooter|<Object:N>|전체 건수를 푸터에 표현하는 방식 설정|\n|options.showOnlyLastDepth|<Boolean:N>|depthStr()에 의해 depth정보 표시할 경우 마지막 depth만 표시|\n|options.sortIndex|<Array:N>|sort될 column index|\n|options.sortOrder|<Array:N>|1로 설정되면 오름차순 정렬, -1로 설정되면 내림차순 정렬|\n|options.hideHeader|<Boolean:N>|결과물의 숨김 상태|\n|options.hideFooter|<Boolean:N>|결과물의 숨김 상태|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\nvar options = {\n    sortIndex: [2],\n    sortOrder: [1],\n    hideHeader: false,\n    hideFooter: true,\n    groupbyHeader: {\n       depth_0: [{colSpan:\"3\", value: \"일자별 합계\"}, {inputType: \"expression\", expression: \" SUM('complete')\", className:\"aaa\"}] \n       }\n    };\ngridView1.groupby(options);\n```\n\n"
        },
        "removeCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "grid 셀에 적용된 사용자 class를 삭제\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderClass": {
          "!type": "fn(headerId: number, className: string)",
          "!doc": "grid header 셀에 동적으로 사용자 class를 적용.\n\n**Parameters:**\n\n```headerId``` - ```Number:Y``` - header cell의 id\n\n```className``` - ```String:Y``` - td에 적용할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getVisibleRowNum": {
          "!type": "fn()",
          "!doc": "현재 화면(눈에 보여지는 영역)에 그려진 row의 수를 반환. \n\nsubTotal 및 footer는 제외. \n\n총 10건의 row의 데이터가 설정된 경우, 화면에는 4건이 표시되고 넘치는 영역은 스크롤로 표현 될 때, 반환 값은 4.\n\n**Return:**\n\n```Number``` - 현재 눈에 보여지는 row의 수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUncheckedXML": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 uncheck된 행의 data를 XML로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n**Return:**\n\n```XML``` - XML Data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 순서대로 컬럼에 정의 된 gridView가 있고 inputType속성이 checkbox인 컬럼의 id가 chk인 경우\n \nvar tmpRs = gridView1.getUncheckedXML(\"chk\");   //checkbox컬럼의 id가 chk.\n// (반환 예)\n<list>\n    <map status=\"0\" statusValue=\"R\" id=\"0\">\n        <chk>0<\/chk>\n        <name>아이유<\/name>\n        <birthday>19930516<\/birthday>\n    <\/map>\n    <map status=\"0\" statusValue=\"R\" id=\"1\">\n        <chk>0<\/chk>\n        <name>정형돈<\/name>\n        <birthday>19780207<\/birthday>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "getRowNumVisible": {
          "!type": "fn()",
          "!doc": "rowNumVisible 옵션 값을 반환.\n\n**Return:**\n\n```Boolean``` - rowNumVisible 설정 값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeHeaderClass": {
          "!type": "fn(headerId: number, cellClassName: string)",
          "!doc": "grid Header 셀에 적용된 사용자 class를 삭제.\n\n**Parameters:**\n\n```headerId``` - ```Number:Y``` - header cell의 id\n\n```cellClassName``` - ```String:Y``` - 삭제할 class\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "hasChild": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown이 적용 된 경우 rowIndex에 해당하는 행이 child row를 가지고 있는지의 여부를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - child row를 가지고 있는지 검사 할 rowIndex\n\n**Return:**\n\n```Boolean``` - child row를 가지고 있는지 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowVisible": {
          "!type": "fn(rowIndex: number)",
          "!doc": "row의 visible 여부를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - hidden여부를 가져올 row의 index.\n\n**Return:**\n\n```Boolean``` - 해당 row의 visible 여부. 감춰진 상태면 false, 보이는 상태면 true 반환.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.getRowVisible(30);\n// 30번째 row의 visible 여부를 반환.\n```\n\n"
        },
        "getGridReadOnly": {
          "!type": "fn()",
          "!doc": "gridView 전체에 대한 readOnly 속성을 반환한다.\n\n**Return:**\n\n```Boolean``` - 그리드의 읽기 전용 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "refreshColumn": {
          "!type": "fn(colIndex: number)",
          "!doc": "해당 인덱스의 column을 다시 렌더링.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellDisabled": {
          "!type": "fn(rowIndex: number, colIndex: number, disabled: bool)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 disabled속성 값을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled 속성을 설정할 행 번호\n\n```colIndex``` - ```Number||String:Y``` - disabled 속성을 설정할 열 index 또는 id\n\n```disabled``` - ```Boolean:Y``` - [true,false]disabled 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellReadOnly": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "colIndex와 rowIndex에 해당하는 셀의 readonly 속성 값을 반환. \n\n별도로 readonly 속성을 지정하지 않은 경우 (empty string)을 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly속성을 가져올 행 index\n\n```colIndex``` - ```String||Number:Y``` - readonly속성을 가져올 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 셀에 적용된 readonly속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setUseFilterList": {
          "!type": "fn(flag: bool)",
          "!doc": "gridView의 useFilterList속성을 동적으로 제어.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - useFilterList속성을 true로 변경할지 false로 변경할지에 대한 boolean값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setVisibleRowNum": {
          "!type": "fn(rowCount: number)",
          "!doc": "visibleRowNum을 동적으로 설정한다.\n\n숫자가 아니거나 0이하의 값을 인자로 전달할 경우 아무 동작도 하지 않는다.\n\n데이터 크기(row 전체 개수. filter가 적용되었을 경우 filter 처리된 기준)보다 큰 값을 입력한 경우 데이터 크기와 동일한 값이 입력된 것으로 처리한다.\n\n**Parameters:**\n\n```rowCount``` - ```Number:Y``` - 동적으로 설정할 visibleRowNum값\n\n**Since:**\n\n5.0_4.4756B.20221028.131412\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.setVisibleRowNum(10); // visibleRowNum 값을 동적으로 10으로 설정. 화면에 10개의 행이 보인다.\n```\n\n"
        },
        "setCellDataType": {
          "!type": "fn(rowIndex: number, colIndex: number, dataType: string)",
          "!doc": "특정 cell의 dataType 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```dataType``` - ```String:Y``` - 변경하려는 dataType 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCaptionAuto": {
          "!type": "fn(captionTitle: string)",
          "!doc": "captionTitle 값을 표 제목으로 설정. \n```javascript\n(관련 속성)\n captionTitle\n captionAuto\n```\n\n\n\n**Parameters:**\n\n```captionTitle``` - ```String:N``` - captionTitle 속성에 신규로 적용할 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.setCaptionAuto(\"new title\");\n```\n\n"
        },
        "setRowStatusVisible": {
          "!type": "fn(visibleColumnFalseValue: string)",
          "!doc": "GridView 속성 rowStatusVisible=true 설정한 경우 status컬럼 보여주기/숨기기 를 조정할 수 있는 기능\n\n**Parameters:**\n\n```visibleColumnFalseValue``` - ```String:N``` - 숨기기 조건에 해당하는 값.\n\n**Since:**\n\n5.0_4.5050B.20231016.161751\n\n**Sample:**\n\n```javascript\n// GridView 속성 rowStatusVisible=\"true\" 설정하고, 아래와 같이 실행할 경우 status 컬럼 숨기기\ngridView1.setRowStatusVisible(false);\n// GridView 속성 rowStatusVisible=\"true\" 설정하고, 아래와 같이 실행할 경우 status 컬럼 보여주기\ngridView1.setRowStatusVisible(true);\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.getDataListInfo();\n```\n\n"
        },
        "mergeRow": {
          "!type": "fn(rowIndex: number, flag: bool)",
          "!doc": "데이터를 통해 자동으로 merge하는 기능을 사용할 때 특정 행을 제외하기 위해 사용.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 자동으로 merge하는 기능을 사용할지 말지를 지정할 대상 row.\n\n```flag``` - ```Boolean:Y``` -\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n grid1.mergeRow(1, false); // 2번째 row를 data를 통한 merge기능에서 제외.\n grid1.mergeByRow(); // 2번째 row를 제외하고 mergeByRow가 수행됨.\n```\n\n"
        },
        "mergeCells": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "행 또는 열 기준으로 연속적으로 같은 데이터들을 병합.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정. 설정 관련 string은 아래와 같음.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제한다.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 병합.\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 병합.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행.\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행.\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "modifyUncheckStatus": {
          "!type": "fn(col: string, status: string)",
          "!doc": "col에 해당하는 열의 inputType이 checkbox일 때 uncheck된 행의 상태코드값을 일괄 변경.\n\n**Parameters:**\n\n```col``` - ```String:Y``` - uncheck 여부를 검사할 컬럼의 index 혹은 컬럼 id\n\n```status``` - ```String:Y``` - [R,C,U,D,V]변경할 상태코드값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, name 컬럼이 정의 된 gridView가 있고 2건의 row가 셋팅되어있고 checkbox의 컬럼 id는 chk임.\n//1번째 row의 checkbox는 check가 되어있고 2번째 row의 checkbox는 uncheck되었을 경우\n\n//modifyCheckedStatus API를 이용하여 checkbox 컬럼의 id를 통해 uncheck된 컬럼의 상태값을 일괄 D 상태로 변경.\ngridView1.modifyUncheckedStatus(\"chk\",\"D\");\n\n//1번째 row의 Status를 가져온다.(checkbox가 check 된 경우)\nvar tmpRs1 = gridView1.getRowStatus(0);\n// (반환 예) \"R\"   // row에 별도의 수정 작업을 하지 않은 경우\n\n//2번째 row의 Status를 가져온다.(checkbox가 uncheck 된 경우)\nvar tmpRs2 = gridView1.getRowStatus(1);\n// (반환 예) \"D\"\n```\n\n"
        },
        "hideGroupbyZone": {
          "!type": "fn()",
          "!doc": "groupbyZone 영역을 숨김 처리.\n\n**Since:**\n\n5.0_2.3381B.20181207.163817\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setGridStyle": {
          "!type": "fn(doc: string)",
          "!doc": "doc에 따라서 그리드를 다시 그려줍니다.\n\n**Parameters:**\n\n```doc``` - ```String:Y``` - 그리드를 다시 그릴때 필요한 JSON 문자열\n\n**Since:**\n\n5.0_4.4987B.20230821.162030\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowBackgroundColor": {
          "!type": "fn(rowIndex: number, color: string)",
          "!doc": "rowIndex에 해당하는 행의 배경색을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n```color``` - ```String:Y``` - 배경색의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "changeCurrency": {
          "!type": "fn(columnID: string, dataType: string, displayFormat: string, delimiter: string, decimalDelimiter: string)",
          "!doc": "컬럼 단위로 화면에 나타나는 셀 값들의 화폐 단위를 동적으로 변경.\n\n단, 컬럼의 dataType이 number, tenge, rupee, euro인 경우만 지원. \n```javascript\n(gridView.column의 관련 속성)\n dataType=number \n dataType=tenge \n dataType=rupee \n dataType=euro\n```\n\n\n\n**Parameters:**\n\n```columnID``` - ```String:Y``` - 화폐단위를 적용할 컬럼 id\n\n```dataType``` - ```String:Y``` - 적용할 화폐단위(number, euro, rupee, tenge)\n\n```displayFormat``` - ```String:N``` - 컬럼에 적용할 displayFormat\n\n```delimiter``` - ```String:N``` - 통화 구분자\n\n```decimalDelimiter``` - ```String:N``` - 통화 소수 구분자\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n gridView1.changeCurrency(\"standardAmt\", \"euro\", \"#.###,00\");를 호출하면,\n 컬럼 ID가 \"standardAmt\"인 컬럼의 중의 cell값이 \"1234\"인 경우, gridView에 나타나는 값은 \n \"1.234,00\" 이 된다.    \n 또한 gridView1에 옵션으로 다음과 같이 설정되어 있다면, euroMask=\"#.###,00\"\n gridView1.changeCurrency(\"standardAmt\", \"euro\");를 호출하면,\n 컬럼 ID가 \"standardAmt\"인 컬럼의 중의 cell값이 \"1234\"인 경우, gridView에 나타나는 값은 동일하게 \n \"1.234,00\" 이 된다.\n```\n\n"
        },
        "getDataList": {
          "!type": "fn()",
          "!doc": "현재 binding된 dataList의 Id를 반환. (dataList속성 값)\n\n**Return:**\n\n```String``` - data의 Id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderBackgroundColor": {
          "!type": "fn(headerId: string)",
          "!doc": "header 셀에 적용된 배경색 값을 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n**Return:**\n\n```String``` - header 셀의 배경색 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellDisplayFormat": {
          "!type": "fn(rowIndex: number, colIndex: number, displayFormat: string)",
          "!doc": "특정 cell의 displayFormat 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```displayFormat``` - ```String:Y``` - 변경하려는 displayFormat 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCheckedJSON": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 JSON Data를 Array에 담아 반환. \n\n해당 컬럼이 checkbox가 아닐경우 비어있는 배열을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 열 index 또는 id\n\n**Return:**\n\n```Array``` - JSON Data를 담은 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 정의 된 gridView가 정의되어 있고 checkbox의 컬럼의 ID가 chk 인 경우\n\nvar tmpRs = gridView1.getCheckedJSON(\"chk\");\n// (반환 예) [{\"name\":\"정형돈\",\"birthday\":\"19780207\",\"chk\":\"1\",\"rowStatus\":\"U\"},{\"name\":\"유승호\",\"birthday\":\"19930817\",\"chk\":\"1\",\"rowStatus\":\"U\"},{\"name\":\"김민희\",\"birthday\":\"19820301\",\"chk\":\"1\",\"rowStatus\":\"U\"}]\n```\n\n"
        },
        "getDataLength": {
          "!type": "fn()",
          "!doc": "[deprecated]getRowCount()를 사용한다. 행의 수를 반환.\n\n**Return:**\n\n```number``` - 행의 수\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getParentRowIndex": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 부모를 찾으려는 행의 index\n\n**Return:**\n\n```Number``` - 부모행의 rowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnDisabled": {
          "!type": "fn(colIndex: number, disabled: bool)",
          "!doc": "colIndex에 해당하는 열에 disabled속성을 일괄 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - disabled속성을 설정할 열 index 또는 id\n\n```disabled``` - ```Boolean:Y``` - [true, false]disabled속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnReadOnly": {
          "!type": "fn(colIndex: number, readOnly: bool)",
          "!doc": "colIndex에 해당하는 열에 readonly 속성을 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - readonly속성을 설정할 열 index 또는 id\n\n```readOnly``` - ```Boolean:Y``` - [true, false]readonly속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColIdByHeaderId": {
          "!type": "fn(headerId: string)",
          "!doc": "header의 columnId에 해당하는 body의 columnId를 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 ID\n\n**Return:**\n\n```String``` - body의 columnId\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnDisabled": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열에 disabled속성 값을 반환. \n\n별도로 disable을 지정하지 않은 경우 (empty string)을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - disabled속성을 가져올 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 열에 적용된 disabled속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeByColRec": {
          "!type": "fn(options: +Object)",
          "!doc": "mergeByCol을 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByRow를 수행.\n\n세로 병합이 더 우선순위가 높음.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnReadOnly": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열에 적용된 readonly속성 값을 반환.\n\n별도의 readonly가 지정되지 않은 경우 (empty string)을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 열에 적용된 readonly속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellAllowChar": {
          "!type": "fn(rowIndex: number, colIndex: number, allowChar: string)",
          "!doc": "특정 cell의 allowChar 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```allowChar``` - ```String:Y``` - 변경하려는 allowChar 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getHeaderID": {
          "!type": "fn(header: number)",
          "!doc": "header index로 header id를 반환.\n\n**Parameters:**\n\n```header``` - ```Number:Y``` - index\n\n**Return:**\n\n```String``` - header의 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellBackgroundColor": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 배경색을 반환. \n\nAPI로 별도의 BackgroundColor를 지정하지 않은 경우 (empty string)이 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 반환할 행 index\n\n```colIndex``` - ```String||Number:Y``` - 배경색을 반환할 열 index 또는 id\n\n**Return:**\n\n```String``` - 해당 행에 지정된 배경색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFocusedHeaderObj": {
          "!type": "fn(headerId: string)",
          "!doc": "헤더에 text가 아닌 inputType이 selectbox, checkbox와 같은 Object일 경우 포커스를 설정.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 id\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellDisabled": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "colIndex와 rowIndex 해당하는 셀의 disabled속성 값을 반환. \n\ndisable을 별도로 지정하지 않은 경우 (empty string)이 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행 index\n\n```colIndex``` - ```String||Number:Y``` - disabled속성을 가져올 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 셀에 적용된 disabled속성값으로 별도로 지정하지 않은 경우 \"\"(empty string)이 반환됨.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellCustomFormatter": {
          "!type": "fn(rowIndex: number, colIndex: number, formatter: string)",
          "!doc": "특정 cell의 customFormatter 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```formatter``` - ```String:Y``` - 변경하려는 customFormatter 함수 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellSize": {
          "!type": "fn(row: number, colIndex: string, sizeName: string)",
          "!doc": "셀의 크기 정보(width나 height)를 반환.\n\n**Parameters:**\n\n```row``` - ```Number:Y``` - 셀의 행 index\n\n```colIndex``` - ```String||Number:Y``` - 셀의 열 index 또는 id\n\n```sizeName``` - ```String:Y``` - [width, height] 반환 할 크기 정보명.\n\n**Return:**\n\n```Number``` - 셀의 크기 정보(width나 height)의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//gridView에 3개의 column과 2개의 row 데이터가 셋팅 된 경우\n//1번째 row의 name 컬럼의 width를 가져올 때\nvar tmpCellWidth = gridView1.getCellSize(0,\"name\",\"width\");\n// (반환 예) 154\n\n//1번째 row의 2 컬럼의 height를 가져올 때\nvar tmpCellHeight = gridView1.getCellSize(0,1,\"height\");\n// (반환 예) 20\n```\n\n"
        },
        "getAllVisibleData": {
          "!type": "fn()",
          "!doc": "현재 보이는 data를 1차원 배열로 반환.(filter 적용)\n\n**Return:**\n\n```Array``` - data가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//DataList에 2개의 컬럼이 정의 되고 4행의 데이터가 set 된 경우\ngridView1.getAllVisibleData();\n// (반환 예) [\"아이유\", \"19930516\", \"정형돈\", \"19780207\", \"유승호\", \"19930817\", \"김민희\", \"19820301\"]\n```\n\n"
        },
        "getVisibleColData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 화면에 보이는 데이터(filter나 sort가 반영 된)를 배열로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 데이터를 가져올 컬럼의 index 혹은 컬럼 id\n\n**Return:**\n\n```Array``` - colIndex에 해당하는 열의 데이터가 담긴 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnID": {
          "!type": "fn(colIndex: number)",
          "!doc": "컬럼의 index를 입력받아 해당하는 컬럼의 id를 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 index\n\n**Return:**\n\n```String``` - 컬럼의 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellChecked": {
          "!type": "fn(rowIndex: number, colIndex: string, flag: bool)",
          "!doc": "inputType=checkbox 혹은 radio인 경우, 해당 셀을 선택하거나 선택 해제.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행의 index\n\n```colIndex``` - ```String||Number:Y``` - 셀의 열의 id 또는 index\n\n```flag``` - ```Boolean:Y``` - [true,false]셀의 체크 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnChooseOption": {
          "!type": "fn(colIndex: number, chooseOptionValue: string, chooseOptionLabel: string)",
          "!doc": "gridView column의 inputType이 select인 경우, selectBox의 chooseOption 속성의 value 및 label 값을 변경.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - gridView 컬럼의 인덱스\n\n```chooseOptionValue``` - ```String:Y``` - 새로 지정할 chooseOption의 value 값\n\n```chooseOptionLabel``` - ```String:Y``` - 새로 지정할 chooseOption의 label 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n gridView1.setColumnChooseOption(1,\"\",\"-선택-\");\n\n```\n\n"
        },
        "setFooterCaption": {
          "!type": "fn(htmlStr: string)",
          "!doc": "그리드 footer 테이블의 caption의 innerHTML 값을 설정.\n\n**Parameters:**\n\n```htmlStr``` - ```String:Y``` - caption의 innerHTML 값으로 설정될 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "showChooseOption": {
          "!type": "fn(colIndex: number, chooseOption: bool)",
          "!doc": "gridView 컬럼의 inputType이 select일때 selectbox의 chooseOption 속성 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - gridView 컬럼의 인덱스\n\n```chooseOption``` - ```Boolean:Y``` - 사용 여부 (true/false)\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n gridView1.showChooseOption(1,true);\n\n```\n\n"
        },
        "clearAutoFit": {
          "!type": "fn()",
          "!doc": "autoFit 속성을 제거. \n\n그리드 컬럼의 너비를 autoFit 적용 이전으로 초기화.\n\n**Since:**\n\n5.0_2.3998B.20200410.132811\n\n**Sample:**\n\n```javascript\n// (사용 예)\ngridView1.clearAutoFit();\n```\n\n"
        },
        "getFocusedColumnIndex": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀의 colIndex를 반환.\n\n**Return:**\n\n```Number``` - 포커스가 위치한 셀의 colIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "checkAll": {
          "!type": "fn(colIndex: string, dataValue: string)",
          "!doc": "체크 박스로 이루어진 열을 한번에 체크하거나 언체크.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 체크 박스 열의 column id 또는 index.\n\n```dataValue``` - ```String:Y``` - 체크 여부에 대한 true/false 또는 trueValue/falseValue 또는 1/0. (valueType을 정의 하지 않는 경우 check는 1, uncheck는 0으로 설정 된다).\n\n|property|type|description|\n|:-|:-|:-|\n|check|되는 경우 : true, 1, 혹은 trueValue속성에 정의된 값|null|\n|uncheck|되는 경우 : false, 0, 혹은 falseValue속성에 정의된 값|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "saveCSV": {
          "!type": "fn(options: +Object)",
          "!doc": "데이터를 CSV 파일로 저장. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - JSON형태로 저장된 그리드의 csv 다운로드 옵션\n\n\n다운로드 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.fileName|<String:N>|[default: csvfile.csv] 엑셀파일 선택 대화상자가 나타날 때 기본으로 지정 될 파일 이름|\n|options.delim|<String:N>|[default: ';'] CSV 파일에서 데이터를 구분할 구분자<\/xmp>|\n|다운로드|데이터 관련 옵션|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//저장 할 컬럼 정의\nvar colArr = [];\ncolArr[0] = \"name\";\ncolArr[1] = \"corp\";\n\n//저장 옵션\nvar options = {\n  fileName:           \"saveCSV.csv\",\n  type:               \"1\", \n  delim:              \";\",\n  saveList:           colArr\n};\ngridView1.saveCSV(options);\n\n//별도의 옵션이 없을 경우 빈 객체를 파라메터로 넘겨줘야 한다.\ngridView1.saveCSV({});\n```\n\n"
        },
        "setFocusedMultiCell": {
          "!type": "fn(startRow: number, startCol: number, endRow: number, endCol: number)",
          "!doc": "직사각형 영역만큼 cell에 focus를 줌.\n\n**Parameters:**\n\n```startRow``` - ```Number:Y``` - 포커스영역 시작지점의 row값. 즉, 포커스 영역 왼쪽 최상단 셀의 rowIndex.\n\n```startCol``` - ```Number:Y``` - 포커스영역 시작지점의 column값. 즉, 포커스 영역 왼쪽 최상단 셀의 colIndex\n\n```endRow``` - ```Number:Y``` - 포커스영역 종료지점의 row값. 즉, 포커스 영역 우측 최하단 셀의 rowIndex\n\n```endCol``` - ```Number:Y``` - 포커스영역 종료지점 column값. 즉, 포커스 영역 우측 최하단 셀의 colIndex\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n gridView1.setFocusedMultiCell(3,2,4,3);\n // 실행결과 : (3,2), (3,3), (4,2), (4,3)셀이 포커스 처리됨.\n```\n\n"
        },
        "setColumnClass": {
          "!type": "fn(colIndex: number, className: string)",
          "!doc": "column에 동적으로 사용자 class를 추가. 복수 클래스 지정시 띄어쓰기( )를 구분자로 사용.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 열번호 또는 컬럼 아이디\n\n```className``` - ```String:Y``` - 컬럼에 적용할 class의 이름\n\n**Since:**\n\n5.0_5.4666B.20220705.144534\n\n**Sample:**\n\n```javascript\n gridView1.setColumnClass(\"col1\", \"cRed\"); // col1 열에 cRed 클래스를 적용\n gridView1.setColumnClass(\"col1\", \"cRed cBlue\"); // col1 열에 cRed 및 cBlue 클래스를 적용\n```\n\n"
        },
        "setFooterData": {
          "!type": "fn(footerId: number, data: string)",
          "!doc": "footer의 inputType이 text인 경우 data를 footer에 설정.\n\n**Parameters:**\n\n```footerId``` - ```Number||String:Y``` - footer의 index 또는 id\n\n```data``` - ```String:Y``` - footer에 넣을 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFooterSummary": {
          "!type": "fn(str: string)",
          "!doc": "그리드 footer 테이블의 summary 값을 설정. summary attribute 는 비표준이므로 docType이 html5인경우를 판단하여 summary attribute를 제거하도록 기능 변경(5.0_5.4699B.20220908.074748 이후)\n\n**Parameters:**\n\n```str``` - ```String:Y``` - summary 값에 설정될 string\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setUseFilter": {
          "!type": "fn(colId: string, flag: bool)",
          "!doc": "gridView 특정 header의 useFilter 속성을 동적으로 변경.\n\n**Parameters:**\n\n```colId``` - ```String:Y``` - 컬럼의 id (header 또는 body column의 id값)\n\n```flag``` - ```Boolean:Y``` - useFilter속성을 true로 변경할지 false로 변경할지에 대한 boolean 값\n\n**Return:**\n\n```Boolean``` - useFilter속성이 변경될 경우 true, 변경되지 않았을 경우 false 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getMaxLength": {
          "!type": "fn(colIndex: number)",
          "!doc": "그리드의 컬럼에 maxLength값 반환합니다.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n**Return:**\n\n```Number``` - maxLength값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.getMaxLength(\"a\"); // id가 \"a\"인 컬럼에 maxLength를 반환\n```\n\n"
        },
        "readCSV": {
          "!type": "fn(options: +Object)",
          "!doc": "csv 파일을 읽어 그리드의 데이터를 설정. (JDK 1.5이상에서 사용 가능)\n\n**Parameters:**\n\n```options``` - ```JSON:Y``` - JSON형태로 저장된 그리드의 csv 업로드 옵션\n\n\n업로드 정보 관련 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.popupUrl|<String:N>|업로드시에 호출할 popup의 url|\n|options.status|<String:N>|[default: R] 업로드된 데이터의 초기 상태값, 설정하지 않으면 \"R\"로 설정되며 \"C\"값을 설정 가능.<\/xmp>|\n|데이터|관련 옵션|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {\n  type:               \"1\",\n  delim:              \",\",\n  escapeChar:         \"'\",\n  startRowIndex:        1,\n  append:             \"0\",\n  hidden:             \"0\",\n  fillHidden:         \"0\",\n  skipSpace:          \"1\"\n};\ngridView1.readCSV(options);\n\n//별도의 옵션이 없을 경우 빈 객체를 파라메터로 넘겨줘야 한다.\ngridView1.readCSV({});\n```\n\n"
        },
        "getFocusedRowIndex": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀의 rowIndex를 반환.\n\n**Return:**\n\n```Number``` - 포커스가 위치한 셀의 rowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "refreshColumnItemset": {
          "!type": "fn(col: string)",
          "!doc": "inputType이 select인 경우에만 동작하며 col에 해당하는 컬럼의 itemset을 갱신.\n\n**Parameters:**\n\n```col``` - ```String:Y``` - 갱신할 column의 id 또는 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getMerged": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "특정 셀의 병합여부를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 row Index\n\n```colIndex``` - ```Number:Y``` - 병합 여부를 알고 싶은 셀의 column Index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n gridView1.getMerged(0, 0);\n// (0, 0)의 병합여부를 반환.\n```\n\n"
        },
        "getColumnColor": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 글자색을 반환. \n\nAPI로 별도의 글자색을 지정하지 않은 경우 (empty string)을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 글자색을 반환 할 열 index 또는 id\n\n**Return:**\n\n```String``` - 해당 열에 글자색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getTotalHeaderCol": {
          "!type": "fn(options: +Object)",
          "!doc": "header column의 개수를 반환.\n\n**Parameters:**\n\n```options``` - ```Object:N``` - header column의 갯수를 가져올 때 설정할 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.defaultColumn|<Boolean:N>|[default: false] rowNum, rowStatus 컬럼의 개수를 포함해서 컬럼 개수를 반환|\n\n**Return:**\n\n```Number``` - header column의 개수\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getAllFocusedIndex": {
          "!type": "fn()",
          "!doc": "선택 된 셀의 rowIndex와 colIndex를 반환. \n\n보통 ctrl키를 이용하여 다중 cell이 선택 된 경우 사용.\n\n**Return:**\n\n```Array``` - 선택 된 셀의 rowIndex와 colIndex의 정보가 담긴 JOSN을 담은 array\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//ctrl키를 이용하여 다중 cell을 선택하였을 경우\ngridView1.getAllFocusedIndex();\n//(반환 예) [ {col: 1, row: 2}, {col: 0, row: 4} ]\n```\n\n"
        },
        "setColumnColor": {
          "!type": "fn(colIndex: number, color: string)",
          "!doc": "colIndex에 해당하는 열의 글자색을 일괄 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 글자색을 설정할 열 index 또는 id\n\n```color``` - ```String:Y``` - 글자색으로 설정할 색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDataType": {
          "!type": "fn(colID: string)",
          "!doc": "특정 column의 dataType 속성을 반환.\n\n**Parameters:**\n\n```colID``` - ```String:Y``` - column의 id\n\n**Return:**\n\n```String``` - 해당 column의 dataType 속성값\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFooterStyle": {
          "!type": "fn(footerId: number, style: string)",
          "!doc": "그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져옴.\n\n**Parameters:**\n\n```footerId``` - ```Number||String:Y``` - 그리드 컬럼의 index 또는 id\n\n```style``` - ```String:Y``` - 가져올 스타일 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCaption": {
          "!type": "fn(htmlStr: string)",
          "!doc": "gridView의 HTML caption 속성의 값을 설정.(gridView는 table로 구성됨.)\n\n**Parameters:**\n\n```htmlStr``` - ```String:Y``` - caption의 값으로 순수 텍스트이외 HTML Tag을 조합 한 문자열도 가능\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowDisabled": {
          "!type": "fn(rowIndex: number, disableFlag: bool)",
          "!doc": "rowIndex에 해당하는 행의 disabled속성을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 설정할 행 index\n\n```disableFlag``` - ```Boolean:Y``` - [true, false]disabled 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStyleAll": {
          "!type": "fn(styleObj: +Object)",
          "!doc": "그리드의 스타일을 지정하는 함수.\n\n**Parameters:**\n\n```styleObj``` - ```JSON:Y``` - 스타일을 설정할 세부 설정을 담은 객체\n\n|property|type|description|\n|:-|:-|:-|\n|styleObj.styleName|<String:Y>|설정할 스타일의 이름. \"background-color\" 와 같은 표기법을 사용한다.|\n|styleObj.styleValue|<String:Y>|설정할 스타일의 값.|\n|styleObj.type|<String:Y>|스타일을 설정할 영역을 row, column, cell 단위로 지정한다. [\"row\", \"column\", \"cell\"] 중 하나를 사용한다.|\n|styleObj.target|<String:N>|스타일을 설정할 영역을 제한하는 설정. [\"fixed\", \"data\", \"all\"] 중 하나를 사용한다. 기본값은 \"all\"이다. \"fixed\"는 고정된 영역, \"data\"는 고정되지 않은 영역이다.|\n|styleObj.rowIndex|<Number:N>|스타일을 설정할 영역에 해당하는 row값. type이 \"row\" 또는 \"cell\"인 경우 필수로 입력해야 한다.|\n|styleObj.colIndex|<Number:N>|스타일을 설정할 영역에 해당하는 column값. type이 \"column\" 또는 \"cell\"인 경우 필수로 입력해야 한다.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n <w2:gridView id='gridView1' fixedColumn='4'/>  column수는 8개라고 가정.\n var styleObj = {\"styleName\" : \"background-color\", \"styleValue\" : \"red\", \"type\" : \"row\", \"target\" : \"data\", \"rowIndex\" : 5}\n gridView1.setStyleAll(styleObj);\n // 실행결과 : 5번 row 중에서 고정되지 않은 영역, 즉 (5,4),(5,5),(5,6)(5,7) cell의 배경색이 red가 된다.\n```\n\n"
        },
        "setRowStatusColumnWidth": {
          "!type": "fn(size: number)",
          "!doc": "rowStatus컬럼의 폭을 변경한다.\n\n**Parameters:**\n\n```size``` - ```Number:Y``` - 변경할 컬럼의 폭으로 px로 계산된다\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnDisplayFormat": {
          "!type": "fn(colIndex: number, displayFormat: string)",
          "!doc": "컬럼의 displayFormat속성을 설정한다. 기존의 setDisplayFormat을 대체한 API.\n\ndisplayFormat의 경우 dataList에 정의 된 컬럼의 dataType 속성에 따라 적용 범위가 다르므로 확인하여 적용해야함.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```displayFormat``` - ```String:Y``` - 컬럼에 적용할 displayFormat\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 생년월일 컬럼의 id가 birthday로 정의된 gridView가 있고,\n// dataList의 birthday 컬럼의 dataType 속성은 date로 정의한 경우\n\n// 생년월일 컬럼의 displayFormat을 dd-MM yyyy 변경.\ngridView1.setDisplayFormat(\"birthday\",\"dd-MM yyyy\");\n// (표시 예) \"19831231\"의 데이터가 \"31-12 1983\"으로 표시됨.\n```\n\n"
        },
        "setColumnVisible": {
          "!type": "fn(colIndex: number, colVisibleFlag: bool)",
          "!doc": "column의 hidden 여부를 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - hidden 여부를 설정한 column의 index 또는 id\n\n```colVisibleFlag``` - ```Boolean:Y``` - [true, flase]visible 여부\n\n|property|type|description|\n|:-|:-|:-|\n|\"true\"|해당 column을 표시.|null|\n|\"false\"|숨김.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUncheckedData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 배열로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - ckeck여부를 검사할 컬럼 index 또는 id\n\n**Return:**\n\n```Array``` - row data를 배열로 저장한 배열로 2차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 순서대로 컬럼에 정의 된 gridView가 있고 inputType속성이 checkbox인 컬럼의 id가 chk인 경우\n \nvar tmpRs = gridView1.getUncheckedData(\"chk\");  //checkbox컬럼의 id가 chk.\n// (반환 예) [[\"0\",\"아이유\",\"19930516\"],[\"0\",\"정형돈\",\"19780207\"],[\"0\",\"유승호\",\"19930817\"]]\n```\n\n"
        },
        "setTopRowIndex": {
          "!type": "fn(topRowIndex: number, noEvent: bool, autoFocus: bool)",
          "!doc": "세로 스크롤의 위치를 옮겨 topRowIndex에 해당하는 row가 첫번째 row에 보여지도록 설정.\n\n**Parameters:**\n\n```topRowIndex``` - ```Number:Y``` - 상단에 표현할 rowIndex\n\n```noEvent``` - ```Boolean:N``` - 이 API 실행 과정에서 스크롤이 맨 끝으로 도달할 경우 onscrollend 이벤트를 발생시키지 않고자 할 때 true인자를 추가로 넘김.\n\n```autoFocus``` - ```Boolean:N``` - API 실행 후에 화면기준으로 포커스를 (0,0)위치에 설정.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeByCol": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 column 내에서 같은 데이터가 연속적으로 나타나는경우 이들을 모두 병합. (세로 병합)\n\n**Parameters:**\n\n```options``` - ```Object:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCustomFormatter": {
          "!type": "fn(colIndex: number, customFormatter: string)",
          "!doc": "컬럼의 customFormatter 속성을 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```customFormatter``` - ```String:Y``` - customFormatter 속성에 적용할 Function명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setNoResultMessage": {
          "!type": "fn(message: string)",
          "!doc": "gridView에 데이터가 없을 경우 표시할 문자열을 설정.\n\n**Parameters:**\n\n```message``` - ```String:Y``` - 데이터 없을 때 표시할 문자열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "modifyCheckedStatus": {
          "!type": "fn(colIndex: string, status: string)",
          "!doc": "col에 해당하는 열의 inputType이 checkbox일 때 check된 행의 상태코드값을 일괄 변경.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - check여부를 검사할 컬럼의 index 혹은 컬럼 id\n\n```status``` - ```String:Y``` - [R,C,U,D,V]변경할 상태코드값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, name 컬럼이 정의 된 gridView가 있고 2건의 row가 셋팅되어있고 checkbox의 컬럼 id는 chk임.\n//1번째 row의 checkbox는 check가 되어있고 2번째 row의 checkbox는 uncheck되었을 경우\n\n//modifyCheckedStatus API를 이용하여 checkbox 컬럼의 id를 통해 check된 컬럼의 상태값을 일괄 D 상태로 변경.\ngridView1.modifyCheckedStatus(\"chk\",\"D\");\n\n//1번째 row의 Status를 가져온다.(checkbox가 check 된 경우)\nvar tmpRs1 = gridView1.getRowStatus(0);\n// (반환 예) \"D\"\n\n//2번째 row의 Status를 가져온다.(checkbox가 uncheck 된 경우)\nvar tmpRs2 = gridView1.getRowStatus(1);\n// (반환 예) \"R\" // row에 별도의 수정 작업을 하지 않은 경우\n```\n\n"
        },
        "getColumnIndex": {
          "!type": "fn(colIndex: string)",
          "!doc": "컬럼 id를 입력받아 해당하는 컬럼의 index를 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 컬럼 id\n\n**Return:**\n\n```Number``` - 컬럼의 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getFooterData": {
          "!type": "fn(footerId: string, display: string)",
          "!doc": "footerId에 해당하는 footer의 값을 반환. \n\ninputType=expression인 경우 계산된 값을 반환.\n\n**Parameters:**\n\n```footerId``` - ```String||Number:Y``` - footer의 id 혹은 index\n\n```display``` - ```String:N``` - [displayData] displayData를 넘긴 경우 foramt된 값이 반환됨.\n\n**Return:**\n\n```string``` - footerId에 해당하는 footer의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeFocusedCell": {
          "!type": "fn()",
          "!doc": "셀에 적용 된 모든 포커스(선택되어있는 셀)를 제거.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellInputType": {
          "!type": "fn(rowIndex: number, colIndex: string, info: +Object)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 inputType을 변경. \n\ninputType=custom일 경우 사용. \n\ngridView 속성에  setCellInputTypeCustom=true 설정을 추가해야 동작.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행 번호\n\n```colIndex``` - ```String:Y``` - 셀의 컬럼 번호 혹은 컬럼의 아이디\n\n```info``` - ```Object:Y``` - JSON형태로 저장된 inputType에 대한 정보\n\n|property|type|description|\n|:-|:-|:-|\n|info.id|<String:N>|cell id|\n|info.inputType|<String:Y>|지정할 inputType|\n|info.options|<String:N>|inputType에 대한 옵션|\n|info.itemSet|<String:N>|nodeset정보를 담은 객체|\n|info.itemSet.nodeset|<String:N>|DataList의 id. \"data:\"로 시작해야 함.|\n|info.itemSet.label|<String:N>|label로 지정할 컬럼의 ID.|\n|info.itemSet.value|<String:N>|value로 지정할 컬럼의 ID.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\nvar info = {\n    inputType : \"select\",\n    options : {\n        selectedData : false,\n        viewType: \"icon\",\n        chooseOption: true\n    },\n    itemSet : {\n        nodeset: \"data:dataList1\", \n        label: \"label\",\n        value: \"value\"\n    }\n}\ngridView1.setCellInputType(0, \"a\", info); // 첫 번째 row, \"a\" column에 해당하는 cell의 inputType을 select로 변경.\n```\n\n"
        },
        "setFooterDisplayFormat": {
          "!type": "fn(footerId: number, displayFormat: string)",
          "!doc": "footer의 displayFormat을 설정.\n\ndisplayFormat은 dataType속성값에 따라 동작이 변경됨에 주의.\n\n**Parameters:**\n\n```footerId``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```displayFormat``` - ```String:Y``` - 컬럼에 적용할 displayFormat\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderStyle": {
          "!type": "fn(headerId: string, style: string, value: string)",
          "!doc": "그리드의 headerId에 해당하는 header cell의 스타일을 설정.\n\n**Parameters:**\n\n```headerId``` - ```String||Number:Y``` - 그리드 header cell의 id 또는 index(rowNum 컬럼은 \"$rowNum\", rowStatus 컬럼은 \"$rowStatus\"로 설정)\n\n```style``` - ```String:Y``` - 적용할 CSS 속성명\n\n```value``` - ```String:Y``` - 적용할 CSS 속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeFocusedCell": {
          "!type": "fn()",
          "!doc": "현재 포커스된 셀만 병합.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n (6,6),(6,7),(7,6),(7,7)이 현재 포커스된 상태에서 아래를 실행\n gridView1.mergeFocusedCell(); \n // 실행결과: (6,6)에 해당하는 셀이 2*2 크기로 병합된다. \n // 즉, (6,6), (6,7), (7,6), (7,7)셀이 병합되며, 병합된 셀은 모두 셀 (6,6)이 갖던 데이터를 갖는다.\n```\n\n"
        },
        "setRowReadOnly": {
          "!type": "fn(rowIndex: number, readOnly: bool)",
          "!doc": "rowIndex에 해당하는 행의 readonly 속성을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - readonly 속성을 설정할 행 index\n\n```readOnly``` - ```Boolean:Y``` - [true, false]readonly 속성의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeCell": {
          "!type": "fn(mergeInfo: +Object)",
          "!doc": "동적으로 셀을 병합.\n\n**Parameters:**\n\n```mergeInfo``` - ```JSON:Y``` - 병합 대상 셀의 정보를 포함한 객체 (rowIndex, colIndex, colSpan, rowSpan)\n\n|property|type|description|\n|:-|:-|:-|\n|mergeInfo.rowIndex|<Number:Y>|병합 시작 지점 좌표값 (행 인덱스) (여러 셀 병합 시 왼쪽 최상단 셀의 인덱스를 입력.)|\n|mergeInfo.colIndex|<Number:Y>|병합 시작 지점 좌표값 (열 인덱스)|\n|mergeInfo.colSpan|<Number:Y>|병합할 컬럼의 수|\n|mergeInfo.rowSpan|<Number:Y>|병합할 행의 수|\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n gridView1.mergeCell({\"rowIndex\" : 3, \"colIndex\" : 2, \"colSpan\" : 2, \"rowSpan\" : 2});\n // 실행결과 : (3,2) 좌표에 위치한 셀이 2*2 크기로 병합된다. \n// 즉, (3,2), (3,3), (4,2), (4,3)셀이 병합되며, 병합된 셀은 모두 (3,2)의 데이터를 갖는다.\n```\n\n"
        },
        "getAllDisplayData": {
          "!type": "fn()",
          "!doc": "화면에 보이는 data를 1차원 배열로 반환한다.(displayFormat등이 적용 된 data)\n\n본 API는 filter는 무시되며 filter가 반영 된 Data는 getAllVisibleData API를 사용.\n\n**Return:**\n\n```Array``` - data가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFocusedCell": {
          "!type": "fn(rowIndex: number, colIndex: number, editMode: bool)",
          "!doc": "셀로 포커스(선택)를 주고 해당 셀로 이동.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 포커스를 이동할 셀의 행 index\n\n```colIndex``` - ```Number||String:Y``` - 포커스를 이동할 셀의 열 index 또는 id\n\n```editMode``` - ```Boolean:Y``` - [default:false, true]editMode로 전환할지 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCheckedXML": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 XML로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 열 index 또는 id\n\n**Return:**\n\n```XML``` - XML Data\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 정의 된 gridView가 정의되어 있고 checkbox의 컬럼의 ID가 chk 인 경우\n\nvar tmpRs = gridView1.getCheckedData(\"chk\");\n//return 예시 )\n<list>\n    <map status=\"1\" statusValue=\"U\" id=\"1\">\n        <chk>1<\/chk>\n        <name>정형돈<\/name>\n        <birthday>19780207<\/birthday>\n    <\/map>\n    <map status=\"1\" statusValue=\"U\" id=\"2\">\n        <chk>1<\/chk>\n        <name>유승호<\/name>\n        <birthday>19930817<\/birthday>\n    <\/map>\n<\/list>\n```\n\n"
        },
        "setHeaderHide": {
          "!type": "fn(hide: bool)",
          "!doc": "header의 hidden 여부를 설정.\n\n**Parameters:**\n\n```hide``` - ```Boolean:Y``` - [true, false]header의 hidden 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnOrder": {
          "!type": "fn(byName: bool)",
          "!doc": "현재 컬럼 순서를 배열로 반환한다. 기본적으로는 컬럼 index를 담은 배열을 반환하고, byName이 true인 경우 id를 담은 배열을 반환한다.\n\n**Parameters:**\n\n```byName``` - ```Boolean:N``` - [defulat:false, true]반환 할 컬럼의 순서에서 컬럼 index 대신 컬럼 id를 사용할지 여부\n\n**Return:**\n\n```Array``` - 현재 컬럼 순서를 차례대로 담고 있는 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getDescendantRowIndexArray": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 모든 자손 행들의 rowIndex를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 자손을 찾으려는 행의 index\n\n**Return:**\n\n```Array``` - rowIndex가 담긴 1차원 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellMaxLength": {
          "!type": "fn(rowIndex: number, colIndex: number, maxLength: number)",
          "!doc": "특정 cell의 maxLength 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```maxLength``` - ```Number||String:Y``` - 변경하려는 maxLength 속성\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnIdListMultiRow": {
          "!type": "fn()",
          "!doc": "그리드의 모든 컬럼의 ID를 2차원 배열 형태로 반환. \n\n첫 번째 차원에는 각 multiRow에 해당하는 rowIndex가 할당됨. \n\n두 번째 차원에는 각 multiRow에 해당하는 column의 ID가 배열 형태로 할당됨.\n\n단일 row인 경우에도 2차원 배열로 반환하며 이 때 첫번째 차원의 크기는 1이다.\n\n**Return:**\n\n```Array``` - 그리드의 모든 컬럼의 ID값을 담은 2차원 배열.\n\n**Since:**\n\n5.0_2.3827B.20191007.165352\n\n**Sample:**\n\n```javascript\n // case1 : 두 개의 multiRow로 이루어져 있고 첫번째 행은 col1,col2 두번째 행은 col3,col4로 이루어진 경우\n gridView1.getMultiRowIndex();\n // 결과값 : [[\"col1\",\"col2\"], [\"col3,col4\"]]\n // case2 : 단일 row로 이루어져 있고 컬럼이 col1,col2,col3인 경우 \n gridView1.getMultiRowIndex();\n // 결과값 : [[\"col1\",\"col2\",\"col3\"]]\n```\n\n"
        },
        "getDataDragDrop": {
          "!type": "fn()",
          "!doc": "그리드의 컬럼에 dataDragDrop 값을 반환.\n\n**Return:**\n\n```Boolean``` - dataDragDrop\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.getDataDragDrop();\n// 현재 설정된 dataDragDrop 값을 반환\n```\n\n"
        },
        "getCellColor": {
          "!type": "fn(rowIndex: number, colIndex: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 글자색을 반환. \n\nAPI로 별도의 글자색을 지정하지 않은 경우 (empty string)이 반환됨.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 반환할 행 index\n\n```colIndex``` - ```String||Number:Y``` - 글자색을 반환할 열 index 또는 id\n\n**Return:**\n\n```String``` - 해당 cell의 글자색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "showCustomFilterReset": {
          "!type": "fn()",
          "!doc": "사용자 필터를 초기화시킬 수 있는 버튼을 출력.\n\ntrue: 초기화 버튼을 출력.\n\nfalse (기본 값): 초기화 버튼을 출력하지 않음.\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnType": {
          "!type": "fn(colIndex: string)",
          "!doc": "colIndex에 해당하는 열의 inputType 속성 값을 반환.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - column id 또는 index\n\n**Return:**\n\n```String``` - colIndex에 해당하는 컬럼의 타입\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getUncheckedIndex": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 uncheck된 행의 index를 배열로 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 혹은 컬럼 id\n\n**Return:**\n\n```Array``` - 행 index가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 순서대로 컬럼에 정의 된 gridView가 있고 inputType속성이 checkbox인 컬럼의 id가 chk인 경우\ngridView1.getUncheckedIndex(\"chk\"); //checkbox컬럼의 id가 chk.\n// (반환 예) [0,2,3]\n```\n\n"
        },
        "getHeaderClass": {
          "!type": "fn(headerId: number)",
          "!doc": "grid header셀에 동적으로 적용한 사용자 class이름 반환.\n\n**Parameters:**\n\n```headerId``` - ```Number:Y``` - header cell의 id\n\n**Return:**\n\n```String:Y``` - 셀에 적용된 사용자 class이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnDisplayFormatter": {
          "!type": "fn(colIndex: number, displayFormatter: string)",
          "!doc": "컬럼의 displayFormatter 속성을 설정. \n\n기존의 setDisplayFormatter를 대체한 API.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```displayFormatter``` - ```String:Y``` - displayFormatter 속성에 적용할 Function 명\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "toggle": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown을 적용 한 경우 rowIndex에 해당하는 행에 drilldown을 토글링. \n\n행이 닫혀있으면 열리고, 열려있으면 닫힘.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - toggle하려는 행의 realRowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCurrentGridStyle": {
          "!type": "fn()",
          "!doc": "현재 그리드의 상태(컬럼순서, 컬럼길이, 히든컬럼, fixedColumm)를 JSON 문자열 형태로 반환합니다.\n\n**Return:**\n\n```String``` - 그리드를 구성하는 JSON 문자열\n\n**Since:**\n\n5.0_4.4987B.20230821.162030\n\n**Sample:**\n\n```javascript\n//getCurrentGridStyle()에서 반환받은 string 저장\nvar gridStr = gridView1.getCurrentGridStyle());\n\n//setGridStyle을 사용해 그리드 복원.\ngridView1.setGridStyle(gridStr);\n\n```\n\n"
        },
        "setHeaderValue": {
          "!type": "fn(headerId: string, value: string, useFormat: bool)",
          "!doc": "displayFormat에 따라 포맷된 값을 헤더에 설정. \n\ninputType=text인 경우, 화면에 표시되는 문자열이 변경됨.\n\n관련 속성: displayFormat\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - 헤더 ID\n\n```value``` - ```String:Y``` - 헤더 value\n\n```useFormat``` - ```Boolean:N``` - displayFormat에 따라 포맷된 값을 헤더에 설정. (기본 값: false)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellStyle": {
          "!type": "fn(rowIndex: number, colIndex: string, styleName: string, styleValue: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀에 styleName에 해당하는 스타일을 styleValue로 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 스타일을 설정할 행 번호\n\n```colIndex``` - ```String:Y``` - 스타일을 설정할 열 번호 혹은 컬럼 id\n\n```styleName``` - ```String:Y``` - 설정할 스타일 이름\n\n```styleValue``` - ```String:Y``` - 설정할 스타일 값\n\n**Since:**\n\n5.0_5.4951B.20230712.081311\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setGridSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "gridView의 높이와 넓이을 설정한다.\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 변경할 width값으로 px단위로 계산된다.\n\n```height``` - ```Number:Y``` - 변경할 height값으로 px단위로 계산된다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setNoResultMessageVisible": {
          "!type": "fn(visible: bool)",
          "!doc": "noResultMessageVisible 값을 동적으로 설정.\n\n**Parameters:**\n\n```visible``` - ```Boolean:Y``` - [true,false] noResultMessageVisible에 설정될 값.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRealRowIndex": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown을 적용 한 경우 화면에 표현 된 rowIndex를 기준으로 실제 데이터의 rowIndex를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 현재 표시되고 있는 행의 index\n\n**Return:**\n\n```Number``` - row의 실제 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setFixedRow": {
          "!type": "fn(fixedRowNum: number)",
          "!doc": "가로 틀고정을 설정.\n\n**Parameters:**\n\n```fixedRowNum``` - ```Number:Y``` - 맨 위쪽부터 시작해서 영역을 고정시킬 행들의 수. 1번째 행을 틀 고정 할 경우 1로 입력한다.\n\n**Since:**\n\n5.0_4.4812B.20230203.171911\n\n**Sample:**\n\n```javascript\n//1번째 행의 가로 틀고정 설정\ngridView1.setFixedRow(1);\n\n//3번째 행까지 가로 틀고정 설정\ngridView1.setFixedRow(3);\n```\n\n"
        },
        "getHeaderColor": {
          "!type": "fn(headerId: string)",
          "!doc": "header 셀에 적용 된 글씨 색상값을 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header cell의 id\n\n**Return:**\n\n```String``` - header 셀의 글씨 색상값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "moveFooterColumn": {
          "!type": "fn(fromIdx: string, toIdx: string)",
          "!doc": "footer 컬럼을 fromIdx 위치로 부터 toIdx 이전의 위치로 이동.\n\n**Parameters:**\n\n```fromIdx``` - ```String:Y``` - 이동 대상 footer 컬럼의 id 또는 index\n\n```toIdx``` - ```String:Y``` - 이동 목적지의 오른쪽에 위치한 footer 컬럼의 id 또는 index\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n gridView1.moveFooterColumn(\"column5, \"column2\");\n // 실행결과: column5가 column2의 바로 왼쪽, 혹은 column2 이전의 위치로 이동.\n```\n\n"
        },
        "setCellColor": {
          "!type": "fn(rowIndex: number, colIndex: number, color: string)",
          "!doc": "rowIndex와 colIndex에 해당하는 셀의 글자색을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 설정할 행 index\n\n```colIndex``` - ```Number||String:Y``` - 글자색을 설정할 열 index 또는 id\n\n```color``` - ```String:Y``` - 글자색으로 설정할 색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getChildrenRowIndexArray": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 자식(1 depth 하위)행들의 rowIndex를 배열로 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 자식을 찾으려는 행의 index\n\n**Return:**\n\n```Array``` - rowIndex가 담긴 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeByRowRec": {
          "!type": "fn(options: +Object)",
          "!doc": "mergeByRow를 수행하고, 그 후에 병합되지 않은 cell들을 대상으로 mergeByCol을 수행.\n\n가로 병합이 더 우선순위가 높다.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowBackgroundColor": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 배경색을 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 배경색을 반환할 행의 index\n\n**Return:**\n\n```String``` - 행의 배경색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "grid 셀에 동적으로 적용한 사용자 class 이름을 반환\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n**Return:**\n\n```String:Y``` - 셀에 적용된 사용자 class이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setRowColor": {
          "!type": "fn(rowIndex: number, color: string)",
          "!doc": "rowIndex에 해당하는 행의 글자색을 설정.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n```color``` - ```String:Y``` - 글자색의 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnVisible": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열의 visible여부를 반환.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - visible여부를 반환할 colunm의 index 또는 id\n\n**Return:**\n\n```Boolean``` - column의 visible여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "initGrid": {
          "!type": "fn()",
          "!doc": "전체 데이터 삭제, 필터 삭제, 컬럼 기본정보(selectbox의 nodeset 등)를 초기화하고 가지고 있던 데이터를 1차원 배열로 반환한다.\n\n**Return:**\n\n```array``` - 전체 데이터를 담은 1차원 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnNodeSet": {
          "!type": "fn(colIndex: number, nodeset: string, label: string, value: string)",
          "!doc": "itemset을 설정할 수 있는 컬럼의 nodeset을 설정. \n\n(select, autoComplete, checkcombobox 세 개의 inputType만 지원)\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - nodeset을 설정할 column의 index 또는 id\n\n```nodeset``` - ```String:N``` - 변경하려는 nodeset값으로 \"data:\"라는 prefix 뒤에 dataList id를 정의.\n\n```label``` - ```String:N``` - 변경하려는 label로 dataList의 컬럼 id\n\n```value``` - ```String:N``` - 변경하려는 value로 dataList의 컬럼 id\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSortableArr": {
          "!type": "fn()",
          "!doc": "header의 각 컬럼이 sortable한지 여부를 array로 반환.\n\n**Return:**\n\n```Array``` - 각 컬럼의 sortable 여부를 Boolean으로 이루어진 array 형태로 반환\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeSplitFocusedCell": {
          "!type": "fn()",
          "!doc": "포커스를 받은 셀의 병합을 분리.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n (6,6),(6,7),(7,6),(7,7)이 병합된 셀에 포커스를 둔 채로 아래를 실행\n gridView1.mergeFocusedCell();  \n // 실행결과 : (6,6), (6,7), (7,6), (7,7)셀로 분할.\n```\n\n"
        },
        "setAutoFit": {
          "!type": "fn(options: +Object)",
          "!doc": "autoFit 속성을 적용. \n\n그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그림. \n\nautoFit=lastColumn인 경우 마지막 컬럼의 폭만 변경이 되고, allColumn이면 전체 컬럼을 폭을 균일하게 변경.\n\n**Parameters:**\n\n```options``` - ```Object:N``` - JSON형태로 저장된 그리드의 setAutoFit 옵션\n\n|property|type|description|\n|:-|:-|:-|\n|options.type|<String:N>|autoFit옵션 값(lastColumn일 경우 마지막 컬럼의 폭만 변경, allcolumn일 경우 전체 컬럼의 폭을 균일하게 변경)|\n|options.minWidth|<Number:N>|그리드의 최소 넓이의 px값 (lastColumn일때는 적용되지 않음)|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar options = {\n    type : \"allColumn\",\n    minWidth : 480\n}       \ngridView1.setAutoFit( options );\ngridView의 width가 480px보다 작아질 경우에는 각 컬럼의 width의 함은 480px로 고정되며, 480px에 맞게 각 컬럼 width가 변경. \ngridView의 width가 480px보다 큰 경우는 gridView의 width에 맞게 각 컬럼 width가 변경.\n```\n\n"
        },
        "refreshCell": {
          "!type": "fn(rowIndex: number, colIndex: number)",
          "!doc": "해당 인덱스의 cell을 다시 렌더링.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 index\n\n```colIndex``` - ```Number:Y``` - 컬럼의 index\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeClear": {
          "!type": "fn()",
          "!doc": "동적으로 병합된 셀들의 병합을 모두 해제한다. \n\nmergeCell 또는 mergeCells등의 API에 의해 동적으로 병합된 셀들의 병합만 해제.\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnGridItemset": {
          "!type": "fn(colIndex: number, obj: +Object)",
          "!doc": "inputType = select이고 gridViewItemset을 사용하는 경우 gridViewItemset을 동적으로 변경한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - column의 index 또는 id\n\n```obj``` - ```JSON||XML:Y``` - 새로 구성할 gridViewItemset에 대한 정보를 담은 객체. JSON객체 또는 XML객체여야 한다.\n\n|property|type|description|\n|:-|:-|:-|\n|obj.nodeset|<String>|새로 설정할 dataList의 id. 앞에 \"data:\" prefix를 붙여야 한다.|\n|obj.label|<String>|label로 지정할 column의 id|\n|obj.value|<String>|value로 지정할 column의 id|\n|obj.width|<Number>|새로 설정할 gridViewItemset의 가로 길이.|\n|obj.height|<Number>|새로 설정할 gridViewItemset의 세로 길이.|\n|obj.item|<Array>|새로 설정할 각각의 컬럼별 설정을 JSON Array 형식으로 전달한다.|\n\n**Since:**\n\n5.0_2.3428B.20181228.174633\n\n**Sample:**\n\n```javascript\nvar obj = {\n\"nodeset\" : \"data:dataList2\",\n\"label\" : \"col1\",\n\"value\" : \"col2\",\n\"width\" : 400,\n\"height\" : 300, \n\"item\" : [{\"ref\" : \"col1\", \"header\" : \"label\"},{\"ref\" : \"col2\", \"header\" : \"value\"},{\"ref\" : \"col3\", \"header\" : \"dummy\"}]\n};\ngridView1.setColumnGridItemset(\"col1\", obj);\n```\n\n"
        },
        "getFocusedColumnID": {
          "!type": "fn()",
          "!doc": "포커스가 위치한 셀이 속한 column의 ID를 반환한다.\n\n**Return:**\n\n```String``` - 포커스가 위치한 셀이 속한 column의 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellClass": {
          "!type": "fn(rowIndex: number, colIndex: number, className: string)",
          "!doc": "grid 셀에 동적으로 사용자 class를 적용\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 셀의 행번호\n\n```colIndex``` - ```Number:Y``` - 셀의 열번호 혹은 컬럼 아이디\n\n```className``` - ```String:Y``` - td에 적용할 class의 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDataDragDrop": {
          "!type": "fn(onoff: bool)",
          "!doc": "그리드의 dataDragDrop 값을 변경.\n\n**Parameters:**\n\n```onoff``` - ```Boolean:Y``` - [true,false] dataDragDrop 허용 여부\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\ngridView1.setDataDragDrop(false); // dataDragDrop 값을 false로 변경\n```\n\n"
        },
        "getFixedRightColumnLastIndex": {
          "!type": "fn()",
          "!doc": "그리드에 FixedRightColumn이 설정되어 있을 경우 FixedRightColumn 중 맨 오른쪽 끝에 해당하는 column의 index를 반환합니다.\n\n**Return:**\n\n```Number``` - 맨 오른쪽에 위치한 FixedRightColumn의 index\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeCellsFixedCols": {
          "!type": "fn(mergeOptionStr: string, options: +Object)",
          "!doc": "fixedColumn 영역 내에서 mergeCells를 실행.\n\n**Parameters:**\n\n```mergeOptionStr``` - ```String:Y``` - 자동 병합 방식을 지정한다. 설정 관련 string은 아래와 같음.\n\n\nnever : mergeCells에 의해 자동으로 merge된 것들을 해제.  \nbycol : 같은 column 내에서 연속적으로 데이터가 같은 row들을 병합.\nbyrow : 같은 row 내에서 연속적으로 데이터가 같은 column들을 병합.\nbycolrec : bycol후, merge되지 않은 cell들을 대상으로 byrow를 실행.\nbyrowrec : byrow후, merge되지 않은 cell들을 대상으로 bycol을 수행.\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지. 이 API를 호출할 경우 keepMerge 속성이 강제로 \"true\"로 설정됨.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한. 이 API를 호출할 경우 fixedCols 속성이 강제로 \"true\"로 설정됨.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setScrollTop": {
          "!type": "fn(top: number)",
          "!doc": "그리드의 세로 스크롤을 감싸는 div의 스타일의 top을 param으로 들어온 top으로 설정.\n\n**Parameters:**\n\n```top``` - ```Number:Y``` - 새로 설정할 스타일의 top\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getColumnDataListInfo": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 컬럼에 바인딩된 데이터리스트정보를 반환.\n\ninputType=selectbox, autoComplete, 혹은 checkcombobox 컬럼만 지원.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 index\n\n**Return:**\n\n```Object:Y``` - dataList id\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getAncestorRowIndexArray": {
          "!type": "fn(rowIndex: number)",
          "!doc": "drilldown 사용시 rowIndex에 해당하는 행의 모든 조상 행들의 rowIndex를 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 조상을 찾으려는 행의 index\n\n**Return:**\n\n```Array``` - rowIndex가 담긴 1차원 배열\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setDataType": {
          "!type": "fn(colIndex: number, dataType: string, options: +Object)",
          "!doc": "특정 column의 dataType 속성을 변경. \n\n단, 컬럼의 inputType이 text이고 dataType이 text, number, float, date인 경우만 가능.\n```javascript\n(gridView.column의 관련 속성)\n dataType=text \n dataType=number \n dataType=float\n dataType=date\n```\n\n\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```dataType``` - ```String:Y``` - 변경하려는 컬럼의 dataType\n\n```options``` - ```Object:N``` - column의 displayFormat을 설정할 수 있는 옵션\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nvar options = {\n    displayFormat : \"yyyy-.MM\"\n}\ngridview1.setDataType(\"Region\", \"date\", options);\n```\n\n"
        },
        "setColumnBackgroundColor": {
          "!type": "fn(colIndex: number, color: string)",
          "!doc": "colIndex에 해당하는 열의 배경색을 일괄 설정.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 배경색을 설정할 열 index 또는 id\n\n```color``` - ```String:Y``` - 배경색으로 설정할 색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setCellDisplayFormatter": {
          "!type": "fn(rowIndex: number, colIndex: number, formatter: string)",
          "!doc": "특정 cell의 displayFormatter 속성을 변경. (inputType=custom일 경우에만 동작.)\n```javascript\n(관련 속성)\n setCellInputTypeCustom=true인 경우에만 유효.\n```\n\n\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 변경하려는 셀의 index\n\n```colIndex``` - ```Number:Y``` - 변경하려는 컬럼의 index\n\n```formatter``` - ```String:Y``` - 변경하려는 displayFormatter 함수 이름\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setMaxLength": {
          "!type": "fn(colIndex: number, len: number)",
          "!doc": "그리드의 컬럼의 maxLength 값을 설정.\n\ninputType이 text, textarea, textImage, secret, autoComplete 컬럼만 지원.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 컬럼의 index 또는 id\n\n```len``` - ```number:Y``` - 컬럼에 적용할 maxLength\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.setMaxLength(\"a\", 5); // id가 \"a\"인 컬럼에 maxLength를 5로 변경\n```\n\n"
        },
        "enableAllDate": {
          "!type": "fn(colIndex: string)",
          "!doc": "disableAfterDate 및 disableBeforeDate API를 통해서 비활성화된 날짜들을 다시 활성화시켜 선택 가능하도록 변경.\n\n**Parameters:**\n\n```colIndex``` - ```String||Number:Y``` - 컬럼 ID 혹은 Index\n\n**Since:**\n\n5.0_5.4795B.20230127.161828\n\n**Sample:**\n\n```javascript\n// 사용 예\n gridView1.enableAllDate('col2');\n```\n\n"
        },
        "getFixedRow": {
          "!type": "fn()",
          "!doc": "gridView가 가로 틀고정된 경우, 틀고정 위치를 반환. 첫번째 행일 경우 1을 반환.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setGridReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "gridView 전체에 readOnly 속성을 설정한다.\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - [true, false]readOnly 적용여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeColumnClass": {
          "!type": "fn(colIndex: number)",
          "!doc": "column에 동적으로 적용된 사용자 class를 삭제. 복수 클래스 지정시 띄어쓰기( )를 구분자로 사용. \n\n복수 클래스 지정 시 순서와 상관없이 동일하게 동작한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number:Y``` - 컬럼의 열번호 또는 컬럼 아이디\n\n**Since:**\n\n5.0_5.4666B.20220705.144534\n\n**Sample:**\n\n```javascript\n gridView1.removeColumnClass(\"col1\", \"cRed\"); // col1 열에 적용되었던 cRed 클래스를 삭제\n gridView1.removeColumnClass(\"col1\", \"cBlue cRed\"); // col1 열에 적용되었던 cBlue 및 cRed 클래스를 삭제.\n```\n\n"
        },
        "setDrillDownDragDrop": {
          "!type": "fn(value: bool)",
          "!doc": "drillDown 컬럼에 드래그-앤-드롭을 설정. \n\ndrillDown컬럼이 포함된 GridView 에서 dataDragDrop=true 설정하고, \n\nsetDrillDownDragDrop 함수에 파라미터로 true로 설정값을 넘겨주면, \n\n드릴다운 드래그-앤-드롭이 동작.\n\n**Parameters:**\n\n```value``` - ```Boolean:Y``` - drilldown컬럼이 포함된 gridView에서 drilldown  drag drop을 동작하게 하는 여부\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n gridView1.setDrillDownDragDrop(true);\n //실행 결과 : 데이터들이 드래그 앤 드랍으로 이동 가능하다.\n```\n\n"
        },
        "mergeByRow": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 row 내에서 같은 데이터가 연속적으로 나타나는경우 이들을 모두 병합. (가로 병합)\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n|options.fixedRows|<Boolean:N>|row 영역을 fixedRow 영역으로 제한.|\n|options.fixedCols|<Boolean:N>|columm 영역을 fixedColumn 영역으로 제한.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderBackgroundColor": {
          "!type": "fn(headerId: string, color: string)",
          "!doc": "header 셀의 배경 색상을 설정.\n\n**Parameters:**\n\n```headerId``` - ```String||Number:Y``` - header cell의 id 또는 index\n\n```color``` - ```String:Y``` - background에 지정할 색상\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setStartRowNumber": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowNum 컬럼에 표현되는 행번호의 시작되는 숫자의 index를 설정.\n\nindex의 값이므로 10을 설정하면 화면에서는 11부터 시작. \n\nrowNumVisible=true인 경우에만 유효함.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 행의 번호의 시작 index\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//gridView의 rowNumVisible 속성을 true로 적용 한 경우\n\ngridView1.setStartRowNumber(10);\n// (표시 예) rowNum 컬럼에 1부터 표현됬던 rowNum값이 11부터 증가하여 표현된다.\n```\n\n"
        },
        "getFormattedHeaderValue": {
          "!type": "fn(headerId: string, value: string)",
          "!doc": "header에 설정된 dispalyFormat으로 formatted된 값을 반환.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 id\n\n```value``` - ```String:Y``` - formatted될 값\n\n**Return:**\n\n```String``` - header에 설정된 formatter가 적용된 값\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOpenStatus": {
          "!type": "fn(rowIndex: number)",
          "!doc": "gridView에 drilldown을 적용한 경우 rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - openStatus를 가져오려는 행의 index\n\n**Return:**\n\n```Boolean``` - [true, false]drilldown의 open 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getSortableStatus": {
          "!type": "fn()",
          "!doc": "sorting된 컬럼의 순서대로 해당 컬럼의 header 정보를 담은 object를 array로 반환. \n\nsorting된 컬럼이 없을 경우 빈 array를 반환.\n\n반환된 array의 각 object는 colID, dataType, sortOrder를 담고 있음.\n\nsortOrder=1은 오름 정렬이고, sortableOrder=-1은 내림 정렬.\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setHeaderSortImage": {
          "!type": "fn(headerId: string, orderNum: number, sortOrd: number)",
          "!doc": "header의 sort 이미지를 설정하며 data의 sort는 dataList의 sort API를 이용해야 함.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - header의 ID\n\n```orderNum``` - ```Number:N``` - [default:-1, 1, 0]sort 상태를 나타내는 숫자 값\n\n|property|type|description|\n|:-|:-|:-|\n|\"1\"|오름 차순|null|\n|\"-1\"|내림 차순|null|\n|\"0\"|sort를 하지 않는 상태|null|\n\n\n```sortOrd``` - ```Number:N``` - [default:0]multisort의 경우 sort의 우선순위를 나타내는 숫자 값. 하위호환성 유지용. [기본 값: 0]\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getCheckedData": {
          "!type": "fn(colIndex: number)",
          "!doc": "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환한다. 해당 컬럼이 checkbox가 아닐 경우 비어있는 배열을 반환한다.\n\n**Parameters:**\n\n```colIndex``` - ```Number||String:Y``` - 열 index 또는 id\n\n**Return:**\n\n```Array``` - data가 담긴 2차원 배열.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//checkbox, 이름, 생년월일이 정의 된 gridView가 정의되어 있고 checkbox의 컬럼의 ID가 chk 인 경우\n\nvar tmpRs = gridView1.getCheckedData(\"chk\");\n// (반환 예) [[\"1\",\"정형돈\",\"19780207\"],[\"1\",\"유승호\",\"19930817\"],[\"1\",\"김민희\",\"19820301\"]]\n```\n\n"
        },
        "setSortable": {
          "!type": "fn(headerId: string, sortable: bool)",
          "!doc": "컬럼의 sortable 속성을을 동적으로 설정한다.\n\n**Parameters:**\n\n```headerId``` - ```String:Y``` - sortable을 동적으로 설정할 헤더의 ID\n\n```sortable``` - ```Boolean:Y``` - sortable 여부\n\n**Since:**\n\n5.0_4.4787B.20230119.145956\n\n**Sample:**\n\n```javascript\n// 사용 예\ngridView1.setSortable(headerId, true);\n```\n\n"
        },
        "setFixedColumn": {
          "!type": "fn(fixedColNum: number)",
          "!doc": "세로 틀고정을 설정.\n\n**Parameters:**\n\n```fixedColNum``` - ```Number:Y``` - 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수. 1번째 컬럼을 틀 고정 할 경우 1로 입력한다.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//1번째 컬럼의 세로 틀고정 설정\ngridView1.setFixedColumn(1);\n\n//3번째 컬럼까지 세로 틀고정 설정\ngridView1.setFixedColumn(3);\n```\n\n"
        },
        "spanAll": {
          "!type": "fn(openFlag: bool)",
          "!doc": "drilldown을 사용하는 gridView에서 전체 데이터를 모두 펼치거나 모두 접는 기능. \n\n인자로 숫자를 넣는 경우 해당 depth까지 데이터를 펼침.\n\n**Parameters:**\n\n```openFlag``` - ```Boolean||Number:Y``` - [true, false]open 여부, 숫자를 넣는 경우 해당 depth까지 데이터를 펼침.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\ngridView1.spanAll(true); // 접혀 있는 데이터를 모두 펼침.\ngridView1.spanAll(2); // depth가 2까지인 데이터를 모두 펼침.\n```\n\n"
        },
        "isEditing": {
          "!type": "fn()",
          "!doc": "GridView의 현재 편집 상태를 반환.\n\n**Return:**\n\n```Boolean``` - 편집중 인지의 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeFocusedMultiCell": {
          "!type": "fn(startRow: number, startCol: number, endRow: number, endCol: number)",
          "!doc": "직사각형 영역만큼 cell의 focus를 해제.\n\n**Parameters:**\n\n```startRow``` - ```Number:Y``` - 해제할 포커스영역 시작지점의 row값. 즉, 포커스 해제영역 왼쪽 최상단 셀의 rowIndex.\n\n```startCol``` - ```Number:Y``` - 해제할 포커스영역 시작지점의 column값. 즉, 포커스 해제영역 왼쪽 최상단 셀의 colIndex\n\n```endRow``` - ```Number:Y``` - 해제할 포커스영역 종료지점의 row값. 즉, 포커스 해제영역 우측 최하단 셀의 rowIndex\n\n```endCol``` - ```Number:Y``` - 해제할 포커스영역 종료지점 column값. 즉, 포커스 해제영역 우측 최하단 셀의 colIndex\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n gridView1.removeFocusedMultiCell(3,2,4,3);\n // 실행결과 : (3,2), (3,3), (4,2), (4,3)셀의 포커스가 해제됨. \n// 포커스가 걸려있지 않았던 셀은 아무 동작을 하지 않음.\n```\n\n"
        },
        "setColumnStyle": {
          "!type": "fn(colIndex: string, styleName: string, styleValue: string)",
          "!doc": "colIndex에 해당하는 열에 styleName에 해당하는 스타일을 styleValue로 설정.\n\n**Parameters:**\n\n```colIndex``` - ```String:Y``` - 스타일을 설정할 열 번호 혹은 컬럼 id\n\n```styleName``` - ```String:Y``` - 설정할 스타일 이름\n\n```styleValue``` - ```String:Y``` - 설정할 스타일 값\n\n**Since:**\n\n5.0_5.4951B.20230712.081311\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getAllVisibleJSON": {
          "!type": "fn()",
          "!doc": "화면에 (displayFormat 등이 적용되어)출력된 데이터를 JSON으로 반환. \n\n데이터가 필터링된 경우, 필터링이 적용된 데이터를 JSON으로 반환.\n\n**Return:**\n\n```JSON``` - JSON 데이터\n\n**Since:**\n\n5.0_1.2553B.20170314.104636\n\n**Sample:**\n\n```javascript\ngridView1.getAllVisibleJSON();\n// (반환 예) [{\"col1\":\"아이유\",\"col2\":\"1993-05-16\"},{\"col1\":\"정형돈\",\"col2\":\"1978-02-07\"},{\"col1\":\"유승호\",\"col2\":\"1993-08-17\"},{\"col1\":\"김민희\",\"col2\":\"1982-03-01\"}]\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number)",
          "!doc": "type에 따라 세부 disabled 속성을 반환.\n```javascript\n(type에 따른 세부 내용)\n all :    gridView 전체, row, column, cell 에 지정된 disabled 속성값들을 전부 체크하여 해당 cell에 적용된 실제 disabled 속성값을 반환.\n grid :   gridView 전체에 disabled 속성의 적용여부를 반환.\n row :    해당 row에 disabled 속성의 적용여부를 반환하며 getRowDisabled API와 동일.\n            gridView 전체에 disabled속성을 넣더라도 해당 row에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n column : 해당 column에 disabled 속성의 적용여부를 반환하며 getColumnDisabled API와 동일.\n            gridView 전체에 disabled속성을 넣더라도 해당 column에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n cell :   해당 cell에 disabled 속성의 적용여부를 반환하며 getCellDisabled API와 동일.\n            gridView 전체 또는 해당 cell을 포함하는 row나 column에 disabled속성을 넣더라도 해당 cell에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n```\n\n\n\n**Parameters:**\n\n```type``` - ```String:Y``` - [default:grid, row, column, cell, all]disabled 속성을 가져 올 type.\n\n```rowIndex``` - ```Number:Y``` - disabled속성을 가져올 행 index\n\n```colIndex``` - ```Number||String:Y``` - disabled속성을 가져올 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 type에 적용된 disabled속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOverflowX": {
          "!type": "fn()",
          "!doc": "overflowX 속성의 설정값을 반환.\n\n**Return:**\n\n```String``` - [default:auto, hidden, scroll]overflowX속성의 설정값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getOverflowY": {
          "!type": "fn()",
          "!doc": "overflowY 속성의 설정값을 반환.\n\n**Return:**\n\n```String``` - [default:auto, hidden, scroll]overflowY속성의 설정값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getRowColor": {
          "!type": "fn(rowIndex: number)",
          "!doc": "rowIndex에 해당하는 행의 글자색을 반환.\n\n**Parameters:**\n\n```rowIndex``` - ```Number:Y``` - 글자색을 반환할 행의 index\n\n**Return:**\n\n```String``` - 행의 글자색\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "mergeByRestricRow": {
          "!type": "fn(options: +Object)",
          "!doc": "같은 row 내에서 연속적으로 데이터가 같으면서 동시에 자신의 위쪽에 위치한 row가 merge된 경우 해당 row들을 병합. \n\nn+1행에서 n행을 upperRow으로 지정한 형태.\n\n**Parameters:**\n\n```options``` - ```JSON:N``` - 병합 세부 설정.\n\n|property|type|description|\n|:-|:-|:-|\n|options.noDraw|<Boolean:N>|그리드를 갱신하지 않음. (병합을 여러번 실행할 때 성능 개선을 위해 사용됨.)|\n|options.keepMerge|<Boolean:N>|이전에 병합된 내용을 유지.|\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setBottomRowIndex": {
          "!type": "fn(bottomRowIndex: number)",
          "!doc": "화면에 보여지는 gridView 영역에 bottomRowIndex 해당하는 row가 최하단에 위치하도록 조정.\n\n세로 스크롤 위치를 이동.\n\n**Parameters:**\n\n```bottomRowIndex``` - ```Number:Y``` - 최하단에 위치할 rowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn(type: string, rowIndex: number, colIndex: number)",
          "!doc": "type에 따라 readOnly 속성을 반환.\n```javascript\n(type에 따른 세부 내용)\n grid :   gridView 전체에 readOnly 속성의 적용여부를 반환.\n row :    해당 row에 readOnly 속성의 적용여부를 반환하며 getRowReadOnly API와 동일. \n            gridView 전체에 readOnly속성을 넣더라도 해당 row에 readOnly속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n column : 해당 column에 readOnly 속성의 적용여부를 반환하며 getColumnReadOnly API와 동일.\n                gridView 전체에 readOnly속성을 넣더라도 해당 column에 readOnly속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n cell :   해당 cell에 readOnly 속성의 적용여부를 반환하며 getCellReadOnly API와 동일.\n            gridView 전체 또는 해당 cell을 포함하는 row나 column에 readOnly속성을 넣더라도 해당 cell에 readOnly 속성을 직접 넣은 경우가 아닌 경우 false를 반환.\n all :    gridView 전체, row, column, cell에 지정된 readOnly 속성값들을 전부 계산하여 해당 cell에 적용된 실제 readOnly 속성값을 반환.\n```\n\n\n\n**Parameters:**\n\n```type``` - ```String:Y``` - [default:grid, row, column, cell, all]readOnly 속성을 가져올 type\n\n```rowIndex``` - ```Number:Y``` - readOnly속성을 가져올 행 index\n\n```colIndex``` - ```Number||String:Y``` - readOnly속성을 가져올 열 index 또는 id\n\n**Return:**\n\n```Boolean``` - 해당 type에 적용된 readOnly속성값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnEnableColumn": {
          "!type": "fn(gridColumnId: number, enableColumnId: string, enableColumnFalseValue: string)",
          "!doc": "지정한 GridView 컬럼이 선택 목록을 표시하는 경우, 일부 선택 목록을 disable 처리할 수 있는 기능. \n\n해당 GridView 컬럼의 inputType이 select, autoComplete, checkcombobox인 경우에만 해당. \n\nSelect, AutoComplete, CheckComboBox 컴포넌트의 setEnableColumn 함수를 실행하는 것과 같은 효과. \n\n(각 컴포넌트의 enableColumn, enableColumnFalseValue, setEnableColumn API 참조.)\n\n**Parameters:**\n\n```gridColumnId``` - ```Number||String:Y``` - gridView 컬럼의 인덱스 혹은 ID.\n\n```enableColumnId``` - ```String:Y``` - 해당 컬럼(enableColumnId)과 바인딩된 데이터 리스트의 컬럼 ID. (disable 여부에 대한 데이터를 갖고 있는 컬럼.)\n\n```enableColumnFalseValue``` - ```String:N``` - disable 조건에 해당하는 값.\n\n**Since:**\n\n5.0_4.4556B.20211222.174737\n\n**Sample:**\n\n```javascript\n// column1의 inputType은 select, autoComplete, checkcombobox 중 하나이다.\n// column1의 목록 데이터는 dataList1과 바인딩 되어 있고, dataList1은 \"label, value, type\" 3개의 컬럼으로 이루어져 있다. \n// label, value는 column1의 목록 label, value와 대응되며, type 컬럼이 disable 정보를 담고 있다.\n// 아래를 실행. \n\ngridView1.setColumnVisibleColumn(\"column1\", \"Type\", false);\n\n// 실행 결과: dataList1의 type값이 false에 해당하는 목록은 disable 처리되어 선택이 되지 않게 된다.\n//\n```\n\n"
        },
        "setFooterValue": {
          "!type": "fn(footerId: string, data: string)",
          "!doc": "footer의 inputType이 text인 경우만 적용되며 data의 값을 footer에 설정.\n\n**Parameters:**\n\n```footerId``` - ```String||Number:Y``` - footer의 id 또는 index\n\n```data``` - ```String:Y``` - footer에 넣을 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setColumnVisibleColumn": {
          "!type": "fn(gridColumnId: number, visibleColumnId: string, visibleColumnFalseValue: string)",
          "!doc": "지정한 GridView 컬럼이 선택 목록을 표시하는 경우, 일부 선택 목록을 숨길 수 있는 기능. \n\n해당 GridView 컬럼의 inputType이 select, autoComplete, checkcombobox인 경우에만 해당. \n\nSelect, AutoComplete, CheckComboBox 컴포넌트의 setVisibleColumn 함수를 실행하는 것과 같은 효과. \n\n(각 컴포넌트의 visibleColumn, visibleColumnFalseValue, setVisibleColumn API 참조.)\n\n**Parameters:**\n\n```gridColumnId``` - ```Number||String:Y``` - gridView 컬럼의 인덱스 혹은 ID.\n\n```visibleColumnId``` - ```String:Y``` - 해당 컬럼(visibleColumnId)과 바인딩된 데이터 리스트의 컬럼 ID. (숨기기 여부에 대한 데이터를 갖고 있는 컬럼.)\n\n```visibleColumnFalseValue``` - ```String:N``` - 숨기기 조건에 해당하는 값.\n\n**Since:**\n\n5.0_2.3798B.20190909.171404\n\n**Sample:**\n\n```javascript\n// column1의 inputType은 select, autoComplete, checkcombobox 중 하나이다.\n// column1의 목록 데이터는 dataList1과 바인딩 되어 있고, dataList1은 \"label, value, type\" 3개의 컬럼으로 이루어져 있다. \n// label, value는 column1의 목록 label, value와 대응되며, type 컬럼이 visible 정보를 담고 있다.\n// 아래를 실행. \n\ngridView1.setColumnVisibleColumn(\"column1\", \"Type\", false);\n\n// 실행 결과: dataList1의 type값이 false에 해당하는 목록은 화면에 보이지 않게 된다.\n//\n```\n\n"
        },
        "getBottomRowIndex": {
          "!type": "fn()",
          "!doc": "현재 눈에 보여지는 gridVeiw의 최하단 row의 rowIndex를 반환. \n\n그려진 행이 없으면 -1이 반환됨.\n\n**Return:**\n\n```Number``` - 최하단 row의 rowIndex\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 총 10건의 row의 데이터가 셋팅되고 화면에는 4건의 데이터가 보여지는 경우,\n// gridView의 height가 작아 10건의 데이터를 다 표현하지 못하고 스크롤이 생겨 4건의 데이터만 눈에 보여질 때,\n// 아래를 수행.\ngridView1.getBottomRowIndex();\n// (반환 예) 3\n```\n\n"
        }
      },
      "pageControl": {
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n2.0_1.2639A.20121231.165520\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "moveToRight": {
          "!type": "fn(direction: string)",
          "!doc": "선택된 인덱스를 1만큼 감소시킴.\n\n**Parameters:**\n\n```direction``` - ```String:N``` - pagingType=\"2\"일 때 드래깅에 상관 없이 강제 이동 방향을 표시.\n\n|property|type|description|\n|:-|:-|:-|\n|\"previous\"|좌|null|\n|\"next\"|우|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 현재 페이지가 3페이지인 경우,\n pageControl1.moveToRight('previous');\n// pagingType=\"1\"인 경우, direction은 무시되며 4페이지로 이동.\n// pagingType=\"2\"인 경우, 4페이지로 이동. 왼쪽에 이동 방향 강제 표시.\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다.\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 바꾸고 싶은 style 값의 이름\n\n```value``` - ```String:Y``` - 설정할 style의 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n예: 컴포넌트 스타일 width를 변경하고자 하는 경우.\ncomponentId.setStyle(\"width\", 100); \n픽셀 단위를 기본으로 하며, componentId.setStyle(\"width\", \"100px\"); 과 동일하다.\n%단위의 표현을 하고자 하면     componentId.setStyle(\"width\", \"100%\"); 로 명시하여 준다.\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setCount": {
          "!type": "fn(count: number)",
          "!doc": "PageList의 전체 페이지 수를 새로 지정.  \n\n새로 지정된 값으로 페이지 목록이 갱신됨.\n\nAPI 호출시 페이지가 첫 페이지로 초기화됨.\n\n**Parameters:**\n\n```count``` - ```Number:Y``` - 새로 지정할 전체 페이지 수\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 전체 페이지 수를 100으로 지정\n pageControl1.setCount(100);\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 CSS class를 추가. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가할 class의 이름\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제)\n// input1 컴포넌트에 oddClass라는 class를 추가    \ninput1.addClass(\"oddClass\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 class를 삭제. (웹스퀘어 컴포넌트 공통.)\n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n // config.xml 파일에 아래 설정 추가 \n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제 할 class명\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox의 속성으로 class가 직접 정의된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래 항목을 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// removeClass를 통해 삭제 가능. \ninput1.removeClass(\"tmpInputClass\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트에서 특정 class를 제거하거나 추가. (웹스퀘어 컴포넌트 공통.)\n\n웹스퀘어 컴포넌트가 파라미터로 주어진 class를 포함한 경우, 해당 class를 제거. \n\n웹스퀘어 컴포넌트에 파라미터로 주어진 class가 없는 경우, 해당 class를 추가. \n\n기본적으로 addClass를 통해 추가된 class만 삭제 가능. \n\n웹스퀘어 컴포넌트의 속성으로 직접 정의된 class를 삭제하기 위해서는 config.xml 파일에 아래 설정을 추가. \n```javascript\n // config.xml 파일에 아래 설정 추가\n <style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가/삭제할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n//config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// tmpInputClass class를 삭제.\ninput1.toggleClass(\"tmpInputClass\");\n\n// (위에서 삭제된) tmpInputClass class를 다시 추가.\ninput1.toggleClass(\"tmpInputClass\");\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n2.0_1.4441B.20141010.114554\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "getSelectedIndex": {
          "!type": "fn()",
          "!doc": "선택된 인덱스를 반환.\n\n**Return:**\n\n```Number``` - 현재 선택된 인덱스\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 5번째 페이지가 선택된 경우,\n var returnValue = pageControl1.getSelectedIndex();\n// returnValue는 5.\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "moveToLeft": {
          "!type": "fn(direction: string)",
          "!doc": "선택된 인덱스를 1만큼 감소시킴.\n\n**Parameters:**\n\n```direction``` - ```String:N``` - pagingType=\"2\"인 경우, 드래깅에 상관 없이 강제 이동 방향을 표시.\n\n|property|type|description|\n|:-|:-|:-|\n|\"previous\"|좌|null|\n|\"next\"|우|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 현재 페이지가 3페이지인 경우,\n pageControl1.moveToLeft('next');\n// pagingType=\"1\"인 경우, direction은 무시되고 2 페이지로 이동.\n// pagingType=\"2\"인 경우, 2 페이지로 이동. 오른쪽에 이동 방향 강제 표시.\n```\n\n"
        },
        "setSelectedIndex": {
          "!type": "fn(idx: number, direction: string)",
          "!doc": "선택된 인덱스를 변경.\n\n**Parameters:**\n\n```idx``` - ```Number:Y``` - 새로 선택할 인덱스\n\n```direction``` - ```String:N``` - pagingType=\"2\"인 경우, 드래깅에 상관 없이 강제 이동 방향을 표시.\n\n|property|type|description|\n|:-|:-|:-|\n|\"previous\"|좌|null|\n|\"next\"|우|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n pageControl1.setSelectedIndex(5, \"next\");\n// pagingType=\"1\"인 경우, direction은 무시되고 5 페이지로 이동.\n// pagingType=\"2\"인 경우, 5 페이지로 이동. 드래깅에 상관 없이 오른쪽에 이동 방향 강제 표시.\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "웹스퀘어 컴포넌트의 class를 변경. (웹스퀘어 컴포넌트 공통.) \n\n기본적으로 addClass를 통해 추가된 class만 변경 가능. \n\n웹스퀘어 컴포넌트의 class 속성에 직접 정의된 class를 삭제하려면 config.xml 파일에 아래 설정을 추가해야 함. \n```javascript\n// config.xml에 아래 설정을 추가. \n<style><removeDefaultClass value=true /><\/style>\n```\n\n\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 변경할 class\n\n```newClassName``` - ```String:Y``` - 새로 사용할 class\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n\n// config.xml 파일에 아래를 추가.\n<style>\n    <removeDefaultClass value=\"true\" />\n<\/style>\n\n// class를 변경 가능. \n// (tmpInputClass class를 tmpInputWarninClass로 변경.)\ninput1.changeClass(\"tmpInputClass\",\"tmpInputWarninClass\");\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      },
      "span": {
        "getLabel": {
          "!type": "fn()",
          "!doc": "label을 반환. getValue와 동일한 기능을 제공.\n\n**Return:**\n\n```String``` - Span의 label\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 span1 정의 된 경우\n<w2:span id=\"span01\" label=\"Pinocchio\" style=\"position: relative;\"><\/w2:span>\n\nvar returnValue = span1.getLabel();\n// (반환 값) \"Pinocchio\"\n```\n\n"
        },
        "setInitStyle": {
          "!type": "fn(property: string)",
          "!doc": "컴포넌트의 초기 스타일을 복구한다. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다 (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```property``` - ```String:N``` - CSS 속성 (지정하지 않으면 모든 속성의 초기 값으로 복구.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\ngroup1.setInitStyle();\n```\n\n"
        },
        "getDataType": {
          "!type": "fn()",
          "!doc": "dataType 속성 값을 반환.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "focus": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트에 포커스를 줌. (웹스퀘어 컴포넌트 공통.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setPosition": {
          "!type": "fn(left: number, top: number, mode: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```left``` - ```Number:Y``` - 설정할 left 위치 값 또는 null.\n\n```top``` - ```Number:Y``` - 설정할 top 위치 값 또는 null.\n\n```mode``` - ```String:N``` - 위치 설정 방법. [default: absolute, delta]\n\n|property|type|description|\n|:-|:-|:-|\n|absolute|입력된 값을 위치로 설정.|null|\n|delta|현재 위치에 입력된 left 및 top 값을 추가.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 top만 100px로 설정.\ncomponentId.setPosition(null, 100);\n```\n\n"
        },
        "getOpacity": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 반환. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS의 opacity 속성 값을 반환.\n\n**Return:**\n\n```Integer``` - Opacity 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 opacity CSS를 적용.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;opacity:0.2;\"><\/xf:input>\n        \n// inputBox 컴포넌트의 opacity 값을 반환. \nvar returnValue = input1.getOpacity(); \n// returnValue는 0 ~ 1 사이의 실수.\n// (반환 값) \"0.2\"\n```\n\n"
        },
        "getDataListInfo": {
          "!type": "fn()",
          "!doc": "컴포넌트와 바인딩된 DataList를 반환.\n\n**Return:**\n\n```Object``` - nodeset, label, value id를 객체로 반환\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 사용 예\nspan1.getDataListInfo();\n```\n\n"
        },
        "bind": {
          "!type": "fn(eventType: string, function: +Object)",
          "!doc": "컴포넌트에 이벤트와 핸들러 함수를 동적으로 할당. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```eventType``` - ```String:Y``` - 할당할 이벤트\n\n```function``` - ```Function:Y``` - 이벤트에 대한 핸들러 함수.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1의 onclick 이벤트에 대한 핸들러 함수를 직접 정의하여 할당. \ninput1.bind(\"onclick\", function(e){ alert(input1.getValue();}));\n\n// (예제 2)\n// 미리 commObj.ev_click 함수를 정의.\nvar commObj = {};\ncommObj.ev_click = function(e){\n    alert(\"click :: \"+this.id);\n};\n\n// input1 컴포넌트에 onclick 이벤트와 정의한 핸들러 함수를 동적으로 할당. \ninput1.bind(\"onclick\", commObj.ev_click );\n```\n\n"
        },
        "getTitle": {
          "!type": "fn()",
          "!doc": "컴포넌트의 title 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - title 속성 값.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트의 title 속성이 \"이름 입력\"으로 정의된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" title=\"이름 입력\"><\/xf:input>\n\nvar tmpTitle = input1.getTitle();\n// (반환 값 예시) \"이름 입력\"\n```\n\n"
        },
        "getGenerator": {
          "!type": "fn()",
          "!doc": "컴포넌트가 Generator에 의해 생성된 경우, 자신을 생성한 부모 Generator 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Object``` - 부모 Generator 객체\n\n**Since:**\n\n5.0_1.2722A.20170731.103905\n\n**Sample:**\n\n```javascript\n//부모 Generator가 자식으로 Trigger를 생성한 예제\n <w2:generator id=\"generator1\"> <w2:trigger id=\"trigger1\" ev:onclick=\"scwin.trigger1_onclick\"><\/w2:trigger><\/w2:generator>\n\n// 아래 예제의 경우 trigger1을 클릭하면 generator1 객체가 console에 표시됨. \n scwin.trigger1.onclick = function(){ console.log(this.getGenerator());} \n\n```\n\n"
        },
        "addClass": {
          "!type": "fn(className: string)",
          "!doc": "컴포넌트에 클래스를 추가.\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 추가하려는 클래스 명칭.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 \"selected\"라는 클래스를 추가.\n componentId.addClass(\"selected\");\n```\n\n"
        },
        "getInitStyle": {
          "!type": "fn(CSS: string)",
          "!doc": "컴포넌트의 초기 스타일을 반환. initStyle 속성을 true로 설정한 컴포넌트만 유효하게 동작한다.(웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```CSS``` - ```String:N``` - 속성 (지정하지 않으면 모든 정보 출력)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "visible": {
          "!type": "fn(flag: bool)",
          "!doc": "[deprecated] \n\nshow/hide 혹은 setStyle 사용을 권장.\n\n엔진 내부적으로 CSS visibility 속성을 설정.\n\n**Parameters:**\n\n```flag``` - ```Boolean:Y``` - 설정할 CSS visibility 속성 값\n\n|property|type|description|\n|:-|:-|:-|\n|true|visibility: visible;|null|\n|false|visibility: hidden;|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "getStyleValue": {
          "!type": "fn(style: string)",
          "!doc": "[deprecated]\n\ngetStyle 사용 권장.\n\n웹스퀘어 컴포넌트에 적용된 해당 CSS 속성 값을 반환.\n\n**Parameters:**\n\n```style``` - ```String:Y``` - 반환하려는 CSS 속성.\n\n**Return:**\n\n```String``` - style 해당 CSS 속성 값 (색을 반환하는 경우, HexCode로 반환됨.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "removeClass": {
          "!type": "fn(className: string)",
          "!doc": "className 클래스를 삭제.\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 삭제할 클래스\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// \"selected\" 클래스를 삭제.\n componentId.removeClass(\"selected\");\n```\n\n"
        },
        "hasClass": {
          "!type": "fn(className: string)",
          "!doc": "웹스퀘어 컴포넌트가 특정 class를 포함하고 있는지 확인. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 검색할 class 이름\n\n**Return:**\n\n```Boolean``` - class의 포함 여부\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// inputBox 컴포넌트에 class가 속성으로 직접 정의됨.\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" class=\"tmpInputClass\"><\/xf:input>\n        \nvar returnValue = input1.hasClass(\"tmpInputClass\");\n// (반환 값) true\n```\n\n"
        },
        "getID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 ID를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트 ID\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 동적으로 웹스퀘어 컴포넌트를 받을 경우, 아래와 같이 ID 확인 가능.\nfunction fn_validCheck(tmpObj){\n    var compID = tmpObj.getID();\n}\n// 위의 예제 에서 tmpObj가 \"input1\" ID를 가지고 있는 경우,\n// (반환 값) \"input1\"\n```\n\n"
        },
        "unbind": {
          "!type": "fn(type: string, function: +Object)",
          "!doc": "컴포넌트에서 이벤트를 제거. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:N``` - 제거할 이벤트. (생략할 경우 해당 컴포넌트의 모든 이벤트를 제거.)\n\n```function``` - ```Function:N``` - 제거할 이벤트의 핸들러 함수. (생략할 경우 해당 위에 지정한 이벤트에 등록된 모든 핸들러 함수를 제거.)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1에 등록된 모든 이벤트를 제거.\ninput1.unbind();\n\n// (예제 2)\n// input1의 onviewchange 이벤트에 대한 모든 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\");\n\n// (예제 3)\n// input1의 onviewchange 이벤트에 대한 func1 이벤트 핸들러 함수를 제거.\ninput1.unbind(\"onviewchange\", func1);\n```\n\n"
        },
        "getFormatValue": {
          "!type": "fn()",
          "!doc": "포맷이 적용된 값을 반환.\n\n**Return:**\n\n```String``` - 포맷이 적용된 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 displayFormat을 적용한 경우.\n<w2:span id=\"span11\" dataType=\"number\" displayFormat=\"#,###.00\" label=\"100000\" style=\"position: relative;\"><\/w2:span>\n\nvar returnValue = span1.getFormatValue();\n// (반환 값) \"100,000.00\"\n```\n\n"
        },
        "getUdcHome": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한 UDC 파일 경로를 파일명을 포함해서 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명은 마지막 .xml까지 포함. .xml을 제외한 경로는 getUdcRoot를 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome(); \n// (실행 결과) /a/b/udc.xml\n```\n\n"
        },
        "getScope": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)  \n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, null을 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체 또는 null\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \ntextbox1.getScope(); \n// (반환 값) wframe11 객체\n```\n\n"
        },
        "setReadOnly": {
          "!type": "fn(readOnly: bool)",
          "!doc": "웹스퀘어 컴포넌트의 readOnly 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```readOnly``` - ```Boolean:Y``` - readOnly 속성 활성화 여부. ( \"true\" : 활성화, \"false\" : 비활성화)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성을 true로 설정하는 예.\ncomponentId.setReadOnly(true);\n```\n\n"
        },
        "setUserData": {
          "!type": "fn(key: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트에 임의의 데이터를 설정. (웹스퀘어 컴포넌트 공통.) \n\n컴포넌트에 설정 가능한 key를 입력해야 함. 설정 가능한 key가 아닌 경우, 해당 내용이 로그에 출력됨.\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 설정할 데이터의 key\n\n```value``` - ```String:Y``` - 설정한 데이터의 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트에 'data'라는 key로 'WebSquare'라는 value를 설정하는 예제.\n\ncomponentId.setUserData(\"data\", \"WebSquare\");\n\n// 컴포넌트에 설정이 불가능한 key를 임력할 경우, key 설정이 불가능. \n \ncomponentId.setUserData(\"title\", \"WebSquare\");\n// 아래와 같이 로그가 출력됨. \n// !!!WARNING - [title] can't be defined as UserData.\n```\n\n"
        },
        "getScopeWindow": {
          "!type": "fn()",
          "!doc": "scope=true인 WFrame의 자식 컴포넌트인 경우, 부모 WFrame 객체를 반환. (웹스퀘어 컴포넌트 공통.)\n\nscope=true인 WFrame의 자식 컴포넌트가 아닌 경우, 전역 window 객체를 반환.\n\n**Return:**\n\n```Object``` - WFrame 객체의 scope 객체 또는 전역 window 객체\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// (예제)\n// 메인페이지에 wframe1이 있고, wframe1 내부에 wframe11이 존재. \n// 그리고, wframe11 내부에 textbox1이 존재.\n   \nvar scope = textbox1.getScopeWindow();\nscope.wframe11 === textbox1.getScope(); // true\n```\n\n"
        },
        "getUdcRoot": {
          "!type": "fn()",
          "!doc": "UDC 객체가 자신을 정의한  UDC 파일 경로를 반환. (웹스퀘어 컴포넌트 공통.)\n\n파일명을 포함하지 않음. 파일명을 포함한 경로는 getUdcHome을 사용해서 반환.\n\nUDC 객체가 아닌 컴포넌트에서 호출된 경우에는 undefined가 반환됨.\n\n**Return:**\n\n```String``` - UDC 파일 경로. (UDC가 아닌 경우, undefined가 반환됨.)\n\n**Since:**\n\n5.0_2.3229A.20180727.150112\n\n**Sample:**\n\n```javascript\n// 예제\n// UDC 파일 경로는 /a/b/udc.xml \n// 화면 XML은  /a/c/main.xml \n// UDC 객체의 ID는 udc1\n  \nudc1.getUdcHome();    \n// (실행 결과) /a/b/\n```\n\n"
        },
        "setDisabled": {
          "!type": "fn(disabled: bool)",
          "!doc": "웹스퀘어 컴포넌트의 disabled 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```disabled``` - ```Boolean:Y``` - disabled 상태.\n\n|property|type|description|\n|:-|:-|:-|\n|true|disabled 속성 활성화|null|\n|false|disabled 속성 비활성화|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성을 활성화.\ncomponentId.setDisabled(true);\n```\n\n"
        },
        "show": {
          "!type": "fn(displayType: string)",
          "!doc": "웹스퀘어 컴포넌트를 화면에 표시. (웹스퀘어 컴포넌트 공통.)\n\nCSS display 속성을 주어진 값으로 설정하고 visibility: show;를 적용.\n\n**Parameters:**\n\n```displayType``` - ```String:N``` - 적용할 CSS display 속성의 값.\n\n|property|type|description|\n|:-|:-|:-|\n|block|display: block;을 적용. (기본 값)|null|\n|inline|display: inline;을 적용.|null|\n|none|display: none;을 적용.|null|\n|\"\"|show 수행 이전의 display 속성 값으로 복구.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) display: block; CSS를 설정.\ncomponentId.show();  \n\n// (예제) 위제 설정한 display 속성 값을 취소하고 원래의 display 값을 복구.\ncomponentId.show(\"\");\n```\n\n"
        },
        "unbindRef": {
          "!type": "fn()",
          "!doc": "ref 바인딩을 해제.\n\n**Since:**\n\n5.0_1.3015A.20180410.143527\n\n**Sample:**\n\n```javascript\n\n```\n\n"
        },
        "setEventPause": {
          "!type": "fn(evList: string, flag: bool)",
          "!doc": "지정한 이벤트를 중단함. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```evList``` - ```String:N``` - 중단할 이벤트 목록. (null을 지정할 경우 해당 컴포넌트의 모든 사용자 이벤트가 중단되거나 중단 해제됨.)\n\n```flag``` - ```Boolean:Y``` - 이벤트 중단 여부.\n\n|property|type|description|\n|:-|:-|:-|\n|true|중단|null|\n|false|중단 해제.|null|\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// onclick 이벤트를 중단. \ninput1.setEventPause(\"onclick\", true); \n\n// (예제 2)\n// onfocus 및 onblur 이벤트의 중단을 해제.\ninput1.setEventPause(\"onfocus,onblur\", false); \n\n// (예제 3)\n// input1에 등록된 모든 사용자 이벤트를 중단.\ninput1.setEventPause(null, true);\n```\n\n"
        },
        "getStyle": {
          "!type": "fn(propertyName: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 반환할 CSS 속성\n\n**Return:**\n\n```String``` - CSS 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 input 컴포넌트가 정의 된 경우\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 width 값을 확인   \nvar returnValue = input1.getStyle(\"width\");\n\n// (반환 값) \"144px\"\n```\n\n"
        },
        "setRef": {
          "!type": "fn(path: string)",
          "!doc": "ref 속성을 설정. \n\nDataCollection과 연동시 data:라는 prefix를 꼭 붙여야 함.\n\n명시하지 않을 경우, InstanceData의 XPath로 인식됨.\n\n**Parameters:**\n\n```path``` - ```String:Y``` - ref의 경로\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// dataMap1의 name key와 textbox1 컴포넌트의 value를 binding 하는 경우\nspan1.setRef(\"data:dataMap1.name\");\n\n// InstanceData의 res/userData/name 과 연동할 경우.\nspan1.setRef(\"res/userData/name\");\n```\n\n"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```width``` - ```Number:Y``` - 새로 설정할 컴포넌트의 width 값 또는 null\n\n```height``` - ```Number:Y``` - 새로 설정할 컴포넌트의 height 값 또는 null\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트의 height만 100px로 설정.\ncomponentId.setSize(null,100);\n```\n\n"
        },
        "setDisplayFormatter": {
          "!type": "fn(formatter: string)",
          "!doc": "displayFormatter 속성을 설정.\n\n**Parameters:**\n\n```formatter``` - ```String:Y``` - 새로 설정 할 formatter 함수명\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 span이 정의 된 경우\n<w2:span id=\"span1\" label=\"hong gil dong\" style=\"position: relative;\"><\/w2:span>\n\n//전역스크립트에 아래와 같이 textbox1의 format Function을 정의 한다.(value의 값을 대문자로 치환)\nvar commObj = {}; \ncommObj.fn_setUpper = function(value){\n    value = value.toUpperCase();\n    return value;\n};\n\n//span1컴포넌트의 displayFormatter를 설정.\nspan1.setDisplayFormatter(\"commObj.fn_setUpper\");\n\n// (출력 예) HONG GIL DONG\n```\n\n"
        },
        "setStyle": {
          "!type": "fn(propertyName: string, value: string)",
          "!doc": "웹스퀘어 컴포넌트의 CSS 속성을 설정. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```propertyName``` - ```String:Y``` - 설정할 CSS 속성\n\n```value``` - ```String:Y``` - 해당 CSS 속성에 적용할 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1) 컴포넌트의 width를 200px로 설정\ncomponentId.setStyle(\"width\", \"200px\");\n\n// (예제 2) 배경색을 olive로 변경\ncomponentId.setStyle(\"background-color\",\"olive\");\n```\n\n"
        },
        "getOriginalID": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 originalID를 반환. (웹스퀘어 컴포넌트 공통.)\n\noriginalID는 Scope 기능을 사용할 경우 존재. \n\nscope=true인 WFrame를 사용할 경우, WFrame 내부의 컴포넌트 ID는 원래 사용자가 정의한 값(originalID) 앞에 prefix(wframeID + _)가 추가되는 방식으로 변경됨.  \n\noriginalID는 이 때, prefix가 추가되기 전 ID를 의미.\n\n**Return:**\n\n```String``` - 컴포넌트의 originalID\n\n**Since:**\n\n5.0_2.3346B.20181109.170706\n\n**Sample:**\n\n```javascript\n// WFrame을 사용하는 다중 화면 구조 예시\n\n// WFrame을 포함한 메인 화면 (main.xml) \n<w2:wframe id=\"wframe1\" src=\"text.xml\" scope=\"true\"/> \n\n// 메인 화면 WFrame에 연결되는 소스 화면 (text.xml)\n<w2:textbox id=\"textbox1\"/>\n\n// text.xml 화면의 내부 스크립트에서 ID 및 originalID 확인하는 예제.\n// getID 실행 \ntextbox1.getID(); // 실행 결과는 \"wframe1_textbox1\"\n \n// getOriginalID 실행 \ntextbox1.getOriginalID(); // 실행 결과는 \"textbox1\"\n```\n\n"
        },
        "setLocaleRef": {
          "!type": "fn(localeRef: string)",
          "!doc": "localeRef 속성값을 설정한다.\n\n**Parameters:**\n\n```localeRef``` - ```String:Y``` - 새로 설정할 localeRef 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 span1이 정의 된 경우\n<w2:span id=\"span1\" style=\"position: relative;\" localeRef=\"name\"><\/w2:span>\n\n//client 다국어 설정의 name key를 적용.\nspan1.setLocaleRef(\"name\");\n\n//만약 다국어 설정이 정상적으로 되어있지 않거나 name 이라는 key가 없는 경우 아래와 같은 text로 표현된다.\n//예시 ) global_undefined\n```\n\n"
        },
        "trigger": {
          "!type": "fn(type: string, array: +Object)",
          "!doc": "컴포넌트에서 특정 이벤트를 발생시킴. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 발생시킬 이벤트\n\n```array``` - ```Array:N``` - 이벤트 핸들러에 전달할 파라미터 배열\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제 1)\n// input1 컴포넌트에 onclick 이벤트를 발생시킴.\ninput1.trigger(\"onclick\");\n\n// (예제 2)\n// input1에 onviewchange 이벤트를 발생시키고 핸들러 함수에 (1,2) 인자를 전달하여 호출.\ninput1.trigger(\"onviewchange\", [1,2]);\n```\n\n"
        },
        "setDisplayFormat": {
          "!type": "fn(format: string)",
          "!doc": "displayFormat 속성을 설정.\n\n**Parameters:**\n\n```format``` - ```String:Y``` - 새로 설정할 displayFormat\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 span이 정의 된 경우\n<w2:span id=\"textbox1\" dataType=\"number\" label=\"1000000\" style=\"position: relative;\"><\/w2:span>\n\n// (출력 예) 1000000\n\n// span 컴포넌트의 value format을 3자리수 마다 ,가 찍히며 소수점 2자리까지 표현하도록 변경.\nspan.setDisplayFormat(\"#,###.#0\");\n\n// (출력 예) 1,000,000.00\n```\n\n"
        },
        "getValue": {
          "!type": "fn()",
          "!doc": "format이 적용 되지 않은 value(label 속성에 정의 된 값)를 반환한다.\n\n**Return:**\n\n```String``` - span의 value(label 속성의 값)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n//아래와 같이 span이 정의 된 경우\n<w2:span id=\"span1\" dataType=\"number\" displayFormat=\"#,###.00\" label=\"100000\" style=\"position: relative;\"><\/w2:span>\n\nvar returnValue = span1.getValue();\n//return 예시 )\"100000\"\n```\n\n"
        },
        "getDisabled": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 disabled 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - disabled 속성 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 disabled 속성 값 확인 예제\nvar returnValue = componentId.getDisabled();\n// (반환 값 예시) false\n```\n\n"
        },
        "getSize": {
          "!type": "fn(sizeName: string)",
          "!doc": "웹스퀘어 컴포넌트의 크기(width, height)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n%로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```sizeName``` - ```String:Y``` - 크기 값의 종류. sizeName 별 계산 방법은 아래 표를 참고.\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 컴포넌트의 크기 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\nvar returnValue = componentId.getSize(\"width\");\n// (반환 예) 100 \n// 픽셀 단위의 크기 값이 반환됨. \n// %로 설정된 경우, 픽셀로 변환된 값이 반환됨.\n```\n\n"
        },
        "hide": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트를 화면에서 숨김. (웹스퀘어 컴포넌트 공통.)\n\ndisplay:none; 및 visibility:hidden; CSS를 적용.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 컴포넌트를 숨김\ncomponentId.hide();\n```\n\n"
        },
        "getPosition": {
          "!type": "fn(positionName: string)",
          "!doc": "웹스퀘어 컴포넌트의 위치(left, top)를 반환. (웹스퀘어 컴포넌트 공통.) \n\n위치 값이 %로 설정된 경우, 픽셀로 변환된 값을 반환.\n\n**Parameters:**\n\n```positionName``` - ```String:Y``` - [left, top] 위치 종류\n\n**Return:**\n\n```Number``` - 컴포넌트의 위치 값\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 input 컴포넌트에 CSS 속성 margin이 적용된 경우,\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;margin:10px;\"><\/xf:input>\n\n// (예제) 위의 inputBox 컴포넌트의 top 값을 확인     \nvar returnValue = input1.getPosition(\"top\"); \n\n// 픽셀 단위의 위치 값이 반환됨.\n\n// (반환 값) 10\n```\n\n"
        },
        "toggleClass": {
          "!type": "fn(className: string)",
          "!doc": "className 클래스를 제거하거나 추가.\n\n**Parameters:**\n\n```className``` - ```String:Y``` - 제거하거나 추가할 클래스\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n componentId.toggleClass(\"selected\");\n// \"selected\" 클래스가 존재할 경우, 이를 삭제. \n// \"selected\" 클래스가 없을 경우, 이를 추가.\n```\n\n"
        },
        "setValue": {
          "!type": "fn(label: string)",
          "!doc": "화면에 출력될 텍스트를 설정.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 화면에 출력할 텍스트\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 화면에 \"Pinocchio\"를 출력.\nspan1.setValue(\"Pinocchio\");\n```\n\n"
        },
        "getPluginName": {
          "!type": "fn()",
          "!doc": "웹스퀘어 컴포넌트의 이름(pluginName)을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```String``` - 웹스퀘어 컴포넌트의 이름 (pluginName)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 아래와 같이 공통 함수에서 동적으로 웹스퀘어 객체를 받는 경우, 컴포넌트 종류에 따른 분기 처리가 가능.\nvar commObj = {};\n\ncommObj.fn_makeReqData = function(tmpObj){\n    var tmpID = tmpObj.getID(); // 컴포넌트 ID\n    var tmpCompType = tmpObj.getPluginName();   // 컴포넌트 이름\n\n    if(tmpCompType == \"input\"){\n        //..로직..\n    }else if(tmpCompType == \"gridView\"){\n        //..로직 ..\n    }else{\n        //..로직..\n    }\n};\n```\n\n"
        },
        "setLabel": {
          "!type": "fn(label: string)",
          "!doc": "label 값을 변경. setValue와 동일한 기능을 제공.\n\n**Parameters:**\n\n```label``` - ```String:Y``` - 출력할 텍스트\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// label을 \"WebSquare\"로 설정.\nspan1.setLabel(\"WebSquare\");\n```\n\n"
        },
        "getReadOnly": {
          "!type": "fn()",
          "!doc": "현재 웹스퀘어 컴포넌트에 설정된 readOnly 속성 값을 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Return:**\n\n```Boolean``` - 현재 설정되어있는 readOnly 속성\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// 컴포넌트의 readOnly 속성 값 확인 예제\nvar returnValue = componentId.getReadOnly();\n// (반환 값 예시) false\n```\n\n"
        },
        "getUserData": {
          "!type": "fn(key: string)",
          "!doc": "setUserData로 웹스퀘어 컴포넌트에 설정한 key의 value 혹은 사용자가 직접 페이지 소스(XML)에 속성으로 정의한 value를 반환. (웹스퀘어 컴포넌트 공통.)\n\n**Parameters:**\n\n```key``` - ```String:Y``` - 데이터의 key\n\n**Return:**\n\n```String``` - key에 해당하는 value\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// Input 컴포넌트에 사용자 속성(setTest)을 설정하는 예제\n<xf:input id=\"input1\" style=\"position: relative;width: 144px;height: 21px;\" setTest=\"Hello\"><\/xf:input>\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"setTest\");\n// (반환 값) \"Hello\"\n\n//setUserData를 통해 'valueTest'(key)와 'WebSquare'(data)로 설정하는 예제. \ninput1.setUserData(\"valueTest\",\"WebSquare\");\n\n// 위에서 설정한 setTest을 값을 반환하는 예제. \ninput1.getUserData(\"WebSquare\");\n// (반환 값) \"WebSquare\"\n```\n\n"
        },
        "changeClass": {
          "!type": "fn(oldClassName: string, newClassName: string)",
          "!doc": "oldClassName 클래스를 newClassName 클래스로 변경.\n\n**Parameters:**\n\n```oldClassName``` - ```String:Y``` - 삭제할 클래스.\n\n```newClassName``` - ```String:Y``` - 새로 사용할 클래스.\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// \"selected\" 클래스를 \"default\" class로 변경.\n componentId.changeClass(\"selected\",\"default\");\n```\n\n"
        },
        "setOpacity": {
          "!type": "fn(value: number)",
          "!doc": "웹스퀘어 컴포넌트의 불투명도를 설정. (웹스퀘어 컴포넌트 공통.)\n\n엔진 내부적으로 CSS 속성인 opacity(불투명도)를 설정.\n\n**Parameters:**\n\n```value``` - ```Number:Y``` - Opacity 값 (0과 1 사이의 실수)\n\n**Since:**\n\n5.0_1.1437A.20141127.170713\n\n**Sample:**\n\n```javascript\n// (예제) 불투명도를 0.45로 설정\ncomponentId.setOpacity(0.45);\n```\n\n"
        }
      }
    },
    "json": {
      "XML2JSONString": {
        "!type": "fn(data: +Object)",
        "!doc": "XML을 JSON으로 변환 후, String으로 반환.\n\n**Parameters:**\n\n```data``` - ```Object:Y``` - 변환할 XML\n\n**Return:**\n\n```String``` - JSON 형태의 String 값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "JSON2XML": {
        "!type": "fn(jsondata: +Object)",
        "!doc": "JSON 형태의 데이터를 XML 형태로 변환하여 반환.\n\n**Parameters:**\n\n```jsondata``` - ```Object:Y``` - JSON 데이터\n\n**Return:**\n\n```Object``` - XML 데이터\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      }
    },
    "style": {
      "getSize": {
        "!type": "fn(Element: +Object, sizeName: string)",
        "!doc": "컴포넌트의 크기 값을 반환합니다.\n\n**Parameters:**\n\n```Element``` - ```Element:Y``` - 설정할 Element\n\n```sizeName``` - ```String:Y``` - 위치 값의 종류\n\n|property|type|description|\n|:-|:-|:-|\n|height|element.clientHeight|null|\n|innerHeight|element.clientHeight + padding|null|\n|outerHeight|element.clientHeight + padding + border|null|\n|outerMarginHeight|element.clientHeight + padding + border + margin|null|\n|width|element.clientWidth|null|\n|innerWidth|element.clientWidth + padding|null|\n|outerWidth|element.clientWidth + padding + border|null|\n|outerMarginWidth|element.clientWidth + padding + border + margin|null|\n\n**Return:**\n\n```Number``` - 크기값 반환\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      },
      "setSize": {
        "!type": "fn(element: +Object, width: number, heigth: number)",
        "!doc": "Element의 크기를 설정합니다.\n\n**Parameters:**\n\n```element``` - ```Element:Y``` - 설정할 Element\n\n```width``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 width값\n\n```heigth``` - ```Integer:Y``` - 새로 설정할 컴포넌트의 height값\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n```\n\n"
      }
    },
    "bigDecimal": {
      "minus": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 빼는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - 뺄셈을 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - 뺄셈을 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"111111111111111\");\nvar b = WebSquare.bigDecimal(\"222222222222222\");\r\nvar result = a.minus(b);\r\nconsole.log(result.toString());\n```\n\n"
      },
      "compare": {
        "!type": "fn(data: +Object, type: bool)",
        "!doc": "type이 true 인 경우, 입력받은 bigDecimal과 비교하여 더 작은 수를 반환한다.\r\n\ntype이 false 이거나 undifined 인 경우, 입력받은 bigDecimal과 비교하여 더 큰 수를 반환한다.\n\n**Parameters:**\n\n```data``` - ```Object:Y``` - 비교 대상 bigDecimal 데이터\n\n```type``` - ```Boolean:N``` - 비교 방법 (true - 큰 수 반환, false - 작은 수 반환)\n\n**Return:**\n\n```Object``` - type에 따라 비교한 값들중 더 큰 수, 더 작은 수의 bigDecimal값을 반환한다.\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n\n// 최대값 구하기\r\nvar a = WebSquare.bigDecimal(\"111111111111111111111111111111\");\r\nvar b = WebSquare.bigDecimal(\"11111\");\r\n\r\nvar result = a.compare(b); \r\nvar result = a.compare(b,false);\r\nvar result = a.compare(b,0);\r\nconsole.log(result.toString()); //result = WebSquare.bigDecimal(\"111111111111111111111111111111\");\r\n\r\n// 최소값 구하기\r\nvar a = WebSquare.bigDecimal(\"111111111111111111111111111111\");\r\nvar b = WebSquare.bigDecimal(\"11111\");\r\n\r\nvar result = a.compare(b,true); \r\nvar result = a.compare(b,1);\r\nconsole.log(result.toString()); //result = WebSquare.bigDecimal(\"11111\");\r\n\n```\n\n"
      },
      "times": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 곱하는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - 곱셈을 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - 곱셈을 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"111111111111111\");\nvar b = WebSquare.bigDecimal(\"222222222222222\");\r\nvar result = a.times(b);\r\nconsole.log(result.toString());\n```\n\n"
      },
      "mod": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 mod하는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - mod를 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - mod를 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"111111111111111111111111111111\");\nvar b = WebSquare.bigDecimal(\"11111\");\r\nvar result = a.mod(b);\r\nconsole.log(result.toString());\n```\n\n"
      },
      "pow": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 제곱하는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - 제곱을 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - 제곱을 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"11111\");\nvar b = WebSquare.bigDecimal(\"5\");\r\nvar result = a.pow(b); // 단, 높은 수의 제곱은 수행하는 시간이 오래걸립니다.\r\nconsole.log(result.toString());\n```\n\n"
      },
      "divide": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 나누는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - 나눗셈을 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - 나눗셈을 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"111111111111111\");\nvar b = WebSquare.bigDecimal(\"222222222222222\");\r\nvar c = WebSquare.bigDecimal(\"0\");\r\nvar result = a.divide(b);\r\nconsole.log(result.toString());\r\nvar result2 = a.divide(c); //0으로 나눌경우 NaN을 표현하는 bigDecimal 데이터를 반환합니다.\r\nconsole.log(result2.toString());\n```\n\n"
      },
      "calc": {
        "!type": "fn(expression: string)",
        "!doc": "expression(연산식)을 입력받아 bigDecimal 연산을 수행한다. (a+b*c와 같은 형태) \r\n\nexpression에 사용되는 operand(피연산자)는 bigDecimal type이거나 bigDecimal로 치환할 수 있는 type이어야 한다.\r\n\nSP4 이상에서는 $p.bigDecimal.calc(); 형태로 호출해야 올바로 동작한다. WebSquare.bigDecimal.calc로 호출하면 올바로 동작하지 않을 수 있다.\n\n**Parameters:**\n\n```expression``` - ```String:Y``` - 연산식\n\n**Return:**\n\n```Object``` - 연산 결과를 bigDecimal로 반환.\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\n// (예제1)\nvar a = $p.bigDecimal(\"123456789012345678901234567890\"); \r\nvar b = $p.bigDecimal(\"111111111111111111111111111111\");\r\nvar c = $p.bigDecimal(\"678901234567890123456789012345\");\r\nvar d = $p.bigDecimal(\"345678934567893456789345678934\");\r\nvar ret = $p.bigDecimal.calc(\"a + b c + (d - a) / (c + d)\"); \r\ninput1.setValue(ret); \r\n//연산결과가 input1에 올바르게 표현됨.\r\n\r\n// (예제2)\r\nvar a = $p.bigDecimal(\"1234\");\r\nvar b = 3000;\r\nvar ret = $p.bigDecimal.calc (\"a+b*b-b/(a+b)\"); \r\n// Number + bigDecimal 연산도 가능함. 단 Number는 17자리 이하여야 함.\r\n \r\n// (예제3)\r\nvar a = \"abcd\"; // NaN\r\nvar b = $p.bigDecimal(\"200\");\r\nvar ret = $p.bigDecimal.calc(\"a + b\");\r\ninput2.setValue(ret); \r\n// 연산결과는 NaN 데이터를 나타내는 bigDecimal 타입. 숫자 타입이 아닌 데이터와 연산하면 전부 NaN이 반환됨.\n```\n\n"
      },
      "plus": {
        "!type": "fn(bigDecimal: +Object)",
        "!doc": "bigDecimal 타입의 데이터를 더하는 함수\n\n**Parameters:**\n\n```bigDecimal``` - ```Object:Y``` - 덧셈을 수행할 bigDecimal 데이터\n\n**Return:**\n\n```Object``` - 덧셈을 수행한 bigDecimal타입의 결과값\n\n**Since:**\n\n2.0_1.4077B.20140514.225705\n\n**Sample:**\n\n```javascript\nvar a = WebSquare.bigDecimal(\"111111111111111\");\nvar b = WebSquare.bigDecimal(\"222222222222222\");\r\nvar result = a.plus(b);\r\nconsole.log(result.toString());\n```\n\n"
      }
    },
    "net": {
      "getAllBASE64Parameter": {
        "!type": "fn()",
        "!doc": "Base64로 Encoding 된 get방식의 전체 parameter를 Base64 Decoding하여 JSON 형태로 반환합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.net.getAllBASE64Parameter();\n```\n\n"
      },
      "download": {
        "!type": "fn(actionUrl: string, XML: string, sendMethod: string, isXHR: string)",
        "!doc": "서버에서 파일을 다운로드 받는 함수.\n\n**Parameters:**\n\n```actionUrl``` - ```String:Y``` - 파일을 다운 받기 위해서 접속해야 하는 주소\n\n```XML``` - ```String:Y``` - 문자열은 xmlValue라는 이름으로 서버로 올라간다. 값을 지정하지 않은 경우(undefined인 경우) xmlValue라는 값은 제외하고 서버로 전송한다.\n\n```sendMethod``` - ```String:Y``` - get, post와 같은 전송 방식, 기본값은 post이다.\n\n```isXHR``` - ```String:Y``` - xhr 통신 유무 (기본값은 false)\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\n WebSquare.net.download( url, \"<test><\/test>\", \"post\" );\r\n\n```\n\n"
      },
      "getBASE64Parameter": {
        "!type": "fn(param: string)",
        "!doc": "Base64로 Encoding 된 get방식의 parameter(param)를 Base64 Decoding하여 반환합니다.\n\n**Parameters:**\n\n```param``` - ```String:N``` - 값을 가져올 uri에서 지정된 param\n\n**Return:**\n\n```String``` - param 문자열 반환\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.net.getBASE64Parameter(\"name\");\r\n\n```\n\n"
      },
      "getAllParameter": {
        "!type": "fn()",
        "!doc": "전체 parameter를 JSON 형태로 반환합니다.\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.net.getAllParameter();\r\n\n```\n\n"
      },
      "ajax": {
        "!type": "fn(options: +Object)",
        "!doc": "ajax 통신용 함수\n\n**Parameters:**\n\n```options``` - ```Object:Y``` - JSON형태 객체\n\n|property|type|description|\n|:-|:-|:-|\n|options.action|ajax 요청 주소|null|\n|options.mode|asynchronous(default)/synchronous|null|\n|options.mediatype|application/x-www-form-urlencoded, application/json, application/xml, text/xml|null|\n|options.method|get/post/put/delete|null|\n|options.requestData|요청 본문.|null|\n|options.requestHeader|요청 헤더에 임의로 추가할 내용. (필요한 경우에만 사용.)|null|\n|options.timeout|ajax 요청 후 timeout 시간. 이 시간 내에 응답이 없는 경우, error callback 함수를 실행.|null|\n|options.beforeAjax|요청전에 실행되는 함수로 이 함수내에서 false를 return하면 ajax 요청을 하지 않는다.|null|\n|options.success|요청이 성공한 경우 실행되는 callback 함수.|null|\n|options.error|요청이 실패한 경우 실행되는 callback 함수.|null|\n|options.externalHandler|암복호화 연계와 같이 외부 데이터 연계시 데이터 변환을 담당하는 사용자 함수. 인자로 option 객체를 전달 하며, option.requestData로 데이터에 접근 할수 있다. 사용자 함수는 데이터 변환 후 String을 반환해야 한다.|null|\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n//위의 예시 중 options.success에 지정 한 callback Function 정의 형태.\ndoSucess = function(e) {\r\n//e는 웹스퀘어 엔진에서 통신 후 결과를 담을 JSON 객체이다.\r\n//e.resourceUri - 통신 URI 반환\r\n//e.responseHeaders - Response Headers 내용 반환\r\n//e.responseStatusCode - Response Status Code 반환\r\n//e.responseReasonPhrase - Response Status Text 반환\r\n//e.responseBody - Response Data를 XML 데이터로 parse 한 XML 객체 반환.( Response Content-Type이 JSON 인 경우 json객체를 XML로 parse)\r\n//e.responseText - Response Data 원본으로 String 형태 반환\r\n    \r\n//responseText를 alert으로 출력.\r\nalert(\"success\\n\" + e.responseText);\r\n};\r\n    \r\ndoError = function(e) { //functoin을 직접 정의 한 경우.\r\n//e.errorType - \"target-error\" 고정값 반환\r\n//e.resourceUri - 통신 URI 반환\r\n//e.responseHeaders - Response Headers 내용 반환\r\n//e.responseStatusCode - Response Status Code 반환\r\n//e.responseReasonPhrase - Response Status Text 반환\r\n//e.requestBody - Request Data로 String 형태 반환\r\n//e.responseText - Response Data 원본으로 String 형태 반환\r\n\r\n//satus code alert으로 출력.\r\nalert(\"errorCode:\" + e.responseStatusCode);\r\n};  \r\n\r\nvar options = {};\r\noptions.action = \"../$p/extra/test.jsp\";\r\noptions.mode = \"asynchronous\";\r\noptions.mediatype = \"text/xml\";\r\noptions.method = \"post\";\r\noptions.requestData = \"<test/>\";\r\noptions.requestHeader = {\"temp1\":\"hello\", \"temp2\":\"world\"}; // temp1 및 temp2 헤더를 요청 헤더에 추가\r\noptions.success = doSucess;\r\noptions.error = doError;\r\nWebSquare.net.ajax( options );\n```\n\n"
      },
      "getParameter": {
        "!type": "fn(param: string)",
        "!doc": "get방식으로 넘어온 parameter를 String으로 반환합니다.\n\n**Parameters:**\n\n```param``` - ```String:N``` - 값을 가져올 uri에서 지정된 param\n\n**Return:**\n\n```String``` - param 문자열\n\n**Since:**\n\n2.0_1.1984A.20120424.105444\n\n**Sample:**\n\n```javascript\n\nWebSquare.net.getParameter(\"name\");\r\n\n```\n\n"
      }
    }
  }
}